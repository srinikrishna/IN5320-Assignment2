import { DataEngineLink, DataEngineLinkExecuteOptions, FetchType, JsonValue, ResolvedResourceQuery } from '../engine';
export declare type CustomResourceFactory = (type: FetchType, query: ResolvedResourceQuery, options?: DataEngineLinkExecuteOptions) => Promise<JsonValue | undefined>;
export declare type CustomResource = JsonValue | CustomResourceFactory;
export interface CustomData {
    [resourceName: string]: CustomResource;
}
export interface CustomLinkOptions {
    loadForever?: boolean;
    failOnMiss?: boolean;
}
export declare class CustomDataLink implements DataEngineLink {
    private failOnMiss;
    private loadForever;
    private data;
    constructor(customData: CustomData, { failOnMiss, loadForever }?: CustomLinkOptions);
    executeResourceQuery(type: FetchType, query: ResolvedResourceQuery, options: DataEngineLinkExecuteOptions): Promise<JsonValue>;
}
