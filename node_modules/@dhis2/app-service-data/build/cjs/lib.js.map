{"version":3,"file":"lib.js","sources":["../../src/engine/helpers/getMutationFetchType.ts","../../src/engine/helpers/resolveDynamicQuery.ts","../../src/engine/types/InvalidQueryError.ts","../../src/engine/helpers/validate.ts","../../src/engine/DataEngine.ts","../../src/engine/types/FetchError.ts","../../src/links/CustomDataLink.ts","../../src/links/ErrorLink.ts","../../src/links/RestAPILink/fetchData.ts","../../src/links/RestAPILink/path.ts","../../src/links/RestAPILink/queryToRequestOptions.ts","../../src/links/RestAPILink/queryToResourcePath.ts","../../src/links/RestAPILink.ts","../../src/react/context/defaultContext.ts","../../src/react/context/DataContext.tsx","../../src/react/components/CustomDataProvider.tsx","../../src/react/hooks/useStaticInput.ts","../../src/react/hooks/useQueryExecutor.ts","../../src/react/hooks/useDataEngine.ts","../../src/react/hooks/useDataMutation.ts","../../src/react/components/DataMutation.tsx","../../src/react/components/DataProvider.tsx","../../src/react/hooks/useDataQuery.ts","../../src/react/components/DataQuery.tsx"],"sourcesContent":["import { FetchType } from '../types/ExecuteOptions'\nimport { Mutation } from '../types/Mutation'\n\nexport const getMutationFetchType = (mutation: Mutation): FetchType =>\n    mutation.type === 'update'\n        ? mutation.partial\n            ? 'update'\n            : 'replace'\n        : mutation.type\n","import {\n    QueryVariables,\n    ResourceQuery,\n    ResolvedResourceQuery,\n} from '../types/Query'\n\nexport const resolveDynamicQuery = (\n    { resource, id, data, params }: ResourceQuery,\n    variables: QueryVariables\n): ResolvedResourceQuery => ({\n    resource,\n    id: typeof id === 'function' ? id(variables) : id,\n    data: typeof data === 'function' ? data(variables) : data,\n    params: typeof params === 'function' ? params(variables) : params,\n})\n","export class InvalidQueryError extends Error {\n    public type = 'invalid-query'\n    public details: string[]\n    public constructor(errors: string[]) {\n        super(`Invalid query\\n${errors.map(e => ' - ' + e).join('\\n')}`)\n        this.details = errors\n    }\n}\n","import { ResolvedResourceQuery } from '../types/Query'\nimport { InvalidQueryError } from '../types/InvalidQueryError'\n\nconst validQueryKeys = ['resource', 'id', 'params', 'data']\nconst validTypes = ['read', 'create', 'update', 'replace', 'delete']\n\nexport const getResourceQueryErrors = (\n    type: string,\n    query: ResolvedResourceQuery\n): string[] => {\n    if (!validTypes.includes(type)) {\n        return [`Unknown query or mutation type ${type}`]\n    }\n    if (typeof query !== 'object') {\n        return ['A query or mutation must be a javascript object']\n    }\n\n    const errors: string[] = []\n\n    if (!query.resource || typeof query.resource !== 'string') {\n        errors.push('Property resource must be a string')\n    }\n\n    if (type === 'create' && query.id) {\n        errors.push(\"Mutation type 'create' does not support property 'id'\")\n    }\n    if (query.id && typeof query.id !== 'string') {\n        errors.push('Property id must be a string')\n    }\n\n    if (query.params && typeof query.params !== 'object') {\n        errors.push('Property params must be an object')\n    }\n\n    if (type === 'delete' && query.data) {\n        errors.push(\"Mutation type 'delete' does not support property 'data'\")\n    }\n    const invalidKeys = Object.keys(query).filter(\n        k => !validQueryKeys.includes(k)\n    )\n    invalidKeys.forEach(k => {\n        errors.push(`Property ${k} is not supported`)\n    })\n\n    return errors\n}\n\nexport const validateResourceQueries = (\n    queries: ResolvedResourceQuery[],\n    names: string[] = []\n): void => {\n    if (names.length !== queries.length) {\n        for (let i = names.length; i < queries.length; ++i) {\n            names.push('query#' + i)\n        }\n    }\n    const errors = queries.reduce(\n        (errors: string[], query, i) =>\n            errors.concat(\n                getResourceQueryErrors('read', query).map(\n                    e => `[${names[i]}] ${e}`\n                )\n            ),\n        []\n    )\n\n    if (errors.length) {\n        throw new InvalidQueryError(errors)\n    }\n}\n\nexport const validateResourceQuery = (\n    type: string,\n    query: ResolvedResourceQuery\n): void => {\n    const errors = getResourceQueryErrors(type, query)\n    if (errors.length) {\n        throw new InvalidQueryError(errors)\n    }\n}\n","import { Query } from './types/Query'\nimport { getMutationFetchType } from './helpers/getMutationFetchType'\nimport { resolveDynamicQuery } from './helpers/resolveDynamicQuery'\nimport {\n    validateResourceQuery,\n    validateResourceQueries,\n} from './helpers/validate'\nimport { Mutation } from './types/Mutation'\nimport { QueryExecuteOptions } from './types/ExecuteOptions'\nimport { DataEngineLink } from './types/DataEngineLink'\nimport { JsonMap, JsonValue } from './types/JsonValue'\n\nconst reduceResponses = (responses: JsonValue[], names: string[]) =>\n    responses.reduce<JsonMap>((out, response, idx) => {\n        out[names[idx]] = response\n        return out\n    }, {})\n\nexport class DataEngine {\n    private link: DataEngineLink\n    public constructor(link: DataEngineLink) {\n        this.link = link\n    }\n\n    public query(\n        query: Query,\n        {\n            variables = {},\n            signal,\n            onComplete,\n            onError,\n        }: QueryExecuteOptions = {}\n    ): Promise<JsonMap> {\n        const names = Object.keys(query)\n        const queries = names\n            .map(name => query[name])\n            .map(q => resolveDynamicQuery(q, variables))\n\n        validateResourceQueries(queries, names)\n\n        return Promise.all(\n            queries.map(q => {\n                return this.link.executeResourceQuery('read', q, {\n                    signal,\n                })\n            })\n        )\n            .then(results => {\n                const data = reduceResponses(results, names)\n                onComplete && onComplete(data)\n                return data\n            })\n            .catch(error => {\n                onError && onError(error)\n                throw error\n            })\n    }\n\n    public mutate(\n        mutation: Mutation,\n        {\n            variables = {},\n            signal,\n            onComplete,\n            onError,\n        }: QueryExecuteOptions = {}\n    ): Promise<JsonValue> {\n        const query = resolveDynamicQuery(mutation, variables)\n\n        const type = getMutationFetchType(mutation)\n        validateResourceQuery(type, query)\n\n        const result = this.link.executeResourceQuery(type, query, {\n            signal,\n        })\n        return result\n            .then(data => {\n                onComplete && onComplete(data)\n                return data\n            })\n            .catch(error => {\n                onError && onError(error)\n                throw error\n            })\n    }\n}\n\nexport default DataEngine\n","export type FetchErrorTypeName = 'network' | 'unknown' | 'access' | 'aborted'\nexport type FetchErrorDetails = { message?: string }\n\nexport interface FetchErrorPayload {\n    type: FetchErrorTypeName\n    details?: FetchErrorDetails\n    message: string\n}\n\nexport class FetchError extends Error implements FetchErrorPayload {\n    public type: FetchErrorTypeName\n    public details: FetchErrorDetails\n\n    public constructor({ message, type, details = {} }: FetchErrorPayload) {\n        super(message)\n        this.type = type\n        this.details = details\n    }\n}\n","import {\n    DataEngineLink,\n    DataEngineLinkExecuteOptions,\n    FetchType,\n    JsonValue,\n    ResolvedResourceQuery,\n} from '../engine'\n\nexport type CustomResourceFactory = (\n    type: FetchType,\n    query: ResolvedResourceQuery,\n    options?: DataEngineLinkExecuteOptions\n) => Promise<JsonValue | undefined>\nexport type CustomResource = JsonValue | CustomResourceFactory\nexport interface CustomData {\n    [resourceName: string]: CustomResource\n}\nexport interface CustomLinkOptions {\n    loadForever?: boolean\n    failOnMiss?: boolean\n}\n\nexport class CustomDataLink implements DataEngineLink {\n    private failOnMiss: boolean\n    private loadForever: boolean\n    private data: CustomData\n    public constructor(\n        customData: CustomData,\n        { failOnMiss = true, loadForever = false }: CustomLinkOptions = {}\n    ) {\n        this.data = customData\n        this.failOnMiss = failOnMiss\n        this.loadForever = loadForever\n    }\n\n    public async executeResourceQuery(\n        type: FetchType,\n        query: ResolvedResourceQuery,\n        options: DataEngineLinkExecuteOptions\n    ) {\n        if (this.loadForever) {\n            return new Promise<JsonValue>(() => undefined)\n        }\n\n        const customResource = this.data[query.resource]\n        if (!customResource) {\n            if (this.failOnMiss) {\n                throw new Error(\n                    `No data provided for resource type ${query.resource}!`\n                )\n            }\n            return Promise.resolve(null)\n        }\n\n        switch (typeof customResource) {\n            case 'string':\n            case 'number':\n            case 'boolean':\n            case 'object':\n                return customResource\n            case 'function': {\n                const result = await customResource(type, query, options)\n                if (typeof result === 'undefined' && this.failOnMiss) {\n                    throw new Error(\n                        `The custom function for resource ${query.resource} must always return a value but returned ${result}`\n                    )\n                }\n                return result || null\n            }\n        }\n    }\n}\n","import { DataEngineLink } from '../engine'\n\nexport class ErrorLink implements DataEngineLink {\n    private errorMessage: string\n    public constructor(errorMessage: string) {\n        this.errorMessage = errorMessage\n    }\n    public executeResourceQuery() {\n        console.error(this.errorMessage)\n        return Promise.reject(this.errorMessage)\n    }\n}\n","import { FetchError, FetchErrorDetails, JsonValue } from '../../engine'\n\nexport const parseContentType = (contentType: string | null) => {\n    return contentType\n        ? contentType\n              .split(';')[0]\n              .trim()\n              .toLowerCase()\n        : null\n}\n\nexport const parseStatus = async (response: Response) => {\n    const accessError =\n        response.status === 401 ||\n        response.status === 403 ||\n        response.status === 409\n\n    if (accessError) {\n        let message\n        let details: FetchErrorDetails = {}\n\n        try {\n            details = await response.json()\n            message = details.message\n        } catch (e) {\n            // Do nothing\n        }\n\n        // Set a message in case of invalid json, or json without 'message' property\n        if (!message) {\n            message = response.status === 401 ? 'Unauthorized' : 'Forbidden'\n        }\n\n        throw new FetchError({\n            type: 'access',\n            message,\n            details,\n        })\n    }\n\n    if (response.status < 200 || response.status >= 400) {\n        const message = `An unknown error occurred - ${response.statusText} (${response.status})`\n        let details: FetchErrorDetails = {}\n\n        try {\n            details = await response.json()\n        } catch (e) {\n            // We can leave details as is if parsing fails\n        }\n\n        throw new FetchError({\n            type: 'unknown',\n            message,\n            details,\n        })\n    }\n\n    return response\n}\n\nexport function fetchData(\n    url: string,\n    options: RequestInit = {}\n): Promise<JsonValue> {\n    return fetch(url, {\n        ...options,\n        credentials: 'include',\n        headers: {\n            'X-Requested-With': 'XMLHttpRequest',\n            Accept: 'application/json',\n            ...options.headers,\n        },\n    })\n        .catch(err => {\n            throw new FetchError({\n                type: 'network',\n                message: 'An unknown network error occurred',\n                details: err,\n            })\n        })\n        .then(parseStatus)\n        .then(async response => {\n            if (\n                parseContentType(response.headers.get('Content-Type')) ===\n                'application/json'\n            ) {\n                return await response.json() // Will throw if invalid JSON!\n            }\n            return await response.text()\n        })\n}\n","export const joinPath = (...parts: (string | undefined | null)[]): string => {\n    const realParts = parts.filter(part => !!part) as string[]\n    return realParts.map(part => part.replace(/^\\/+|\\/+$/g, '')).join('/')\n}\n","import { ResolvedResourceQuery, FetchType } from '../../engine'\n\nconst getMethod = (type: FetchType): string => {\n    switch (type) {\n        case 'create':\n            return 'POST'\n        case 'read':\n            return 'GET'\n        case 'update':\n            return 'PATCH'\n        case 'replace':\n            return 'PUT'\n        case 'delete':\n            return 'DELETE'\n    }\n}\n\nexport const queryToRequestOptions = (\n    type: FetchType,\n    { data }: ResolvedResourceQuery,\n    signal?: AbortSignal\n): RequestInit => ({\n    method: getMethod(type),\n    body: data ? JSON.stringify(data) : undefined,\n    headers: data\n        ? {\n              'Content-Type': 'application/json',\n          }\n        : undefined,\n    signal,\n})\n","import {\n    ResolvedResourceQuery,\n    QueryParameters,\n    QueryParameterValue,\n} from '../../engine'\nimport { joinPath } from './path'\n\nconst encodeQueryParameter = (param: QueryParameterValue): string => {\n    if (Array.isArray(param)) {\n        return param.map(encodeQueryParameter).join(',')\n    }\n    if (typeof param === 'string') {\n        return encodeURIComponent(param)\n    }\n    if (typeof param === 'number' || typeof param === 'boolean') {\n        return String(param)\n    }\n    if (typeof param === 'object') {\n        throw new Error('Object parameter mappings not yet implemented')\n    }\n    throw new Error('Unknown parameter type')\n}\n\ntype ExpandedParam = {\n    key: string\n    value: QueryParameterValue\n}\n\nconst queryParametersMapToArray = (\n    params: QueryParameters\n): Array<ExpandedParam> =>\n    Object.keys(params).reduce((out, key) => {\n        const value = params[key]\n        if (key === 'filter' && Array.isArray(value)) {\n            value.forEach(item => {\n                out.push({\n                    key: 'filter',\n                    value: item,\n                })\n            })\n        } else if (params[key] !== null && params[key] !== undefined) {\n            out.push({\n                key,\n                value: params[key],\n            })\n        }\n        return out\n    }, [] as Array<ExpandedParam>)\n\nconst queryParametersToQueryString = (params: QueryParameters): string => {\n    const expandedParams = queryParametersMapToArray(params)\n\n    return expandedParams\n        .map(\n            ({ key, value }) =>\n                `${encodeURIComponent(key)}=${encodeQueryParameter(value)}`\n        )\n        .join('&')\n}\n\nconst actionPrefix = 'action::'\n\nconst isAction = (resource: string) => resource.startsWith(actionPrefix)\nconst makeActionPath = (resource: string) =>\n    joinPath(\n        'dhis-web-commons',\n        `${resource.substr(actionPrefix.length)}.action`\n    )\n\nexport const queryToResourcePath = (\n    apiPath: string,\n    { resource, id, params = {} }: ResolvedResourceQuery\n): string => {\n    const base = isAction(resource)\n        ? makeActionPath(resource)\n        : joinPath(apiPath, resource, id)\n\n    if (Object.keys(params).length) {\n        return `${base}?${queryParametersToQueryString(params)}`\n    }\n    return base\n}\n","import {\n    DataEngineLink,\n    DataEngineLinkExecuteOptions,\n    FetchType,\n    JsonValue,\n    ResolvedResourceQuery,\n} from '../engine/'\nimport { fetchData } from './RestAPILink/fetchData'\nimport { joinPath } from './RestAPILink/path'\nimport { queryToRequestOptions } from './RestAPILink/queryToRequestOptions'\nimport { queryToResourcePath } from './RestAPILink/queryToResourcePath'\n\nexport interface RestAPILinkInput {\n    baseUrl: string\n    apiVersion: number\n}\n\nexport class RestAPILink implements DataEngineLink {\n    private apiPath: string\n    private baseUrl: string\n    private apiVersion: number\n\n    public constructor({ baseUrl, apiVersion }: RestAPILinkInput) {\n        this.baseUrl = baseUrl\n        this.apiVersion = apiVersion\n        this.apiPath = joinPath('api', String(apiVersion))\n    }\n\n    private fetch(path: string, options: RequestInit): Promise<JsonValue> {\n        return fetchData(joinPath(this.baseUrl, path), options)\n    }\n\n    public executeResourceQuery(\n        type: FetchType,\n        query: ResolvedResourceQuery,\n        { signal }: DataEngineLinkExecuteOptions\n    ): Promise<JsonValue> {\n        return this.fetch(\n            queryToResourcePath(this.apiPath, query),\n            queryToRequestOptions(type, query, signal)\n        )\n    }\n}\n","import { DataEngine } from '../../engine'\nimport { ErrorLink } from '../../links'\n\nconst errorMessage =\n    'DHIS2 data context must be initialized, please ensure that you include a <DataProvider> in your application'\n\nconst link = new ErrorLink(errorMessage)\nconst engine = new DataEngine(link)\n\nexport const defaultContext = { engine }\n","import React from 'react'\nimport { ContextType } from '../../types'\nimport { defaultContext } from './defaultContext'\n\nexport const DataContext = React.createContext<ContextType>(defaultContext)\n","import React from 'react'\nimport { DataEngine } from '../../engine'\nimport { CustomDataLink, CustomData, CustomLinkOptions } from '../../links'\nimport { DataContext } from '../context/DataContext'\n\ninterface CustomProviderInput {\n    children: React.ReactNode\n    data: CustomData\n    options?: CustomLinkOptions\n}\nexport const CustomDataProvider = ({\n    children,\n    data,\n    options,\n}: CustomProviderInput) => {\n    const link = new CustomDataLink(data, options)\n    const engine = new DataEngine(link)\n\n    const context = { engine }\n    return (\n        <DataContext.Provider value={context}>{children}</DataContext.Provider>\n    )\n}\n","import React, { useState, useEffect, useRef } from 'react'\n\ninterface StaticInputOptions {\n    warn?: boolean\n    name?: string\n}\nexport const useStaticInput = <T>(\n    staticValue: T,\n    { warn = false, name = 'input' }: StaticInputOptions = {}\n): [T, React.Dispatch<React.SetStateAction<T>>] => {\n    const originalValue = useRef(staticValue)\n    const [value, setValue] = useState<T>(() => originalValue.current)\n    useEffect(() => {\n        if (warn && originalValue.current !== staticValue) {\n            console.warn(\n                `The ${name} should be static, don't create it within the render loop!`\n            )\n        }\n    }, [warn, staticValue, originalValue, name])\n    return [value, setValue]\n}\n","import { useState, useCallback, useRef, useEffect } from 'react'\n\nimport { FetchError, QueryExecuteOptions } from '../../engine'\nimport { ExecuteHookInput, ExecuteHookResult } from '../../types'\nimport { useStaticInput } from './useStaticInput'\n\ninterface StateType<T> {\n    called: boolean\n    loading: boolean\n    error?: FetchError\n    data?: T\n}\n\nexport const useQueryExecutor = <ReturnType>({\n    execute,\n    variables: initialVariables,\n    singular,\n    immediate,\n    onComplete,\n    onError,\n}: ExecuteHookInput<ReturnType>): ExecuteHookResult<ReturnType> => {\n    const [theExecute] = useStaticInput(execute)\n    const [state, setState] = useState<StateType<ReturnType>>({\n        called: !!immediate,\n        loading: !!immediate,\n    })\n\n    const variables = useRef(initialVariables)\n\n    const abortControllersRef = useRef<AbortController[]>([])\n    const abort = useCallback(() => {\n        abortControllersRef.current.forEach(controller => controller.abort())\n        abortControllersRef.current = []\n    }, [])\n\n    const manualAbort = useCallback(() => {\n        abort()\n        setState(state => ({\n            called: state.called,\n            loading: false,\n            error: new FetchError({ type: 'aborted', message: 'Aborted' }),\n        }))\n    }, [abort])\n\n    const refetch = useCallback(\n        (newVariables = {}) => {\n            setState(state =>\n                !state.called || !state.loading\n                    ? { called: true, loading: true }\n                    : state\n            )\n\n            if (singular) {\n                abort() // Cleanup any in-progress fetches\n            }\n            const controller = new AbortController()\n            abortControllersRef.current.push(controller)\n\n            variables.current = {\n                ...variables.current,\n                ...newVariables,\n            }\n\n            const options: QueryExecuteOptions = {\n                variables: variables.current,\n                signal: controller.signal,\n                onComplete,\n                onError,\n            }\n\n            return theExecute(options)\n                .then((data: ReturnType) => {\n                    if (!controller.signal.aborted) {\n                        setState({ called: true, loading: false, data })\n                        return data\n                    }\n                    return new Promise<ReturnType>(() => undefined) // Wait forever\n                })\n                .catch((error: FetchError) => {\n                    if (!controller.signal.aborted) {\n                        setState({ called: true, loading: false, error })\n                    }\n                    return new Promise<ReturnType>(() => undefined) // Don't throw errors in refetch promises, wait forever\n                })\n        },\n        [abort, onComplete, onError, singular, theExecute]\n    )\n\n    // Don't include immediate or refetch as deps, otherwise unintentional refetches\n    // may be triggered by changes to input, i.e. recreating the onComplete callback\n    useEffect(() => {\n        if (immediate) {\n            refetch()\n        }\n        return abort\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n    return { refetch, abort: manualAbort, ...state }\n}\n","import { useContext } from 'react'\nimport { DataContext } from '../context/DataContext'\n\nexport const useDataEngine = () => {\n    const context = useContext(DataContext)\n\n    return context.engine\n}\n","import { QueryOptions, Mutation } from '../../engine'\nimport { MutationRenderInput } from '../../types'\n\nimport { useQueryExecutor } from './useQueryExecutor'\nimport { useStaticInput } from './useStaticInput'\nimport { useDataEngine } from './useDataEngine'\nimport { useCallback } from 'react'\n\nconst empty = {}\nexport const useDataMutation = (\n    mutation: Mutation,\n    { onComplete, onError, variables = empty, lazy = true }: QueryOptions = {}\n): MutationRenderInput => {\n    const engine = useDataEngine()\n    const [theMutation] = useStaticInput<Mutation>(mutation, {\n        warn: true,\n        name: 'mutation',\n    })\n    const execute = useCallback(\n        options => engine.mutate(theMutation, options),\n        [engine, theMutation]\n    )\n    const { refetch: mutate, called, loading, error, data } = useQueryExecutor({\n        execute,\n        variables,\n        singular: false,\n        immediate: !lazy,\n        onComplete,\n        onError,\n    })\n\n    return [mutate, { engine, called, loading, error, data }]\n}\n","import { Mutation, MutationOptions } from '../../engine'\nimport { MutationRenderInput } from '../../types'\nimport { useDataMutation } from '../hooks/useDataMutation'\n\ninterface MutationInput extends MutationOptions {\n    mutation: Mutation\n    children: (input: MutationRenderInput) => any\n}\n\nexport const DataMutation = ({\n    mutation,\n    onComplete,\n    onError,\n    variables,\n    children,\n}: MutationInput) => {\n    const mutationState = useDataMutation(mutation, {\n        onComplete,\n        onError,\n        variables,\n    })\n\n    return children(mutationState)\n}\n","import React from 'react'\nimport { useConfig } from '@dhis2/app-service-config'\nimport { RestAPILink } from '../../links'\nimport { DataEngine } from '../../engine'\nimport { DataContext } from '../context/DataContext'\n\nexport interface ProviderInput {\n    baseUrl?: string\n    apiVersion?: number\n    children: React.ReactNode\n}\nexport const DataProvider = (props: ProviderInput) => {\n    const config = {\n        ...useConfig(),\n        ...props,\n    }\n\n    const link = new RestAPILink(config)\n    const engine = new DataEngine(link)\n\n    const context = { engine }\n\n    return (\n        <DataContext.Provider value={context}>\n            {props.children}\n        </DataContext.Provider>\n    )\n}\n","import { Query, QueryOptions } from '../../engine'\nimport { QueryRenderInput } from '../../types'\n\nimport { useCallback } from 'react'\nimport { useQueryExecutor } from './useQueryExecutor'\nimport { useStaticInput } from './useStaticInput'\nimport { useDataEngine } from './useDataEngine'\n\nconst empty = {}\nexport const useDataQuery = (\n    query: Query,\n    { onComplete, onError, variables = empty, lazy = false }: QueryOptions = {}\n): QueryRenderInput => {\n    const engine = useDataEngine()\n    const [theQuery] = useStaticInput<Query>(query, {\n        warn: true,\n        name: 'query',\n    })\n    const execute = useCallback(options => engine.query(theQuery, options), [\n        engine,\n        theQuery,\n    ])\n    const { refetch, called, loading, error, data } = useQueryExecutor({\n        execute,\n        variables,\n        singular: true,\n        immediate: !lazy,\n        onComplete,\n        onError,\n    })\n\n    return { engine, refetch, called, loading, error, data }\n}\n","import { Query, QueryOptions } from '../../engine'\nimport { QueryRenderInput } from '../../types'\nimport { useDataQuery } from '../hooks/useDataQuery'\n\ninterface QueryInput extends QueryOptions {\n    query: Query\n    children: (input: QueryRenderInput) => any\n}\n\nexport const DataQuery = ({\n    query,\n    onComplete,\n    onError,\n    variables,\n    lazy,\n    children,\n}: QueryInput) => {\n    const queryState = useDataQuery(query, {\n        onComplete,\n        onError,\n        variables,\n        lazy,\n    })\n\n    return children(queryState)\n}\n"],"names":["getMutationFetchType","mutation","type","partial","resolveDynamicQuery","resource","id","data","params","variables","InvalidQueryError","Error","constructor","errors","map","e","join","details","validQueryKeys","validTypes","getResourceQueryErrors","query","includes","push","invalidKeys","Object","keys","filter","k","forEach","validateResourceQueries","queries","names","length","i","reduce","concat","validateResourceQuery","reduceResponses","responses","out","response","idx","DataEngine","link","signal","onComplete","onError","name","q","Promise","all","executeResourceQuery","then","results","catch","error","mutate","result","FetchError","message","CustomDataLink","customData","failOnMiss","loadForever","options","undefined","customResource","resolve","ErrorLink","errorMessage","console","reject","parseContentType","contentType","split","trim","toLowerCase","parseStatus","accessError","status","json","statusText","fetchData","url","fetch","credentials","headers","Accept","err","get","text","joinPath","parts","realParts","part","replace","getMethod","queryToRequestOptions","method","body","JSON","stringify","encodeQueryParameter","param","Array","isArray","encodeURIComponent","String","queryParametersMapToArray","key","value","item","queryParametersToQueryString","expandedParams","actionPrefix","isAction","startsWith","makeActionPath","substr","queryToResourcePath","apiPath","base","RestAPILink","baseUrl","apiVersion","path","engine","defaultContext","DataContext","React","createContext","CustomDataProvider","children","context","useStaticInput","staticValue","warn","originalValue","useRef","setValue","useState","current","useEffect","useQueryExecutor","execute","initialVariables","singular","immediate","theExecute","state","setState","called","loading","abortControllersRef","abort","useCallback","controller","manualAbort","refetch","newVariables","AbortController","aborted","useDataEngine","useContext","empty","useDataMutation","lazy","theMutation","DataMutation","mutationState","DataProvider","props","config","useConfig","useDataQuery","theQuery","DataQuery","queryState"],"mappings":"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"}