/* eslint-disable */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _JSXStyle = _interopDefault(require('styled-jsx/style'));
var React = require('react');
var React__default = _interopDefault(React);
var theme = require('@dhis2/ui-constants');
var propTypes = require('@dhis2/prop-types');
var propTypes__default = _interopDefault(propTypes);
var cx = _interopDefault(require('classnames'));
var uiIcons = require('@dhis2/ui-icons');
var reactDom = require('react-dom');
var reactPopper = require('react-popper');
var ResizeObserver = _interopDefault(require('resize-observer-polyfill'));
var propTypes$1 = _interopDefault(require('prop-types'));

/**
 * @module
 * @desc Normalize CSS
 * - https://github.com/necolas/normalize.css
 * - https://www.paulirish.com/2012/box-sizing-border-box-ftw/
 * @returns {React.Component}
 * @example import { CssReset } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/cssreset--default|Storybook}
 */

const CssReset = () => /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3745978156",
  dynamic: [theme.theme.fonts, theme.theme.fonts]
}, ["html{line-height:1.15;-webkit-text-size-adjust:100%;box-sizing:border-box;}", "*,*:before,*:after{font-family:".concat(theme.theme.fonts, ";box-sizing:inherit;}"), "body{margin:0;font-family:".concat(theme.theme.fonts, ";}"), "main{display:block;}", "h1{font-size:2em;margin:0.67em 0;}", "hr{box-sizing:content-box;height:0;overflow:visible;}", "pre{font-family:monospace,monospace;font-size:1em;}", "a{background-color:transparent;}", "abbr[title]{border-bottom:none;-webkit-text-decoration:underline;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;}", "b,strong{font-weight:bolder;}", "code,kbd,samp{font-family:monospace,monospace;font-size:1em;}", "small{font-size:80%;}", "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}", "sub{bottom:-0.25em;}", "sup{top:-0.5em;}", "img{border-style:none;}", "button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0;}", "button,input{overflow:visible;}", "button,select{text-transform:none;}", "button,[type='button'],[type='reset'],[type='submit']{-webkit-appearance:button;}", "button::-moz-focus-inner,[type='button']::-moz-focus-inner,[type='reset']::-moz-focus-inner,[type='submit']::-moz-focus-inner{border-style:none;padding:0;}", "button:-moz-focusring,[type='button']:-moz-focusring,[type='reset']:-moz-focusring,[type='submit']:-moz-focusring{outline:1px dotted ButtonText;}", "fieldset{padding:0.35em 0.75em 0.625em;}", "legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal;}", "progress{vertical-align:baseline;}", "textarea{overflow:auto;}", "[type='checkbox'],[type='radio']{box-sizing:border-box;padding:0;}", "[type='number']::-webkit-inner-spin-button,[type='number']::-webkit-outer-spin-button{height:auto;}", "[type='search']{-webkit-appearance:textfield;outline-offset:-2px;}", "[type='search']::-webkit-search-decoration{-webkit-appearance:none;}", "::-webkit-file-upload-button{-webkit-appearance:button;font:inherit;}", "details{display:block;}", "summary{display:list-item;}", "template{display:none;}", "[hidden]{display:none;}"]);

const toPrefixedThemeSection = themeSectionKey => Object.entries(theme[themeSectionKey]).reduce((prefixed, [key, value]) => {
  prefixed["".concat(themeSectionKey, "-").concat(key)] = value;
  return prefixed;
}, {});

const toCustomPropertyString = themeSection => Object.entries(themeSection).map(([key, value]) => "--".concat(key, ": ").concat(value, ";")).join('\n');
/**
 * @module
 * @description Injects our theme variables as CSS custom properties
 * @param {CssVariables.PropTypes} props
 * @returns {React.Component}
 * @example import { CssVariables } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/cssvariables--default|Storybook}
 */


const CssVariables = ({
  colors,
  theme,
  layers,
  spacers,
  elevations
}) => {
  const allowedProps = {
    colors,
    theme,
    layers,
    spacers,
    elevations
  };
  const variables = Object.keys(allowedProps) // Filter all props that are false
  .filter(prop => allowedProps[prop]) // Map props to corresponding theme section and prefixes keys with section name
  .map(toPrefixedThemeSection) // Map each section to a single string of css custom property declarations
  .map(toCustomPropertyString) // Join all the sections to a single string
  .join('\n');
  return /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "3443925957",
    dynamic: [variables]
  }, ["html{".concat(variables, ";}")]);
};

CssVariables.defaultProps = {
  colors: false,
  theme: false,
  layers: false,
  spacers: false,
  elevations: false
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {boolean} [colors]
 * @prop {boolean} [theme]
 * @prop {boolean} [layers]
 * @prop {boolean} [spacers]
 * @prop {boolean} [elevations]
 */

CssVariables.propTypes = {
  colors: propTypes__default.bool,
  elevations: propTypes__default.bool,
  layers: propTypes__default.bool,
  spacers: propTypes__default.bool,
  theme: propTypes__default.bool
};

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

class Action extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "onClick", event => {
      this.props.onClick(event);
      this.props.hide(event);
    });
  }

  render() {
    return /*#__PURE__*/React__default.createElement("span", {
      onClick: this.onClick,
      "data-test": this.props.dataTest,
      className: _JSXStyle.dynamic([["663141299", [theme.spacers.dp12]]])
    }, this.props.label, /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "663141299",
      dynamic: [theme.spacers.dp12]
    }, ["span.__jsx-style-dynamic-selector{margin-right:".concat(theme.spacers.dp12, ";-webkit-text-decoration:underline;text-decoration:underline;}"), "span.__jsx-style-dynamic-selector:hover{cursor:pointer;}"]));
  }

}

Action.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  hide: propTypes__default.func.isRequired,
  label: propTypes__default.string.isRequired,
  onClick: propTypes__default.func.isRequired
};

const Actions = ({
  actions,
  hide,
  dataTest
}) => {
  if (!actions) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["961263490", [theme.spacers.dp48, theme.spacers.dp12]]])
  }, actions.map(action => /*#__PURE__*/React__default.createElement(Action, _extends({
    key: action.label
  }, action, {
    hide: hide,
    dataTest: "".concat(dataTest, "-action")
  }))), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "961263490",
    dynamic: [theme.spacers.dp48, theme.spacers.dp12]
  }, ["div.__jsx-style-dynamic-selector{margin-left:".concat(theme.spacers.dp48, ";margin-right:-").concat(theme.spacers.dp12, ";}")]));
};

const actionsPropType = propTypes__default.arrayWithLength(0, 2, propTypes__default.shape({
  label: propTypes__default.string.isRequired,
  onClick: propTypes__default.func.isRequired
}));
Actions.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  hide: propTypes__default.func.isRequired,
  actions: actionsPropType
};

const Dismiss = ({
  onClick,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  onClick: onClick,
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["4165464483", [theme.spacers.dp24]]])
}, /*#__PURE__*/React__default.createElement(uiIcons.Close, null), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "4165464483",
  dynamic: [theme.spacers.dp24]
}, ["div.__jsx-style-dynamic-selector{margin-left:".concat(theme.spacers.dp24, ";}"), "div.__jsx-style-dynamic-selector:hover{cursor:pointer;}", "div.__jsx-style-dynamic-selector svg{width:18px;height:18px;}"]));

Dismiss.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  onClick: propTypes__default.func.isRequired
};

const Icon = ({
  icon,
  success,
  warning,
  critical,
  info,
  dataTest
}) => {
  if (icon === false) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["2765176098", [theme.spacers.dp16]]])
  }, React__default.isValidElement(icon) ? icon : /*#__PURE__*/React__default.createElement(uiIcons.StatusIcon, {
    valid: success,
    error: critical,
    warning: warning,
    info: info
  }), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2765176098",
    dynamic: [theme.spacers.dp16]
  }, ["div.__jsx-style-dynamic-selector{margin-right:".concat(theme.spacers.dp16, ";}"), "div.__jsx-style-dynamic-selector svg{width:24px;height:24px;}"]));
};

const iconPropType = propTypes__default.oneOfType([propTypes__default.bool, propTypes__default.element]);
const alertStatePropType = propTypes__default.mutuallyExclusive(['success', 'warning', 'critical', 'info'], propTypes__default.bool);
Icon.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  critical: alertStatePropType,
  icon: iconPropType,
  info: alertStatePropType,
  success: alertStatePropType,
  warning: alertStatePropType
};

const Message = ({
  children
}) => /*#__PURE__*/React__default.createElement("div", {
  className: "jsx-3951482246"
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3951482246"
}, ["div.jsx-3951482246{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;min-width:240px;}"]));

Message.propTypes = {
  children: propTypes__default.string.isRequired
};

const ANIMATION_TIME = 350;
const _defaultExport = ["div.jsx-123723426{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border-radius:4px;box-shadow:".concat(theme.elevations.e300, ";padding-top:").concat(theme.spacers.dp12, ";padding-right:").concat(theme.spacers.dp16, ";padding-bottom:").concat(theme.spacers.dp12, ";padding-left:").concat(theme.spacers.dp24, ";margin-bottom:").concat(theme.spacers.dp16, ";max-width:600px;font-size:14px;-webkit-transform:translateY(1000px);-ms-transform:translateY(1000px);transform:translateY(1000px);-webkit-transition:-webkit-transform ").concat(ANIMATION_TIME, "ms cubic-bezier(0.4,0,0.6,1);-webkit-transition:transform ").concat(ANIMATION_TIME, "ms cubic-bezier(0.4,0,0.6,1);transition:transform ").concat(ANIMATION_TIME, "ms cubic-bezier(0.4,0,0.6,1);pointer-events:all;}"), "div.info.jsx-123723426{background-color:".concat(theme.colors.grey900, ";color:").concat(theme.colors.white, ";}"), "div.info.jsx-123723426 path{fill:".concat(theme.colors.white, ";}"), "div.success.jsx-123723426{background-color:".concat(theme.colors.green800, ";color:").concat(theme.colors.white, ";}"), "div.success.jsx-123723426 path{fill:".concat(theme.colors.white, ";}"), "div.warning.jsx-123723426{background-color:".concat(theme.colors.yellow300, ";color:").concat(theme.colors.yellow900, ";}"), "div.warning.jsx-123723426 path{fill:".concat(theme.colors.yellow900, ";}"), "div.critical.jsx-123723426{background-color:".concat(theme.colors.red800, ";color:").concat(theme.colors.white, ";}"), "div.critical.jsx-123723426 path{fill:".concat(theme.colors.white, ";}"), "div.visible.jsx-123723426{-webkit-transform:translateY(0px);-ms-transform:translateY(0px);transform:translateY(0px);}"];
_defaultExport.__hash = "123723426";

/**
 * @module
 * @param {AlertBar.PropTypes} props
 *
 * @returns {React.Component}
 *
 * @example import { AlertBar } from @dhis2/ui-core
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/alertbar.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/alertbar--default|Storybook}
 */

class AlertBar extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      visible: false,
      hidden: false
    });

    _defineProperty(this, "startDisplayTimeout", () => {
      if (this.shouldAutoHide()) {
        this.displayTimeout = setTimeout(() => {
          this.hide(null);
        }, this.timeRemaining);
      }
    });

    _defineProperty(this, "stopDisplayTimeOut", () => {
      if (this.shouldAutoHide()) {
        const elapsedTime = Date.now() - this.startTime;
        this.timeRemaining = this.timeRemaining - elapsedTime;
        clearTimeout(this.displayTimeout);
      }
    });

    _defineProperty(this, "hide", event => {
      clearTimeout(this.displayTimeout);
      this.setState({
        visible: false
      });
      this.onHiddenTimeout = setTimeout(() => {
        this.setState({
          hidden: true
        }, () => this.props.onHidden && this.props.onHidden({}, event));
      }, ANIMATION_TIME);
    });
  }

  componentDidMount() {
    this.init();
  }

  componentDidUpdate(_prevProps, prevState) {
    // Only re-init when props change, ignore state changes
    if (prevState.visible === this.state.visible && prevState.hidden === this.state.hidden) {
      this.init();
    }
  }

  componentWillUnmount() {
    clearTimeout(this.displayTimeout);
    clearTimeout(this.onHiddenTimeout);
  }

  init() {
    this.startTime = Date.now();
    this.timeRemaining = this.props.duration;
    this.startDisplayTimeout();
    this.show();
  }

  show() {
    requestAnimationFrame(() => {
      this.setState({
        visible: true
      });
    });
  }

  shouldAutoHide() {
    const {
      permanent,
      warning,
      critical
    } = this.props;
    return !(permanent || warning || critical);
  }

  render() {
    const {
      className,
      children,
      success,
      warning,
      critical,
      icon,
      actions,
      dataTest
    } = this.props;
    const {
      visible,
      hidden
    } = this.state;

    if (hidden) {
      return null;
    }

    const info = !critical && !success && !warning;
    return /*#__PURE__*/React__default.createElement("div", {
      "data-test": dataTest,
      onMouseEnter: this.stopDisplayTimeOut,
      onMouseLeave: this.startDisplayTimeout,
      className: "jsx-".concat(_defaultExport.__hash) + " " + (cx(className, {
        info,
        success,
        warning,
        critical,
        visible
      }) || "")
    }, /*#__PURE__*/React__default.createElement(Icon, {
      dataTest: "".concat(dataTest, "-icon"),
      icon: icon,
      critical: critical,
      success: success,
      warning: warning,
      info: info
    }), /*#__PURE__*/React__default.createElement(Message, null, children), /*#__PURE__*/React__default.createElement(Actions, {
      actions: actions,
      hide: this.hide,
      dataTest: dataTest
    }), /*#__PURE__*/React__default.createElement(Dismiss, {
      onClick: this.hide,
      dataTest: "".concat(dataTest, "-dismiss")
    }), /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: _defaultExport.__hash
    }, _defaultExport));
  }

}

const alertTypePropType = propTypes__default.mutuallyExclusive(['success', 'warning', 'critical'], propTypes__default.bool);
AlertBar.defaultProps = {
  duration: 8000,
  dataTest: 'dhis2-uicore-alertbar',
  icon: true
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [children] - The message string for the alert
 * @prop {string} [className]
 * @prop {boolean} [success] - `success`, `warning`, and `critical` are
 * mutually exclusive props.
 * @prop {boolean} [warning]
 * @prop {boolean} [critical]
 *
 * @prop {(Element|boolean)} [icon=true]
 *
 * @prop {number} [duration]
 * @prop {boolean} [permanent]
 * @prop {Array} [actions] An array of 0-2 action objects with the shape: `{ label: {string}, onClick: {function} }`
 * @prop {function} [onHidden]
 * @prop {string} [dataTest]
 */

AlertBar.propTypes = {
  actions: actionsPropType,
  children: propTypes__default.string,
  className: propTypes__default.string,
  critical: alertTypePropType,
  dataTest: propTypes__default.string,
  duration: propTypes__default.number,
  icon: iconPropType,
  permanent: propTypes__default.bool,
  success: alertTypePropType,
  warning: alertTypePropType,
  onHidden: propTypes__default.func
};

/**
 * @module
 * @param {AlertStack.PropTypes} props
 * @returns {React.Component}
 * @example import { AlertStack } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/alertstack--default|Storybook}
 */

const AlertStack = ({
  className,
  children,
  dataTest
}) => reactDom.createPortal( /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["132471376", [theme.layers.alert]]]) + " " + (cx(className) || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "132471376",
  dynamic: [theme.layers.alert]
}, ["div.__jsx-style-dynamic-selector{position:fixed;top:auto;right:auto;bottom:0;left:50%;-webkit-transform:translateX(-50%);-ms-transform:translateX(-50%);transform:translateX(-50%);z-index:".concat(theme.layers.alert, ";display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column-reverse;-ms-flex-direction:column-reverse;flex-direction:column-reverse;pointer-events:none;}")])), document.body);

AlertStack.defaultProps = {
  dataTest: 'dhis2-uicore-alertstack'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [className]
 * @prop {Array.<AlertBar>} [children]
 * @prop {string} [dataTest]
 */

AlertStack.propTypes = {
  children: propTypes__default.arrayOf(propTypes__default.element),
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};

/**
 * @module
 *
 * @param {Box.PropTypes} props
 * @returns {React.Component}
 */

const Box = ({
  overflow,
  height,
  minHeight,
  maxHeight,
  width,
  minWidth,
  maxWidth,
  marginTop,
  children,
  dataTest,
  className
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["3369228338", [marginTop ? "margin-top: ".concat(marginTop, ";") : '', height ? "height: ".concat(height, ";") : '', minHeight ? "min-height: ".concat(minHeight, ";") : '', maxHeight ? "max-height: ".concat(maxHeight, ";") : '', width ? "width: ".concat(width, ";") : '', minWidth ? "min-width: ".concat(minWidth, ";") : '', maxWidth ? "max-width: ".concat(maxWidth, ";") : '', overflow ? "overflow: ".concat(overflow, ";") : '']]]) + " " + (className || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3369228338",
  dynamic: [marginTop ? "margin-top: ".concat(marginTop, ";") : '', height ? "height: ".concat(height, ";") : '', minHeight ? "min-height: ".concat(minHeight, ";") : '', maxHeight ? "max-height: ".concat(maxHeight, ";") : '', width ? "width: ".concat(width, ";") : '', minWidth ? "min-width: ".concat(minWidth, ";") : '', maxWidth ? "max-width: ".concat(maxWidth, ";") : '', overflow ? "overflow: ".concat(overflow, ";") : '']
}, ["div.__jsx-style-dynamic-selector{".concat(marginTop ? "margin-top: ".concat(marginTop, ";") : '', " ").concat(height ? "height: ".concat(height, ";") : '', " ").concat(minHeight ? "min-height: ".concat(minHeight, ";") : '', " ").concat(maxHeight ? "max-height: ".concat(maxHeight, ";") : '', " ").concat(width ? "width: ".concat(width, ";") : '', " ").concat(minWidth ? "min-width: ".concat(minWidth, ";") : '', " ").concat(maxWidth ? "max-width: ".concat(maxWidth, ";") : '', " ").concat(overflow ? "overflow: ".concat(overflow, ";") : '', ";}")]));
Box.defaultProps = {
  dataTest: 'dhis2-uicore-box'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [className]
 * @prop {string} [height]
 * @prop {string} [minHeight]
 * @prop {string} [maxHeight]
 * @prop {string} [width]
 * @prop {string} [minWidth]
 * @prop {string} [maxWidth]
 * @prop {string} [dataTest]
 */

Box.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  height: propTypes__default.string,
  marginTop: propTypes__default.string,
  maxHeight: propTypes__default.string,
  maxWidth: propTypes__default.string,
  minHeight: propTypes__default.string,
  minWidth: propTypes__default.string,
  overflow: propTypes__default.string,
  width: propTypes__default.string
};

const _defaultExport$1 = ["button.jsx-1653853836{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;position:relative;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;border-radius:4px;font-weight:400;-webkit-letter-spacing:0.5px;-moz-letter-spacing:0.5px;-ms-letter-spacing:0.5px;letter-spacing:0.5px;-webkit-text-decoration:none;text-decoration:none;cursor:pointer;-webkit-transition:all 0.15s cubic-bezier(0.4,0,0.6,1);transition:all 0.15s cubic-bezier(0.4,0,0.6,1);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:".concat(theme.colors.grey900, ";height:36px;padding:0 ").concat(theme.spacers.dp12, ";font-size:14px;line-height:16px;border:1px solid ").concat(theme.colors.grey500, ";background-color:#f9fafb;}"), "button.jsx-1653853836:disabled{cursor:not-allowed;}", "button.jsx-1653853836:focus{outline:none;}", "button.jsx-1653853836::after{content:' ';pointer-events:none;position:absolute;top:-2px;right:-2px;bottom:-2px;left:-2px;z-index:1;border:2px solid transparent;border-radius:inherit;-webkit-transition:border-color 0.15s cubic-bezier(0.4,0,0.6,1);transition:border-color 0.15s cubic-bezier(0.4,0,0.6,1);}", "button.jsx-1653853836:active.jsx-1653853836:focus.jsx-1653853836::after,button.jsx-1653853836:disabled.jsx-1653853836:focus.jsx-1653853836::after{border-color:transparent;}", "button.jsx-1653853836:hover{border-color:".concat(theme.colors.grey500, ";background-color:").concat(theme.colors.grey200, ";}"), "button.jsx-1653853836:active,button.jsx-1653853836:active.jsx-1653853836:focus{border-color:".concat(theme.colors.grey500, ";background-color:").concat(theme.colors.grey200, ";box-shadow:0 0 0 1px rgb(0,0,0,0.1) inset;}"), "button.jsx-1653853836:focus{background-color:#f9fafb;}", "button.jsx-1653853836:focus.jsx-1653853836::after{border-color:".concat(theme.theme.primary600, ";}"), "button.jsx-1653853836:disabled{border-color:".concat(theme.colors.grey400, ";background-color:#f9fafb;box-shadow:none;color:").concat(theme.theme.disabled, ";fill:").concat(theme.theme.disabled, ";}"), ".small.jsx-1653853836{height:28px;padding:0 8px;font-size:14px;line-height:16px;}", ".large.jsx-1653853836{height:43px;padding:0 ".concat(theme.spacers.dp24, ";font-size:16px;-webkit-letter-spacing:0.57px;-moz-letter-spacing:0.57px;-ms-letter-spacing:0.57px;letter-spacing:0.57px;line-height:19px;}"), ".primary.jsx-1653853836{border-color:".concat(theme.theme.primary800, ";background:linear-gradient(180deg,#1565c0 0%,#0650a3 100%);background-color:#2b61b3;color:").concat(theme.colors.white, ";fill:").concat(theme.colors.white, ";font-weight:500;}"), ".primary.jsx-1653853836:hover{border-color:".concat(theme.theme.primary800, ";background:linear-gradient(180deg,#054fa3 0%,#034793 100%);background-color:#21539f;}"), ".primary.jsx-1653853836:active,.primary.jsx-1653853836:active.jsx-1653853836:focus{border-color:".concat(theme.theme.primary800, ";background:linear-gradient(180deg,#054fa3 0%,#034793 100%);background-color:#1c4a90;box-shadow:0 0 0 1px rgba(0,0,0,0.18) inset;}"), ".primary.jsx-1653853836:focus{background:linear-gradient(180deg,#1565c0 0%,#0650a3 100%);background-color:#285dac;}", ".primary.jsx-1653853836:focus.jsx-1653853836::after{border-color:".concat(theme.colors.yellow300, ";}"), ".primary.jsx-1653853836:disabled{border-color:".concat(theme.theme.primary800, ";background:linear-gradient(180deg,#1565c0 0%,#0650a3 100%);background-color:#b6c8e2;box-shadow:none;color:").concat(theme.colors.white, ";fill:").concat(theme.colors.white, ";opacity:0.33;}"), ".secondary.jsx-1653853836{border-color:".concat(theme.colors.grey400, ";background-color:transparent;}"), ".secondary.jsx-1653853836:hover{border-color:".concat(theme.colors.grey400, ";background-color:rgba(160,173,186,0.08);}"), ".secondary.jsx-1653853836:active,.secondary.jsx-1653853836:active.jsx-1653853836:focus{border-color:".concat(theme.colors.grey400, ";background-color:rgba(160,173,186,0.2);box-shadow:none;}"), ".secondary.jsx-1653853836:focus{background-color:transparent;}", ".secondary.jsx-1653853836:focus.jsx-1653853836::after{border-color:".concat(theme.theme.primary600, ";}"), ".secondary.jsx-1653853836:disabled{border-color:".concat(theme.colors.grey400, ";background-color:transparent;box-shadow:none;color:").concat(theme.theme.disabled, ";fill:").concat(theme.theme.disabled, ";}"), ".destructive.jsx-1653853836{border-color:#a10b0b;background:linear-gradient(180deg,#d32f2f 0%,#b71c1c 100%);background-color:#b9242b;color:".concat(theme.colors.white, ";fill:").concat(theme.colors.white, ";font-weight:500;}"), ".destructive.jsx-1653853836:hover{border-color:#a10b0b;background:linear-gradient(180deg,#b81c1c 0%,#b80c0b 100%);background-color:#ac0f1a;}", ".destructive.jsx-1653853836:active,.destructive.jsx-1653853836:active.jsx-1653853836:focus{border-color:#a10b0b;background:linear-gradient(180deg,#b81c1c 0%,#b80c0b 100%);background-color:#ac101b;box-shadow:0 0 0 1px rgba(0,0,0,0.18) inset;}", ".destructive.jsx-1653853836:focus{background:linear-gradient(180deg,#d32f2f 0%,#b71c1c 100%);background-color:#b72229;}", ".destructive.jsx-1653853836:focus.jsx-1653853836:after{border-color:#5e0303;}", ".destructive.jsx-1653853836:disabled{border-color:#a10b0b;background:linear-gradient(180deg,#d32f2f 0%,#b71c1c 100%);background-color:#e5b5b7;box-shadow:none;color:".concat(theme.colors.white, ";fill:").concat(theme.colors.white, ";opacity:0.33;}"), ".icon-only.jsx-1653853836{padding:0 0 0 6px;}", ".button-icon.jsx-1653853836{margin-right:6px;color:inherit;fill:inherit;font-size:26px;vertical-align:middle;pointer-events:none;}", ".small.icon-only.jsx-1653853836{padding:0 0 0 2px;}", ".small.jsx-1653853836 .button-icon.jsx-1653853836{margin-right:2px;}", ".toggled.jsx-1653853836{background:".concat(theme.colors.grey700, ";border:1px solid ").concat(theme.colors.grey900, ";color:").concat(theme.colors.grey050, ";fill:").concat(theme.colors.grey050, ";}"), ".toggled.jsx-1653853836:focus{background:".concat(theme.colors.grey800, ";border:1px solid ").concat(theme.colors.yellow300, ";}"), ".toggled.jsx-1653853836:hover{background:".concat(theme.colors.grey800, ";border-color:").concat(theme.colors.grey900, ";}"), ".toggled.jsx-1653853836:focus.jsx-1653853836::after{border-color:".concat(theme.colors.yellow300, ";}"), ".toggled.jsx-1653853836:active,.toggled.jsx-1653853836:active.jsx-1653853836:focus{background:".concat(theme.colors.grey900, ";border-color:").concat(theme.colors.grey900, ";}"), ".toggled.jsx-1653853836:disabled{background:".concat(theme.colors.grey500, ";border-color:").concat(theme.colors.grey600, ";color:").concat(theme.colors.grey050, ";fill:").concat(theme.colors.grey050, ";opacity:1;}")];
_defaultExport$1.__hash = "1653853836";

/**
 * @module
 * @param {Button.PropTypes} props
 *
 * @returns {React.Component}
 *
 * @example import { Button } from @dhis2/ui-core
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/button.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/button-basic--default|Storybook}
 */

const Button = ({
  children,
  className,
  dataTest,
  destructive,
  disabled,
  icon,
  initialFocus,
  large,
  name,
  primary,
  secondary,
  small,
  tabIndex,
  toggled,
  type,
  value,
  onBlur,
  onClick,
  onFocus
}) => {
  const ref = React.useRef();
  React.useEffect(() => {
    if (initialFocus && ref.current) ref.current.focus();
  }, [initialFocus, ref.current]);

  const handleClick = event => onClick && onClick({
    value,
    name
  }, event);

  const handleBlur = event => onBlur && onBlur({
    value,
    name
  }, event);

  const handleFocus = event => onFocus && onFocus({
    value,
    name
  }, event);

  const iconOnly = icon && !children;
  const buttonClassName = cx(className, {
    primary,
    secondary,
    destructive,
    small,
    large,
    'icon-only': iconOnly,
    toggled
  });
  return /*#__PURE__*/React__default.createElement("button", {
    ref: ref,
    "data-test": dataTest,
    disabled: disabled,
    tabIndex: tabIndex,
    type: type,
    onBlur: handleBlur,
    onClick: handleClick,
    onFocus: handleFocus,
    className: "jsx-".concat(_defaultExport$1.__hash) + " " + (buttonClassName || "")
  }, icon && /*#__PURE__*/React__default.createElement("span", {
    className: "jsx-".concat(_defaultExport$1.__hash) + " " + "button-icon"
  }, icon), children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: _defaultExport$1.__hash
  }, _defaultExport$1));
};
Button.defaultProps = {
  type: 'button',
  dataTest: 'dhis2-uicore-button'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {Node} [children] The children to render in the button
 * @prop {function} [onClick] The click handler
 * @prop {function} [onBlur]
 * @prop {function} [onFocus]
 *
 * @prop {string} [className]
 * @prop {string} [name]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 * @prop {boolean} [small] - `small` and `large` are mutually exclusive
 * @prop {boolean} [large]
 * @prop {string} [type=button] Type of button: `submit`, `reset`, or
 * `button`
 *
 * @prop {boolean } [primary] - `primary`, `secondary`, and
 * `destructive` are mutually exclusive boolean props
 * @prop {boolean } [secondary]
 * @prop {boolean } [destructive]
 *
 * @prop {boolean} [disabled] Disable the button
 * @prop {Element} [icon]
 *
 * @prop {string} [dataTest]
 * @prop {boolean} [initialFocus] Grants the button the initial focus
 * state
 */

Button.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  destructive: theme.sharedPropTypes.buttonVariantPropType,
  disabled: propTypes__default.bool,
  icon: propTypes__default.element,
  initialFocus: propTypes__default.bool,
  large: theme.sharedPropTypes.sizePropType,
  name: propTypes__default.string,
  primary: theme.sharedPropTypes.buttonVariantPropType,
  secondary: theme.sharedPropTypes.buttonVariantPropType,
  small: theme.sharedPropTypes.sizePropType,
  tabIndex: propTypes__default.string,
  toggled: propTypes__default.bool,
  type: propTypes__default.oneOf(['submit', 'reset', 'button']),
  value: propTypes__default.string,
  onBlur: propTypes__default.func,
  onClick: propTypes__default.func,
  onFocus: propTypes__default.func
};

/**
 * @module
 * @param {ButtonStrip.PropTypes} props
 * @returns {React.Component}
 * @example import { ButtonStrip } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/buttonstrip--default|Storybook}
 */

const ButtonStrip = ({
  className,
  children,
  middle,
  end,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["2823325675", [theme.spacers.dp16]]]) + " " + (cx(className, {
    start: !middle && !end,
    middle,
    end
  }) || "")
}, React.Children.map(children, child => /*#__PURE__*/React__default.createElement("div", {
  className: _JSXStyle.dynamic([["2823325675", [theme.spacers.dp16]]]) + " " + "box"
}, child)), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2823325675",
  dynamic: [theme.spacers.dp16]
}, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", "div.middle.__jsx-style-dynamic-selector{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}", "div.end.__jsx-style-dynamic-selector{-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}", ".box.__jsx-style-dynamic-selector{margin-left:".concat(theme.spacers.dp16, ";}"), ".box.__jsx-style-dynamic-selector:first-child{margin-left:0;}"]));

const alignmentPropType = propTypes__default.mutuallyExclusive(['middle', 'end'], propTypes__default.bool);
ButtonStrip.defaultProps = {
  dataTest: 'dhis2-uicore-buttonstrip'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [className]
 * @prop {Node} [children]
 * @prop {boolean} [middle] - The props `middle`, and `end` are
 * mutually exlusive
 * @prop {boolean} [end]
 * @prop {string} [dataTest]
 */

ButtonStrip.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  end: alignmentPropType,
  middle: alignmentPropType
};

/**
 * @module
 * @param {Card.PropTypes} props
 * @returns {React.Component}
 * @example import { Card } from '@dhis2/ui-core'
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/card.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/card--default|Storybook}
 */

const Card = ({
  className,
  children,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["166161216", [theme.colors.white]]]) + " " + (cx(className) || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "166161216",
  dynamic: [theme.colors.white]
}, ["div.__jsx-style-dynamic-selector{display:inline-block;position:relative;width:100%;height:100%;border-radius:3px;background:".concat(theme.colors.white, ";box-shadow:0 0 1px 0 rgba(64,75,90,0.2), 0 2px 1px 0 rgba(64,75,90,0.28);}")]));

Card.defaultProps = {
  dataTest: 'dhis2-uicore-card'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [className]
 * @prop {Node} [children]
 * @prop {string} [dataTest]
 */

Card.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};

/**
 * @module
 * @param {CenteredContent.PropTypes} props
 * @returns {React.Component}
 * @example import { CenteredContent } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/component-widget-centeredcontent--default|Storybook}
 */

const CenteredContent = React.forwardRef(({
  className,
  dataTest,
  children,
  position
}, ref) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  ref: ref,
  className: "jsx-2320869747" + " " + (cx(className, position) || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2320869747"
}, ["div.jsx-2320869747{position:absolute;left:50%;}", "div.middle.jsx-2320869747{top:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);}", "div.top.jsx-2320869747{top:0;-webkit-transform:translate(-50%,0);-ms-transform:translate(-50%,0);transform:translate(-50%,0);}", "div.bottom.jsx-2320869747{bottom:0;-webkit-transform:translate(-50%,0);-ms-transform:translate(-50%,0);transform:translate(-50%,0);}"])));
CenteredContent.displayName = 'CenteredContent';
CenteredContent.defaultProps = {
  dataTest: 'dhis2-uicore-centeredcontent',
  position: 'middle'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [className]
 * @prop {Node} [children]
 * @prop {string} [dataTest=dhis2-uicore-centeredcontent]
 * @prop {string} [position=middle] One of `top`, `middle`, `bottom`
 */

CenteredContent.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  position: propTypes__default.oneOf(['top', 'middle', 'bottom'])
};

/**
 * @module
 *
 * @param {Checkbox.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Checkbox } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/checkbox.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/checkbox--default|Storybook}
 */

class Checkbox extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "ref", React.createRef());

    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(), e);
      }
    });

    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(), e);
      }
    });

    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(), e);
      }
    });
  }

  componentDidMount() {
    if (this.props.initialFocus) {
      this.ref.current.focus();
    }

    this.setIndeterminate(this.props.indeterminate);
  }

  componentDidUpdate(prevProps) {
    if (prevProps.indeterminate !== this.props.indeterminate) {
      this.setIndeterminate(this.props.indeterminate);
    }
  }

  setIndeterminate(indeterminate) {
    this.ref.current.indeterminate = indeterminate;
  }

  createHandlerPayload() {
    return {
      value: this.props.value,
      name: this.props.name,
      checked: !this.props.checked
    };
  }

  render() {
    const {
      checked = false,
      indeterminate = false,
      className,
      disabled,
      error,
      label,
      name,
      tabIndex,
      valid,
      value,
      warning,
      dense,
      dataTest
    } = this.props;
    const classes = cx({
      checked,
      indeterminate,
      disabled,
      valid,
      error,
      warning
    });
    return /*#__PURE__*/React__default.createElement("label", {
      "data-test": dataTest,
      className: _JSXStyle.dynamic([["1196148998", [theme.colors.grey900, theme.theme.disabled, theme.colors.blue600]]]) + " " + (cx(className, {
        disabled,
        dense
      }) || "")
    }, /*#__PURE__*/React__default.createElement("input", {
      type: "checkbox",
      ref: this.ref,
      name: name,
      value: value,
      checked: checked,
      disabled: disabled,
      tabIndex: tabIndex,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      className: _JSXStyle.dynamic([["1196148998", [theme.colors.grey900, theme.theme.disabled, theme.colors.blue600]]])
    }), /*#__PURE__*/React__default.createElement("div", {
      className: _JSXStyle.dynamic([["1196148998", [theme.colors.grey900, theme.theme.disabled, theme.colors.blue600]]]) + " " + (cx('icon', {
        dense
      }) || "")
    }, dense ? /*#__PURE__*/React__default.createElement(uiIcons.CheckboxDense, {
      className: classes
    }) : /*#__PURE__*/React__default.createElement(uiIcons.CheckboxRegular, {
      className: classes
    })), label, /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "1196148998",
      dynamic: [theme.colors.grey900, theme.theme.disabled, theme.colors.blue600]
    }, ["label.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;cursor:pointer;pointer-events:all;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:".concat(theme.colors.grey900, ";font-size:16px;line-height:20px;}"), "label.dense.__jsx-style-dynamic-selector{font-size:14px;line-height:16px;}", "label.disabled.__jsx-style-dynamic-selector{cursor:not-allowed;color:".concat(theme.theme.disabled, ";}"), "input.__jsx-style-dynamic-selector{opacity:0;pointer-events:none;position:absolute;}", ".icon.__jsx-style-dynamic-selector{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;margin-right:5px;border:2px solid transparent;padding:1px;border-radius:5px;}", "label.dense.__jsx-style-dynamic-selector .icon.__jsx-style-dynamic-selector{margin-right:3px;border-radius:4px;}", "input.__jsx-style-dynamic-selector:focus+.icon.__jsx-style-dynamic-selector{border-color:".concat(theme.colors.blue600, ";}")]));
  }

}

Checkbox.defaultProps = {
  dataTest: 'dhis2-uicore-checkbox'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} value
 * @prop {Node} [label]
 * @prop {function} [onChange] - called with the signature `object, event`
 * @prop {string} [name]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [checked]
 * @prop {boolean} [indeterminate]
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 *
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {string} [dataTest]
 */

const uniqueOnStatePropType = propTypes__default.mutuallyExclusive(['checked', 'indeterminate'], propTypes__default.bool);
Checkbox.propTypes = {
  checked: uniqueOnStatePropType,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  disabled: propTypes__default.bool,
  error: theme.sharedPropTypes.statusPropType,
  indeterminate: uniqueOnStatePropType,
  initialFocus: propTypes__default.bool,
  label: propTypes__default.node,
  name: propTypes__default.string,
  tabIndex: propTypes__default.string,
  valid: theme.sharedPropTypes.statusPropType,
  value: propTypes__default.string,
  warning: theme.sharedPropTypes.statusPropType,
  onBlur: propTypes__default.func,
  onChange: propTypes__default.func,
  onFocus: propTypes__default.func
};

const Content = ({
  children,
  overflow
}) => /*#__PURE__*/React__default.createElement("span", {
  className: _JSXStyle.dynamic([["765109298", [theme.spacers.dp12]]]) + " " + (cx({
    overflow
  }) || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "765109298",
  dynamic: [theme.spacers.dp12]
}, ["span.__jsx-style-dynamic-selector{margin:0 ".concat(theme.spacers.dp12, ";color:inherit;white-space:nowrap;}"), ".overflow.__jsx-style-dynamic-selector{max-width:150px;overflow:hidden;text-overflow:ellipsis;}"]));
Content.propTypes = {
  children: propTypes__default.oneOfType([propTypes__default.string, propTypes__default.number]),
  overflow: propTypes__default.bool
};

const Icon$1 = ({
  icon,
  dataTest
}) => {
  if (!icon) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("span", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["2159848327", [theme.spacers.dp4]]])
  }, icon, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2159848327",
    dynamic: [theme.spacers.dp4]
  }, ["span.__jsx-style-dynamic-selector{width:24px;height:24px;margin-left:".concat(theme.spacers.dp4, ";margin-right:-6px;border-radius:50%;overflow:hidden;}"), "span.__jsx-style-dynamic-selector>*{max-height:24px;max-width:24px;}"]));
};
Icon$1.propTypes = {
  dataTest: propTypes__default.string.isRequired,

  /** the slot for an icon is 24x24px, bigger elements will be clipped */
  icon: propTypes__default.element
};

const containerStyle = ["span.jsx-1924786287{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:20px;width:20px;margin-right:4px;border-radius:12px;margin-left:-8px;}", "span.jsx-1924786287:hover{background:".concat(theme.colors.grey400, ";}")];
containerStyle.__hash = "1924786287";
const removeIcon = {
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2658726446"
  }, ["svg.jsx-2658726446{fill:".concat(theme.colors.grey600, ";height:16px;width:16px;cursor:pointer;opacity:1;pointer-events:all;}")]),
  className: "jsx-2658726446"
};
const Remove = ({
  onRemove,
  dataTest
}) => {
  if (!onRemove) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("span", {
    onClick: e => {
      e.stopPropagation(); // stop onRemove from triggering onClick on container

      onRemove({}, e);
    },
    "data-test": dataTest,
    className: "jsx-".concat(containerStyle.__hash)
  }, /*#__PURE__*/React__default.createElement(uiIcons.CancelOutline, {
    className: removeIcon.className
  }), removeIcon.styles, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: containerStyle.__hash
  }, containerStyle));
};
Remove.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  onRemove: propTypes__default.func
};

/**
 * @module
 * @param {Chip.PropTypes} props
 * @returns {React.Component}
 * @example import { Chip } from @dhis2/ui-core
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/chip.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/chip--default|Storybook}
 */

const Chip = ({
  selected,
  dense,
  disabled,
  dragging,
  overflow,
  className,
  children,
  onRemove,
  onClick: _onClick,
  icon,
  dataTest
}) => /*#__PURE__*/React__default.createElement("span", {
  onClick: e => {
    if (!disabled && _onClick) {
      _onClick({}, e);
    }
  },
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["1003369876", [theme.spacers.dp4, theme.colors.grey200, theme.colors.grey900, theme.colors.grey300, theme.theme.secondary600, theme.colors.white]]]) + " " + (cx(className, {
    selected,
    dense,
    disabled,
    dragging
  }) || "")
}, /*#__PURE__*/React__default.createElement(Icon$1, {
  icon: icon,
  dataTest: "".concat(dataTest, "-icon")
}), /*#__PURE__*/React__default.createElement(Content, {
  overflow: overflow
}, children), /*#__PURE__*/React__default.createElement(Remove, {
  onRemove: onRemove,
  dataTest: "".concat(dataTest, "-remove")
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1003369876",
  dynamic: [theme.spacers.dp4, theme.colors.grey200, theme.colors.grey900, theme.colors.grey300, theme.theme.secondary600, theme.colors.white]
}, ["span.__jsx-style-dynamic-selector{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:32px;margin:".concat(theme.spacers.dp4, ";border-radius:16px;background-color:").concat(theme.colors.grey200, ";font-size:14px;line-height:16px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:").concat(theme.colors.grey900, ";}"), ".dense.__jsx-style-dynamic-selector{height:24px;font-size:13px;line-height:15px;}", "span.__jsx-style-dynamic-selector:hover{background-color:".concat(theme.colors.grey300, ";}"), ".selected.__jsx-style-dynamic-selector{background-color:".concat(theme.theme.secondary600, ";font-weight:500;}"), ".selected.__jsx-style-dynamic-selector:hover{background-color:#00695c;}", ".selected.__jsx-style-dynamic-selector,.selected.__jsx-style-dynamic-selector .icon.__jsx-style-dynamic-selector,.selected.__jsx-style-dynamic-selector .remove-icon.__jsx-style-dynamic-selector{color:".concat(theme.colors.white, ";}"), ".disabled.__jsx-style-dynamic-selector{cursor:not-allowed;opacity:0.3;}", ".disabled.__jsx-style-dynamic-selector .remove-icon.__jsx-style-dynamic-selector{pointer-events:none;}", ".dragging.__jsx-style-dynamic-selector{box-shadow:0 3px 1px -2px rgba(0,0,0,0.2), 0 2px 2px 0 rgba(0,0,0,0.14), 0 1px 5px 0 rgba(0,0,0,0.12);}"]));

Chip.defaultProps = {
  dataTest: 'dhis2-uicore-chip'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [children]
 * @prop {string} [className]
 * @prop {Element} [icon]
 * @prop {function} [onClick]
 * @prop {function} [onRemove]
 * @prop {boolean} [selected]
 * @prop {boolean} [dense]
 * @prop {boolean} [disabled]
 * @prop {boolean} [dragging]
 * @prop {boolean} [overflow]
 * @prop {string} [dataTest]
 */

Chip.propTypes = {
  children: propTypes__default.string,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  disabled: propTypes__default.bool,
  dragging: propTypes__default.bool,
  icon: propTypes__default.element,
  overflow: propTypes__default.bool,
  selected: propTypes__default.bool,
  onClick: propTypes__default.func,
  onRemove: propTypes__default.func
};

/**
 * @module
 * @param {CircularLoader.PropTypes} props
 * @returns {React.Component}
 * @example import { CircularLoader } from @dhis2/ui-core
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/loading.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/circularloader--default|Storybook}
 */

const CircularLoader = ({
  small,
  large,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  role: "progressbar",
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["439163782", [theme.spacers.dp16, theme.theme.primary600]]]) + " " + (cx(className, {
    small,
    large
  }) || "")
}, /*#__PURE__*/React__default.createElement("svg", {
  viewBox: "22 22 44 44",
  className: _JSXStyle.dynamic([["439163782", [theme.spacers.dp16, theme.theme.primary600]]])
}, /*#__PURE__*/React__default.createElement("circle", {
  cx: "44",
  cy: "44",
  r: "20.2",
  fill: "none",
  strokeWidth: "3.6",
  className: _JSXStyle.dynamic([["439163782", [theme.spacers.dp16, theme.theme.primary600]]]) + " " + "circle"
})), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "439163782",
  dynamic: [theme.spacers.dp16, theme.theme.primary600]
}, ["div.__jsx-style-dynamic-selector{display:inline-block;margin:".concat(theme.spacers.dp16, ";color:").concat(theme.theme.primary600, ";-webkit-animation:anim-rotate-__jsx-style-dynamic-selector 1.4s linear infinite;animation:anim-rotate-__jsx-style-dynamic-selector 1.4s linear infinite;width:50px;height:50px;}"), ".small.__jsx-style-dynamic-selector{width:24px;height:24px;}", ".large.__jsx-style-dynamic-selector{width:80px;height:80px;}", "svg.__jsx-style-dynamic-selector{max-height:100%;max-width:100%;}", ".circle.__jsx-style-dynamic-selector{stroke:currentColor;stroke-dasharray:80px,200px;stroke-dashoffset:0;-webkit-animation:anim-dash-__jsx-style-dynamic-selector 1.4s ease-in-out infinite;animation:anim-dash-__jsx-style-dynamic-selector 1.4s ease-in-out infinite;}", "@-webkit-keyframes anim-rotate-__jsx-style-dynamic-selector{100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}", "@keyframes anim-rotate-__jsx-style-dynamic-selector{100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}", "@-webkit-keyframes anim-dash-__jsx-style-dynamic-selector{0%{stroke-dasharray:1px,200px;stroke-dashoffset:0;}50%{stroke-dasharray:100px,200px;stroke-dashoffset:-15px;}100%{stroke-dasharray:100px,200px;stroke-dashoffset:-120px;}}", "@keyframes anim-dash-__jsx-style-dynamic-selector{0%{stroke-dasharray:1px,200px;stroke-dashoffset:0;}50%{stroke-dasharray:100px,200px;stroke-dashoffset:-15px;}100%{stroke-dasharray:100px,200px;stroke-dashoffset:-120px;}}"]));

CircularLoader.defaultProps = {
  dataTest: 'dhis2-uicore-circularloader'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [className]
 * @prop {boolean} [small] - `small` and `large` are mutually exclusive.
 * @prop {boolean} [large]
 * @prop {string} [dataTest]
 */

CircularLoader.propTypes = {
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  large: theme.sharedPropTypes.sizePropType,
  small: theme.sharedPropTypes.sizePropType
};

const createClickHandler = onClick => event => {
  // don't respond to clicks that originated in the children
  if (onClick && event.target === event.currentTarget) {
    onClick({}, event);
  }
};
/**
 * @module
 * @param {ComponentCover.PropTypes} props
 * @returns {React.Component}
 * @example import { ComponentCover } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/component-widget-componentcover--default|Storybook}
 */


const ComponentCover = ({
  children,
  className,
  dataTest,
  onClick,
  translucent
}) => /*#__PURE__*/React__default.createElement("div", {
  onClick: createClickHandler(onClick),
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["3798453419", [theme.layers.applicationTop]]]) + " " + (cx(className, {
    translucent
  }) || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3798453419",
  dynamic: [theme.layers.applicationTop]
}, ["div.__jsx-style-dynamic-selector{position:absolute;top:0;right:0;bottom:0;left:0;z-index:".concat(theme.layers.applicationTop, ";}"), "div.translucent.__jsx-style-dynamic-selector{background:rgba(33,43,54,0.4);}"]));

ComponentCover.defaultProps = {
  dataTest: 'dhis2-uicore-componentcover'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [className]
 * @prop {Node} [children]
 * @prop {string} [dataTest=dhis2-uicore-componentcover]
 * @prop {boolean} [translucent] - When true a semi-transparent background is added
 * @prop {function} [onClick]
 */

ComponentCover.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  translucent: propTypes__default.bool,
  onClick: propTypes__default.func
};

/**
 * @module
 * @param {Divider.PropTypes} props
 * @returns {React.Component}
 * @example import { Divider } from @dhis2/ui-core
 */

const Divider = ({
  className,
  dataTest,
  dense,
  margin
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["3889267139", [theme.colors.grey300]], ["3486645161", [dense ? "".concat(theme.spacers.dp4, " 0") : margin]]]) + " " + (className || "")
}, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3889267139",
  dynamic: [theme.colors.grey300]
}, ["div.__jsx-style-dynamic-selector{display:inline-block;width:100%;height:1px;background-color:".concat(theme.colors.grey300, ";}")]), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3486645161",
  dynamic: [dense ? "".concat(theme.spacers.dp4, " 0") : margin]
}, ["div.__jsx-style-dynamic-selector{margin:".concat(dense ? "".concat(theme.spacers.dp4, " 0") : margin, ";}")]));

Divider.defaultProps = {
  dataTest: 'dhis2-uicore-divider',
  margin: "".concat(theme.spacers.dp8, " 0")
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [className]
 * @prop {string} [dataTest]
 * @prop {bool} [dense]
 * @prop {string} [margin="${spacers.dp8} 0"] - DEPRECATED: A CSS shorthand declaration for margin. If margin and dense are used at the same time, dense has precedence.
 */

Divider.propTypes = {
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  margin: propTypes__default.string
};

const LayerContext = React.createContext({
  node: document.body,
  level: 0
});

const useLayerContext = () => React.useContext(LayerContext);

const createClickHandler$1 = onClick => event => {
  // don't respond to clicks that originated in the children
  if (onClick && event.target === event.currentTarget) {
    onClick({}, event);
  }
};
/**
 * @module
 * @param {Layer.PropTypes} props
 * @returns {React.Component}
 * @example import {     } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/component-widget-layer--default|Storybook}
 */


const Layer = ({
  children,
  className,
  dataTest,
  level,
  onClick,
  position,
  translucent
}) => {
  const parentLayer = useLayerContext();
  const [layerEl, setLayerEl] = React.useState(null);
  const nextLayer = {
    node: layerEl,
    level: Math.max(parentLayer.level, level)
  };
  const portalNode = level > parentLayer.level ? document.body : parentLayer.node;
  return reactDom.createPortal( /*#__PURE__*/React__default.createElement("div", {
    ref: setLayerEl,
    "data-test": dataTest,
    onClick: createClickHandler$1(onClick),
    className: "jsx-2944291715 " + _JSXStyle.dynamic([["2635812695", [level]]]) + " " + (cx('layer', className, position, "level-".concat(level), {
      translucent
    }) || "")
  }, layerEl && /*#__PURE__*/React__default.createElement(LayerContext.Provider, {
    value: nextLayer
  }, children), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2635812695",
    dynamic: [level]
  }, ["div.__jsx-style-dynamic-selector{z-index:".concat(level, ";}")]), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2944291715"
  }, ["div.jsx-2944291715{top:0;left:0;min-height:100vh;min-width:100vw;}", "div.fixed.jsx-2944291715{position:fixed;height:100vh;width:100vw;}", "div.absolute.jsx-2944291715{position:absolute;height:100%;width:100%;}", "div.translucent.jsx-2944291715{background-color:rgba(33,43,54,0.4);}"])), portalNode);
};

Layer.defaultProps = {
  position: 'fixed',
  dataTest: 'dhis2-uicore-layer',
  level: theme.layers.applicationTop
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [className]
 * @prop {Node} [children]
 * @prop {string} [dataTest=dhis2-uicore-layer]
 * @prop {number} [level=layers.applicationTop]
 * @prop {boolean} [translucent] - When true a semi-transparent background is added
 * @prop {function} [onClick]
 */

Layer.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  level: propTypes__default.number,
  position: propTypes__default.oneOf(['absolute', 'fixed']),
  translucent: propTypes__default.bool,
  onClick: propTypes__default.func
};

const attachResizeObservers = ({
  state: {
    elements
  },
  options,
  instance: {
    update
  }
}) => {
  const observers = Object.keys(options).reduce((acc, elementKey) => {
    if (options[elementKey]) {
      const observer = new ResizeObserver(update);
      observer.observe(elements[elementKey]);
      acc.push(observer);
    }

    return acc;
  }, []);
  return () => {
    observers.forEach(observer => {
      observer.disconnect();
    });
  };
};

const getBaseModifiers = ({
  observePopperResize,
  observeReferenceResize
}) => [{
  name: 'preventOverflow',
  options: {
    altAxis: true,
    rootBoundary: 'document',
    boundary: document.body
  }
}, {
  name: 'flip',
  options: {
    rootBoundary: 'document',
    boundary: document.body
  }
}, {
  name: 'resizeObserver',
  enabled: true,
  phase: 'write',
  fn: () => {},
  effect: attachResizeObservers,
  options: {
    popper: observePopperResize,
    reference: observeReferenceResize
  }
}];
const deduplicateModifiers = (modifiers, resizeObservers) => {
  // Deduplicate modifiers from props and baseModifiers,
  // when duplicates are encountered (by name), use the
  // modifier from props so each Popper can be fully custom
  return getBaseModifiers(resizeObservers).filter(({
    name
  }) => !modifiers.some(m => m.name === name)).concat(modifiers);
};

const getReferenceElement = reference => {
  // Elements or virtualElements
  if (reference instanceof Element || reference && 'getBoundingClientRect' in reference) {
    return reference;
  } // react refs


  if (reference && 'current' in reference) {
    return reference.current;
  }

  return null;
};

/**
 * @module
 * @param {Popper.PropTypes} props
 * @returns {React.Component}
 * @description A React wrapper around popper.js.
 *
 * @example import { Popper } from '@dhis2/ui-core'
 *
 * @see Live demo: {@link /demo/?path=/story/components-core-popper--top|Storybook}
 * @see Popper js: {@link https://popper.js.org/docs/v2/|Documentation}
 */

const Popper = ({
  children,
  className,
  dataTest,
  modifiers,
  observePopperResize,
  observeReferenceResize,
  onFirstUpdate,
  placement,
  reference,
  strategy
}) => {
  const referenceElement = getReferenceElement(reference);
  const [popperElement, setPopperElement] = React.useState(null);
  const deduplicatedModifiers = React.useMemo(() => deduplicateModifiers(modifiers, {
    observePopperResize,
    observeReferenceResize
  }), [modifiers, observePopperResize, observeReferenceResize]);
  const {
    styles,
    attributes
  } = reactPopper.usePopper(referenceElement, popperElement, {
    strategy,
    onFirstUpdate,
    placement,
    modifiers: deduplicatedModifiers
  });
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: className,
    "data-test": dataTest,
    ref: setPopperElement,
    style: styles.popper
  }, attributes.popper), children);
};

Popper.defaultProps = {
  dataTest: 'dhis2-uicore-popper',
  modifiers: [],
  placement: 'auto'
};
/**
 * @typedef Modifier
 * @type {Object}
 * @property {string} name
 * @property {Object} options
 */

/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {Node} children
 * @prop {React.Ref|Element|VirtualElement} reference A React ref, DOM node, or {@link https://popper.js.org/docs/v2/virtual-elements/|popper.js virtual element} for the Popper to position itself against.
 * @prop {string} [className]
 * @prop {string} [dataTest=dhis2-uicore-popper]
 * @prop {Array.<Modifier>} [modifiers=[]] A property of the `createPopper` options, {@link https://popper.js.org/docs/v2/constructors/|see constructor section of popper.js docs}
 * @prop {Boolean} observePopperResize Makes the popper update position when the popper content changes size
 * @prop {Boolean} observeReferenceResize Makes the popper update position when the reference element changes size
 * @prop {('absolute'|'fixed')} [strategy=absolute] A property of the `createPopper` options, {@link https://popper.js.org/docs/v2/constructors/|see constructor section of popper.js docs}
 * @prop {Function} [onFirstUpdate] A property of the `createPopper` options, {@link https://popper.js.org/docs/v2/constructors/|see constructor section of popper.js docs}
 * @prop {('auto'|'auto-start'|'auto-end'|'top'|'top-start'|'top-end'|'bottom'|'bottom-start'|'bottom-end'|'right'|'right-start'|'right-end'|'left'|'left-start'|'left-end')} [placement=top] A property of the `createPopper` options, {@link https://popper.js.org/docs/v2/constructors/|see constructor section of popper.js docs}
 */
// Prop names follow the names here: https://popper.js.org/docs/v2/constructors/

Popper.propTypes = {
  children: propTypes__default.node.isRequired,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  modifiers: propTypes__default.arrayOf(propTypes__default.shape({
    name: propTypes__default.string,
    options: propTypes__default.object
  })),
  observePopperResize: propTypes__default.bool,
  observeReferenceResize: propTypes__default.bool,
  placement: theme.sharedPropTypes.popperPlacementPropType,
  reference: theme.sharedPropTypes.popperReferencePropType,
  strategy: propTypes__default.oneOf(['absolute', 'fixed']),
  // defaults to 'absolute'
  onFirstUpdate: propTypes__default.func
};

const arrow = {
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "736002830"
  }, [".jsx-736002830{margin-left:".concat(theme.spacers.dp12, ";}")]),
  className: "jsx-736002830"
};
/**
 * @module
 * @param {DropdownButton.PropTypes} props
 * @returns {React.Component}
 * @example import { DropdownButton } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/dropdownbutton-basic--default|Storybook}
 */

class DropdownButton extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      open: false
    });

    _defineProperty(this, "anchorRef", React__default.createRef());

    _defineProperty(this, "onToggle", ({
      name,
      value
    }, event) => {
      this.setState({
        open: !this.state.open
      }, () => {
        if (this.props.onClick) {
          this.props.onClick({
            name,
            value,
            open: this.state.open
          }, event);
        }
      });
    });
  }

  render() {
    const {
      open
    } = this.state;
    const {
      component,
      children,
      className,
      destructive,
      disabled,
      icon,
      large,
      primary,
      secondary,
      small,
      name,
      value,
      tabIndex,
      type,
      initialFocus,
      dataTest
    } = this.props;
    const ArrowIconComponent = open ? uiIcons.ArrowUp : uiIcons.ArrowDown;
    return /*#__PURE__*/React__default.createElement("div", {
      ref: this.anchorRef,
      "data-test": dataTest,
      className: "jsx-3163060161"
    }, /*#__PURE__*/React__default.createElement(Button, {
      className: className,
      destructive: destructive,
      disabled: disabled,
      icon: icon,
      large: large,
      primary: primary,
      secondary: secondary,
      small: small,
      onClick: this.onToggle,
      name: name,
      value: value,
      tabIndex: tabIndex,
      type: type,
      initialFocus: initialFocus
    }, children, /*#__PURE__*/React__default.createElement(ArrowIconComponent, {
      className: "jsx-3163060161" + " " + (arrow.className )
    })), open && /*#__PURE__*/React__default.createElement(Layer, {
      onClick: this.onToggle,
      transparent: true
    }, /*#__PURE__*/React__default.createElement(Popper, {
      dataTest: "".concat(dataTest, "-popper"),
      placement: "bottom-end",
      reference: this.anchorRef
    }, component)), arrow.styles, /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "3163060161"
    }, ["div.jsx-3163060161{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;position:relative;color:inherit;white-space:nowrap;}"]));
  }

}

DropdownButton.defaultProps = {
  dataTest: 'dhis2-uicore-dropdownbutton'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Element} [component]
 *
 * @prop {Node} [children] The children to render in the button
 * @prop {function} [onClick] The click handler
 *
 * @prop {string} [className]
 * @prop {string} [name]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 * @prop {boolean} [small] - `small` and `large` are mutually exclusive
 * @prop {boolean} [large]
 * @prop {string} [type] Type of button: `submit`, `reset`, or
 * `button`
 *
 * @prop {boolean } [primary] - `primary`, `secondary`, and
 * `destructive` are mutually exclusive boolean props
 * @prop {boolean } [secondary]
 * @prop {boolean } [destructive]
 *
 * @prop {boolean} [disabled] Disable the button
 * @prop {Element} [icon]
 *
 * @prop {boolean} [initialFocus] Grants the button the initial focus
 * @prop {string} [dataTest]
 */

DropdownButton.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  component: propTypes__default.element,
  dataTest: propTypes__default.string,
  destructive: theme.sharedPropTypes.buttonVariantPropType,
  disabled: propTypes__default.bool,
  icon: propTypes__default.element,
  initialFocus: propTypes__default.bool,
  large: theme.sharedPropTypes.sizePropType,
  name: propTypes__default.string,
  primary: theme.sharedPropTypes.buttonVariantPropType,
  secondary: theme.sharedPropTypes.buttonVariantPropType,
  small: theme.sharedPropTypes.sizePropType,
  tabIndex: propTypes__default.string,
  type: propTypes__default.oneOf(['submit', 'reset', 'button']),
  value: propTypes__default.string,
  onClick: propTypes__default.func
};

const Required = ({
  dataTest
}) => /*#__PURE__*/React__default.createElement("span", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["149033372", [theme.spacers.dp4]]])
}, "*", /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "149033372",
  dynamic: [theme.spacers.dp4]
}, ["span.__jsx-style-dynamic-selector{padding-left:".concat(theme.spacers.dp4, ";}")]));
Required.propTypes = {
  dataTest: propTypes__default.string.isRequired
};

const styles = ["label.jsx-2718078600{display:block;box-sizing:border-box;font-size:14px;line-height:24px;padding:0;}", ".disabled.jsx-2718078600{cursor:not-allowed;}"];
styles.__hash = "2718078600";

const constructClassName = ({
  disabled,
  className
}) => cx(className, {
  disabled: disabled
});
/**
 * @module
 * @param {Label.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Label } from '@dhis2/ui-core'
 */


const Label = ({
  htmlFor,
  children,
  required,
  disabled,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("label", {
  htmlFor: htmlFor,
  "data-test": dataTest,
  className: "jsx-".concat(styles.__hash) + " " + (constructClassName({
    className,
    disabled
  }) || "")
}, /*#__PURE__*/React__default.createElement("span", {
  className: "jsx-".concat(styles.__hash)
}, children), required && /*#__PURE__*/React__default.createElement(Required, {
  dataTest: "".concat(dataTest, "-required")
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: styles.__hash
}, styles));
Label.defaultProps = {
  dataTest: 'dhis2-uicore-label'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [htmlFor]
 * @prop {string} [children]
 * @prop {string} [className]
 * @prop {boolean} [required]
 * @prop {boolean} [disabled]
 * @prop {string} [dataTest]
 */

Label.propTypes = {
  children: propTypes__default.string,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  disabled: propTypes__default.bool,
  htmlFor: propTypes__default.string,
  required: propTypes__default.bool
};

/**
 * @module
 * @param {Help.PropTypes} props
 * @returns {React.Component}
 * @example import { Help } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/help--default|Storybook}
 */

const Help = ({
  children,
  valid,
  error,
  warning,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("p", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["1324375661", [theme.spacers.dp4, theme.theme.default, theme.theme.valid, theme.theme.error, theme.theme.warning]]]) + " " + (cx(className, {
    valid,
    error,
    warning
  }) || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1324375661",
  dynamic: [theme.spacers.dp4, theme.theme.default, theme.theme.valid, theme.theme.error, theme.theme.warning]
}, ["p.__jsx-style-dynamic-selector{margin-top:".concat(theme.spacers.dp4, ";margin-right:0;margin-bottom:0;margin-left:0;font-size:12px;line-height:14px;color:").concat(theme.theme.default, ";cursor:help;}"), ".valid.__jsx-style-dynamic-selector{color:".concat(theme.theme.valid, ";}"), ".error.__jsx-style-dynamic-selector{color:".concat(theme.theme.error, ";}"), ".warning.__jsx-style-dynamic-selector{color:".concat(theme.theme.warning, ";}")]));

Help.defaultProps = {
  dataTest: 'dhis2-uicore-help'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [children]
 * @prop {string} [className]
 * @prop {boolean} [valid] - `valid`, `warning`, and `error`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {string} [dataTest]
 */

Help.propTypes = {
  children: propTypes__default.string,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  error: theme.sharedPropTypes.statusPropType,
  valid: theme.sharedPropTypes.statusPropType,
  warning: theme.sharedPropTypes.statusPropType
};

/**
 * @module
 * @param {Field.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Field } from '@dhis2/ui'
 *
 * @example import { Field } from '@dhis2/ui-core'
 */

const Field = ({
  children,
  disabled,
  className,
  helpText,
  label,
  name,
  validationText,
  required,
  dataTest,
  valid,
  error,
  warning
}) => /*#__PURE__*/React__default.createElement(Box, {
  className: className,
  dataTest: dataTest
}, label && /*#__PURE__*/React__default.createElement(Label, {
  dataTest: "".concat(dataTest, "-label"),
  required: required,
  disabled: disabled,
  htmlFor: name
}, label), /*#__PURE__*/React__default.createElement(Box, {
  dataTest: "".concat(dataTest, "-content"),
  marginTop: label ? theme.spacers.dp4 : '0'
}, children), helpText && /*#__PURE__*/React__default.createElement(Help, {
  dataTest: "".concat(dataTest, "-help")
}, helpText), validationText && /*#__PURE__*/React__default.createElement(Help, {
  error: error,
  warning: warning,
  valid: valid,
  dataTest: "".concat(dataTest, "-validation")
}, validationText));

Field.defaultProps = {
  dataTest: 'dhis2-uicore-field'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @private
 *
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {boolean} [disabled]
 * @prop {string} [helpText]
 * @prop {string} [label]
 * @prop {string} [name]
 * @prop {string} [validationText]
 * @prop {boolean} [required]
 * @prop {string} [dataTest]
 * @prop {boolean} [valid] - `valid`, `warning`, and `error`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 */

Field.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  disabled: propTypes__default.bool,
  error: theme.sharedPropTypes.statusPropType,
  helpText: propTypes__default.string,
  label: propTypes__default.string,
  name: propTypes__default.string,
  required: propTypes__default.bool,
  valid: propTypes__default.bool,
  validationText: propTypes__default.string,
  warning: theme.sharedPropTypes.statusPropType
};

/**
 * @module
 * @param {FieldSet.PropTypes} props
 * @returns {React.Component}
 * @example import { FieldSet } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/fieldset--default}
 */

const FieldSet = ({
  className,
  children,
  dataTest
}) => /*#__PURE__*/React__default.createElement("fieldset", {
  "data-test": dataTest,
  className: "jsx-3541500486" + " " + (className || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3541500486"
}, ["fieldset.jsx-3541500486{border:none;margin:0;padding:0;}"]));

FieldSet.defaultProps = {
  dataTest: 'dhis2-uicore-fieldset'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

FieldSet.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};

/**
 * @module
 * @param {FileInput.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { FileInput } from '@dhis2/ui-core'
 */

class FileInput extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "ref", React.createRef());

    _defineProperty(this, "handleClick", () => {
      this.ref.current.click();
    });

    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(), e);
      } // reset the file input so it won't prevent on-change
      // if the same file was added in a second attempt


      this.ref.current.value = '';
    });

    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(), e);
      }
    });

    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(), e);
      }
    });
  }

  createHandlerPayload() {
    return {
      files: this.ref.current.files,
      name: this.props.name
    };
  }

  render() {
    const {
      accept,
      buttonLabel,
      className,
      dataTest,
      disabled,
      error,
      initialFocus,
      large,
      multiple,
      name,
      small,
      tabIndex,
      valid,
      warning
    } = this.props;
    return /*#__PURE__*/React__default.createElement("div", {
      "data-test": dataTest,
      className: _JSXStyle.dynamic([["2067253638", [theme.spacers.dp4, theme.spacers.dp8]]]) + " " + (cx('file-input', className) || "")
    }, /*#__PURE__*/React__default.createElement("input", {
      id: name,
      name: name,
      type: "file",
      ref: this.ref,
      onChange: this.handleChange,
      accept: accept,
      multiple: multiple,
      disabled: disabled,
      className: _JSXStyle.dynamic([["2067253638", [theme.spacers.dp4, theme.spacers.dp8]]])
    }), /*#__PURE__*/React__default.createElement(Button, {
      disabled: disabled,
      icon: /*#__PURE__*/React__default.createElement(uiIcons.Upload, null),
      initialFocus: initialFocus,
      large: large,
      onBlur: this.handleBlur,
      onClick: this.handleClick,
      onFocus: this.handleFocus,
      small: small,
      tabIndex: tabIndex,
      type: "button"
    }, buttonLabel), /*#__PURE__*/React__default.createElement(uiIcons.StatusIcon, {
      error: error,
      valid: valid,
      warning: warning
    }), /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "2067253638",
      dynamic: [theme.spacers.dp4, theme.spacers.dp8]
    }, ["input.__jsx-style-dynamic-selector{display:none;}", ".file-input.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-bottom:".concat(theme.spacers.dp4, ";}"), ".file-input.__jsx-style-dynamic-selector>svg{width:18px;height:18px;margin-left:".concat(theme.spacers.dp8, ";}")]));
  }

}

FileInput.defaultProps = {
  accept: '*',
  dataTest: 'dhis2-uicore-fileinput'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [name]
 * @prop {function} [onChange] - called with the signature `object, event`
 * @prop {function} [onFocus] - called with the signature `object, event`
 * @prop {function} [onBlur] - called with the signature `object, event`
 * @prop {string} [buttonLabel]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning` and `error` are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [small] - `small` and `large` are mutually exclusive
 * @prop {boolean} [large]
 *
 * @prop {string} [accept=*] - the `accept` attribute of the [native file input]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept}
 * @prop {boolean} [multiple] - the `multiple` attribute of the [native file input]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#multiple}
 * @prop {string} [dataTest]
 */

FileInput.propTypes = {
  accept: propTypes__default.string,
  buttonLabel: propTypes__default.string,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  disabled: propTypes__default.bool,
  error: theme.sharedPropTypes.statusPropType,
  initialFocus: propTypes__default.bool,
  large: theme.sharedPropTypes.sizePropType,
  multiple: propTypes__default.bool,
  name: propTypes__default.string,
  small: theme.sharedPropTypes.sizePropType,
  tabIndex: propTypes__default.string,
  valid: theme.sharedPropTypes.statusPropType,
  warning: theme.sharedPropTypes.statusPropType,
  onBlur: propTypes__default.func,
  onChange: propTypes__default.func,
  onFocus: propTypes__default.func
};

/**
 * @module
 * @param {FileList.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { FileList } from '@dhis2/ui-core'
 */

const FileList = ({
  children,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: "jsx-2770071620" + " " + (className || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2770071620"
}, ["div.jsx-2770071620{padding-top:4px;}", ".file-input+div.jsx-2770071620{padding-top:0;}"]));

FileList.defaultProps = {
  dataTest: 'dhis2-uicore-filelist'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [className]
 * @prop {FileListPlaceholder|FileListItem|Array.<FileListItem>} [children]
 * @prop {string} [dataTest]
 */

FileList.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};

/**
 * @module
 * @param {FileListItem.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { FileListItem } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/fileinput.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/fileinputfield--file-list|Storybook}
 */

const FileListItem = ({
  className,
  label,
  onRemove,
  removeText,
  loading,
  onCancel,
  cancelText,
  dataTest
}) => /*#__PURE__*/React__default.createElement("p", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["2923643952", [theme.spacers.dp4, theme.colors.grey900, theme.colors.grey700]]]) + " " + (cx('selected-file', className) || "")
}, /*#__PURE__*/React__default.createElement("span", {
  className: _JSXStyle.dynamic([["2923643952", [theme.spacers.dp4, theme.colors.grey900, theme.colors.grey700]]]) + " " + "icon"
}, loading ? /*#__PURE__*/React__default.createElement(uiIcons.Loading, null) : /*#__PURE__*/React__default.createElement(uiIcons.AttachFile, null)), /*#__PURE__*/React__default.createElement("span", {
  className: _JSXStyle.dynamic([["2923643952", [theme.spacers.dp4, theme.colors.grey900, theme.colors.grey700]]]) + " " + "text"
}, /*#__PURE__*/React__default.createElement("span", {
  className: _JSXStyle.dynamic([["2923643952", [theme.spacers.dp4, theme.colors.grey900, theme.colors.grey700]]]) + " " + "label"
}, label), loading && onCancel && cancelText && /*#__PURE__*/React__default.createElement("span", {
  onClick: event => onCancel({}, event),
  "data-test": "".concat(dataTest, "-cancel"),
  className: _JSXStyle.dynamic([["2923643952", [theme.spacers.dp4, theme.colors.grey900, theme.colors.grey700]]]) + " " + "action"
}, cancelText), !loading && /*#__PURE__*/React__default.createElement("span", {
  onClick: event => onRemove({}, event),
  "data-test": "".concat(dataTest, "-remove"),
  className: _JSXStyle.dynamic([["2923643952", [theme.spacers.dp4, theme.colors.grey900, theme.colors.grey700]]]) + " " + "action"
}, removeText)), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2923643952",
  dynamic: [theme.spacers.dp4, theme.colors.grey900, theme.colors.grey700]
}, ["p.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin:0;padding-top:".concat(theme.spacers.dp4, ";line-height:18px;}"), ".icon.__jsx-style-dynamic-selector>svg{width:12px;height:12px;line-height:12px;margin-right:4px;-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}", ".text.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-flex-shrink:1;-ms-flex-negative:1;flex-shrink:1;}", ".label.__jsx-style-dynamic-selector{font-size:14px;color:".concat(theme.colors.grey900, ";word-break:break-all;}"), ".label.__jsx-style-dynamic-selector::after{content:' ';display:inline-block;width:12px;}", ".action.__jsx-style-dynamic-selector{font-size:12px;line-height:12px;margin-top:0;-webkit-text-decoration:underline;text-decoration:underline;cursor:pointer;color:".concat(theme.colors.grey700, ";}")]));

FileListItem.defaultProps = {
  dataTest: 'dhis2-uicore-filelistitem'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [label]
 * @prop {function} onRemove
 * @prop {string} [removeText]
 * @prop {string} [className]
 * @prop {boolean} [loading]
 * @prop {function} [onCancel]
 * @prop {string} [cancelText]
 * @prop {string} [dataTest]
 */

FileListItem.propTypes = {
  onRemove: propTypes__default.func.isRequired,
  cancelText: propTypes__default.string,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  label: propTypes__default.string,
  loading: propTypes__default.bool,
  removeText: propTypes__default.string,
  onCancel: propTypes__default.func
};

/**
 * @module
 * @param {FileListPlaceholder.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { FileListPlaceholder } from '@dhis2/ui-core'
 */

const FileListPlaceholder = ({
  children,
  dataTest
}) => /*#__PURE__*/React__default.createElement("p", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["1287857385", [theme.spacers.dp4, theme.colors.grey700]]])
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1287857385",
  dynamic: [theme.spacers.dp4, theme.colors.grey700]
}, ["p.__jsx-style-dynamic-selector{margin:0;padding-top:".concat(theme.spacers.dp4, ";font-size:14px;color:").concat(theme.colors.grey700, ";}")]));

FileListPlaceholder.defaultProps = {
  dataTest: 'dhis2-uicore-filelistplaceholder'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [children]
 * @prop {string} [dataTest]
 */

FileListPlaceholder.propTypes = {
  children: propTypes__default.string,
  dataTest: propTypes__default.string
};

/**
 * @module
 * @param {Menu.PropTypes}
 * @returns {React.Component}
 *
 * @example import { Menu } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/menu.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/components-core-menulist--default|Storybook}
 */

const Menu = ({
  children,
  className,
  dataTest,
  dense
}) => /*#__PURE__*/React__default.createElement("ul", {
  "data-test": dataTest,
  className: "jsx-3549878755" + " " + (className || "")
}, React.Children.map(children, (child, index) => React.isValidElement(child) ? React.cloneElement(child, {
  dense: typeof child.props.dense === 'boolean' ? child.props.dense : dense,
  hideDivider: typeof child.props.hideDivider !== 'boolean' && index === 0 ? true : child.props.dense
}) : child), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3549878755"
}, ["ul.jsx-3549878755{display:block;position:relative;width:100%;margin:0;padding:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}"]));

Menu.defaultProps = {
  dataTest: 'dhis2-uicore-menulist'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest='dhis2-uicore-menulist']
 * @prop {boolean} [dense]
 */

Menu.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool
};

/**
 * @module
 * @param {FlyoutMenu.PropTypes}
 * @returns {React.Component}
 *
 * @example import { FlyoutMenu } from '@dhis2/ui'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/menu.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/components-core-menu--default|Storybook}
 */

const FlyoutMenu = ({
  children,
  className,
  dataTest,
  dense,
  maxHeight,
  maxWidth
}) => {
  const [openedSubMenu, setOpenedSubMenu] = React.useState(null);

  const toggleSubMenu = index => {
    const toggleValue = index === openedSubMenu ? null : index;
    setOpenedSubMenu(toggleValue);
  };

  const cardCSS = {
    styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "1140426988",
      dynamic: [theme.spacers.dp4, maxHeight]
    }, [".__jsx-style-dynamic-selector{padding:".concat(theme.spacers.dp4, " 0;max-height:").concat(maxHeight, ";overflow-y:auto;}")]),
    className: _JSXStyle.dynamic([["1140426988", [theme.spacers.dp4, maxHeight]]])
  };
  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["2253458022", [dense ? '128' : '180', maxWidth, maxHeight]]]) + " " + (className || "")
  }, /*#__PURE__*/React__default.createElement(Card, {
    className: cardCSS.className
  }, /*#__PURE__*/React__default.createElement(Menu, {
    dense: dense
  }, React.Children.map(children, (child, index) => React.isValidElement(child) ? React.cloneElement(child, {
    showSubMenu: openedSubMenu === index,
    toggleSubMenu: toggleSubMenu.bind(undefined, index)
  }) : child))), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2253458022",
    dynamic: [dense ? '128' : '180', maxWidth, maxHeight]
  }, ["div.__jsx-style-dynamic-selector{display:inline-block;min-width:".concat(dense ? '128' : '180', "px;max-width:").concat(maxWidth, ";max-height:").concat(maxHeight, ";}")]), cardCSS.styles);
};

FlyoutMenu.defaultProps = {
  dataTest: 'dhis2-uicore-menu',
  maxWidth: '380px',
  maxHeight: 'auto'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {Element} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest='dhis2-uicore-menu']
 * @prop {boolean} [dense]
 * @prop {string} [maxWidth='380px']
 * @prop {string} [maxHeight='auto']
 */

FlyoutMenu.propTypes = {
  children: Menu.propTypes.children,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  maxHeight: propTypes__default.string,
  maxWidth: propTypes__default.string
};

const styles$1 = [".input.jsx-1090541828{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}", "input.jsx-1090541828{box-sizing:border-box;font-size:14px;line-height:16px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;color:".concat(theme.colors.grey900, ";background-color:white;padding:12px 11px 10px;outline:0;border:1px solid ").concat(theme.colors.grey500, ";border-radius:3px;box-shadow:inset 0 1px 2px 0 rgba(48,54,60,0.1);text-overflow:ellipsis;}"), "input.dense.jsx-1090541828{padding:8px 11px 6px;}", "input.jsx-1090541828:focus{border-color:".concat(theme.colors.teal400, ";}"), "input.valid.jsx-1090541828{border-color:".concat(theme.theme.valid, ";}"), "input.warning.jsx-1090541828{border-color:".concat(theme.theme.warning, ";}"), "input.error.jsx-1090541828{border-color:".concat(theme.theme.error, ";}"), "input.read-only.jsx-1090541828{background-color:".concat(theme.colors.grey100, ";border-color:").concat(theme.colors.grey500, ";cursor:text;}"), "input.disabled.jsx-1090541828{background-color:".concat(theme.colors.grey100, ";border-color:").concat(theme.colors.grey500, ";color:").concat(theme.theme.disabled, ";cursor:not-allowed;}"), ".status-icon.jsx-1090541828{-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;margin-left:".concat(theme.spacers.dp4, ";}")];
/**
 * @module
 * @param {Input.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Input } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/inputfield.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/inputfield--default|Storybook}
 */

styles$1.__hash = "1090541828";
class Input extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "inputRef", React__default.createRef());

    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(e), e);
      }
    });

    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(e), e);
      }
    });

    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(e), e);
      }
    });
  }

  componentDidMount() {
    if (this.props.initialFocus) {
      this.inputRef.current.focus();
    }
  }

  createHandlerPayload(e) {
    return {
      value: e.target.value,
      name: this.props.name
    };
  }

  render() {
    const {
      className,
      type,
      dense,
      disabled,
      readOnly,
      placeholder,
      name,
      valid,
      error,
      warning,
      loading,
      value,
      tabIndex,
      dataTest
    } = this.props;
    return /*#__PURE__*/React__default.createElement("div", {
      "data-test": dataTest,
      className: "jsx-3353877153 " + "jsx-".concat(styles$1.__hash) + " " + (cx('input', className) || "")
    }, /*#__PURE__*/React__default.createElement("input", {
      id: name,
      name: name,
      placeholder: placeholder,
      ref: this.inputRef,
      type: type,
      value: value,
      disabled: disabled,
      readOnly: readOnly,
      tabIndex: tabIndex,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onChange: this.handleChange,
      className: "jsx-3353877153 " + "jsx-".concat(styles$1.__hash) + " " + (cx({
        dense,
        disabled,
        error,
        valid,
        warning,
        'read-only': readOnly
      }) || "")
    }), /*#__PURE__*/React__default.createElement("div", {
      className: "jsx-3353877153 " + "jsx-".concat(styles$1.__hash) + " " + "status-icon"
    }, /*#__PURE__*/React__default.createElement(uiIcons.StatusIcon, {
      error: error,
      valid: valid,
      loading: loading,
      warning: warning
    })), /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: styles$1.__hash
    }, styles$1), /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "3353877153"
    }, ["input.jsx-3353877153{width:100%;}"]));
  }

}
Input.defaultProps = {
  type: 'text',
  dataTest: 'dhis2-uicore-input'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} name
 * @prop {string} [type=text]
 * @prop {function} [onChange] - called with the signature `object, event`
 * @prop {function} [onBlur]
 * @prop {function} [onFocus]
 * @prop {string} [className]
 * @prop {string} [placeholder]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [readOnly]
 * @prop {boolean} [dense] - Compact mode
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, and `loading`
 * are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 * @prop {string} [dataTest]
 */

Input.propTypes = {
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  disabled: propTypes__default.bool,
  error: theme.sharedPropTypes.statusPropType,
  initialFocus: propTypes__default.bool,
  loading: propTypes__default.bool,
  name: propTypes__default.string,
  placeholder: propTypes__default.string,
  readOnly: propTypes__default.bool,
  tabIndex: propTypes__default.string,
  type: propTypes__default.oneOf(['text', 'number', 'password', 'email', 'url', 'tel', 'date', 'datetime', 'datetime-local', 'month', 'week', 'time', 'search']),
  valid: theme.sharedPropTypes.statusPropType,
  value: propTypes__default.string,
  warning: theme.sharedPropTypes.statusPropType,
  onBlur: propTypes__default.func,
  onChange: propTypes__default.func,
  onFocus: propTypes__default.func
};

/**
 * @module
 *
 * @param {IntersectionDetector.PropTypes} props
 * @returns {React.Component}
 */

const IntersectionDetector = ({
  threshold,
  onChange,
  children,
  className,
  rootRef
}) => {
  // Use useRef instead of useState to prevent unnecessary re-render:
  //   The state changes won't be reflected in what this component renders,
  //   so there's no need for re-rendering the (potentially computational
  //   heavy) children.  Also: If the parent re-renders (e. g. due to a state
  //   change), then this component will re-render as well.
  // @var {Object}
  // @prop {IntersectionObserver} current
  const observer = React.useRef(); // @var {Object}
  // @prop {bool} current

  const isIntersecting = React.useRef(); // @var {Object}
  // @prop {HTMLElement} current

  const intersectionRef = React.useRef();
  React.useEffect(() => {
    const rootEl = rootRef.current;
    const intersectionEl = intersectionRef.current;

    if (rootEl && intersectionEl && !observer.current) {
      const onIntersection = entries => {
        // Currently there's no way to supply multiple thresholds,
        // so a single entry can be assumed safely
        const [entry] = entries; // Make sure the callback is not called multiple times
        // if there is no change

        const intersectionChange = entry.isIntersecting !== isIntersecting.current;

        if (intersectionChange) {
          isIntersecting.current = entry.isIntersecting;
          onChange({
            isIntersecting: entry.isIntersecting
          });
        }
      };

      const observerOptions = {
        root: rootEl,
        threshold
      };
      const intersectionObserver = new IntersectionObserver(onIntersection, observerOptions);
      intersectionObserver.observe(intersectionEl);
      observer.current = intersectionObserver; // Make sure to clean up everything when un-mounting.
      // Using an arrow function instead of just returning
      // the disconnect function for better readability.

      return () => intersectionObserver.disconnect();
    }
  }, [rootRef.current, intersectionRef.current]);
  return /*#__PURE__*/React__default.createElement("div", {
    ref: intersectionRef,
    className: "jsx-2829611397" + " " + (className || "")
  }, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2829611397"
  }, ["div.jsx-2829611397{height:100%;}"]));
};
IntersectionDetector.defaultProps = {
  threshold: 0
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {Object} rootRef
 * @prop {HTMLElement} [rootRef.current]
 * @prop {Function} onChange
 * @prop {any} [children]
 * @prop {string} [className]
 * @prop {number} [threshold]
 */

IntersectionDetector.propTypes = {
  rootRef: propTypes.PropTypes.shape({
    // not required so `current` can be `null`
    current: propTypes.PropTypes.instanceOf(HTMLElement)
  }).isRequired,
  onChange: propTypes.PropTypes.func.isRequired,
  children: propTypes.PropTypes.any,
  className: propTypes.PropTypes.string,
  threshold: propTypes.PropTypes.number
};

/**
 * @module
 * @param {Legend.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Legend } from '@dhis2/ui-core'
 *
 * @see Live demo: {@link /demo/?path=/story/legend--default|Storybook}
 */

const Legend = ({
  className,
  children,
  required,
  dataTest
}) => /*#__PURE__*/React__default.createElement("legend", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["945530629", [theme.colors.grey900]]]) + " " + (className || "")
}, children, required && /*#__PURE__*/React__default.createElement(Required, {
  dataTest: "".concat(dataTest, "-required")
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "945530629",
  dynamic: [theme.colors.grey900]
}, ["legend.__jsx-style-dynamic-selector{font-size:14px;line-height:16px;color:".concat(theme.colors.grey900, ";}")]));

Legend.defaultProps = {
  dataTest: 'dhis2-uicore-legend'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {boolean} [required]
 * @prop {string} [dataTest]
 */

Legend.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  required: propTypes__default.bool
};

const Progress = ({
  amount
}) => {
  return /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["686723300", [amount]], ["3243380718", [theme.theme.primary600]]])
  }, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "686723300",
    dynamic: [amount]
  }, ["div.__jsx-style-dynamic-selector{width:".concat(amount, "%;}")]), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "3243380718",
    dynamic: [theme.theme.primary600]
  }, ["div.__jsx-style-dynamic-selector{background-color:".concat(theme.theme.primary600, ";-webkit-transition:width 0.3s linear;transition:width 0.3s linear;height:4px;}")]));
};

Progress.propTypes = {
  amount: propTypes__default.number.isRequired
};
/**
 * @module
 * @param {LinearLoader.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { LinearLoader } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/loading.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/linearloader--determinate|Storybook}
 */

const LinearLoader = ({
  amount,
  width,
  margin,
  className,
  dataTest
}) => {
  return /*#__PURE__*/React__default.createElement("div", {
    role: "progressbar",
    "data-test": dataTest,
    className: "jsx-1195089001 " + _JSXStyle.dynamic([["2979463364", [width, margin]]]) + " " + (className || "")
  }, /*#__PURE__*/React__default.createElement(Progress, {
    amount: amount
  }), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "1195089001"
  }, ["div.jsx-1195089001{display:block;overflow:hidden;overflow-x:hidden;overflow-y:hidden;background-color:rgba(110,122,138,0.2);}"]), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2979463364",
    dynamic: [width, margin]
  }, ["div.__jsx-style-dynamic-selector{width:".concat(width, ";margin:").concat(margin, ";}")]));
};

LinearLoader.defaultProps = {
  margin: theme.spacers.dp12,
  width: '300px',
  dataTest: 'dhis2-uicore-linearloader'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [className]
 * @prop {number} [amount] - The progression in percent without the '%' sign
 * @prop {string} [margin=spacers.dp12] - The margin around the loader, can be a full shorthand
 * @prop {string} [width=300px] - The width of the entire indicator, e.g. '100%' or '300px'
 * @prop {string} [dataTest]
 */

LinearLoader.propTypes = {
  amount: propTypes__default.number.isRequired,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  margin: propTypes__default.string,
  width: propTypes__default.string
};

function LogoSvg({
  iconColor,
  textColor,
  className,
  dataTest
}) {
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 600 182",
    className: className,
    "data-test": dataTest
  }, /*#__PURE__*/React__default.createElement("path", {
    fill: iconColor,
    d: "M191.91,60,109.17,6.34a19.75,19.75,0,0,0-20.33,0L8.49,58.43a12,12,0,0,0-.25,20.63L88.78,134a19.39,19.39,0,0,0,20.38.25l82.75-53.65a11.87,11.87,0,0,0,0-20.59Zm-91,61.45a4.29,4.29,0,0,1-3.49-.05l-77-52.49L97.13,19.13a4.76,4.76,0,0,1,3.74,0l78.91,51.15Z"
  }), /*#__PURE__*/React__default.createElement("path", {
    fill: iconColor,
    d: "M88.84,47.82,45.28,76.06,58.9,85.39,97.13,60.61a4.76,4.76,0,0,1,3.74,0l39.37,25.52,14-9.06L109.17,47.82A19.78,19.78,0,0,0,88.84,47.82Z"
  }), /*#__PURE__*/React__default.createElement("path", {
    fill: iconColor,
    d: "M191.91,101.46l-8.62-5.59-14,9.06,10.52,6.83-78.91,51.15a4.37,4.37,0,0,1-3.49,0l-77-52.5,10-6.47L16.74,94.57,8.49,99.91a12,12,0,0,0-.25,20.63l80.54,54.92a19.36,19.36,0,0,0,20.38.24l82.74-53.65a11.87,11.87,0,0,0,0-20.59Z"
  }), /*#__PURE__*/React__default.createElement("path", {
    fill: textColor,
    d: "M293.59,70.72q-6.91-11-20.62-11a29.31,29.31,0,0,0-22.88,10.39Q240.76,80.82,240.76,98t9.78,28.3A30.15,30.15,0,0,0,274,137q14,0,20.78-13.39l2.1,11.29h14.6V31.59H293.59Zm0,31.76a18,18,0,0,1-5.27,13.25,16.12,16.12,0,0,1-24.53-1.13q-5.12-6.24-5.12-16.48t5-16.33a15.65,15.65,0,0,1,12.57-6.1q7.53,0,12,4.51A18.36,18.36,0,0,1,293.59,93Z"
  }), /*#__PURE__*/React__default.createElement("path", {
    fill: textColor,
    d: "M368.85,59.73q-14.44,0-22,13.85v-42H329.12V134.85h17.76V101q.3-12.65,5.34-19t12.12-6.32q7.07,0,11,4.14t3.91,12.27v42.75H397V92.1q0-14.61-6.85-23.49T368.85,59.73Z"
  }), /*#__PURE__*/React__default.createElement("rect", {
    fill: textColor,
    x: "414.01",
    y: "61.54",
    width: "17.76",
    height: "73.31"
  }), /*#__PURE__*/React__default.createElement("path", {
    fill: textColor,
    d: "M422.89,27.67q-5.26,0-8.13,2.79a10.15,10.15,0,0,0-2.86,7.6,10.13,10.13,0,0,0,2.86,7.6c1.91,1.86,4.62,2.78,8.13,2.78s6.1-.92,8.05-2.78a10,10,0,0,0,2.94-7.6,10,10,0,0,0-2.94-7.6C429,28.6,426.3,27.67,422.89,27.67Z"
  }), /*#__PURE__*/React__default.createElement("path", {
    fill: textColor,
    d: "M494.39,95.56l-17.31-6.47q-8.88-2.57-8.88-7.83,0-3,3.24-5.35c2.15-1.55,5.19-2.33,9.1-2.33s6.93.71,9,2.11A7.38,7.38,0,0,1,493,81.41h16.71a20.11,20.11,0,0,0-7.91-15.51q-7.6-6.17-21.67-6.17t-22.43,5.65q-8.36,5.64-8.36,15,0,14,17.76,20.17l16,5.71a22.53,22.53,0,0,1,7.08,3.32,6.18,6.18,0,0,1,2.25,5.12c0,2.2-1.23,4.14-3.68,5.79a16.49,16.49,0,0,1-9.41,2.48q-14.89,0-15.21-10.38H447.58q.15,11.6,9,18T480.09,137q14.6,0,23.48-6.92,8.58-6.63,8.58-15.65a15.31,15.31,0,0,0-4.59-11.52Q503,98.42,494.39,95.56Z"
  }), /*#__PURE__*/React__default.createElement("path", {
    fill: textColor,
    d: "M544.06,118.59V115a8.65,8.65,0,0,1,2.79-6.55c1.85-1.75,4.89-3.19,9.11-4.29l15.8-3.92Q585,96.92,591,90.82t5.95-17.24q0-11.13-9.18-18.66-9.5-7.83-24.24-7.83-15.79,0-25.29,6.77Q528.26,61.09,528,74.64h19.72q1.5-12,16.71-12,6.92,0,10.83,3.31a10.42,10.42,0,0,1,3.92,8.29,11.34,11.34,0,0,1-3.39,8.35q-3.39,3.39-11.67,5.49L549.79,91.5q-12.21,3-17.77,9.33-5.71,6.77-5.72,19.26v14.76h71.2V118.59Z"
  }));
}
LogoSvg.propTypes = {
  iconColor: propTypes__default.string.isRequired,
  textColor: propTypes__default.string.isRequired,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};

function LogoIconSvg({
  iconColor,
  className,
  dataTest
}) {
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 200 182",
    className: className,
    "data-test": dataTest
  }, /*#__PURE__*/React__default.createElement("defs", null), /*#__PURE__*/React__default.createElement("path", {
    fill: iconColor,
    d: "M191.73,60,109,6.34a19.73,19.73,0,0,0-20.32,0L8.31,58.43a12,12,0,0,0-.25,20.63L88.6,134a19.37,19.37,0,0,0,20.37.25l82.76-53.65a11.88,11.88,0,0,0,0-20.59Zm-91,61.45a4.29,4.29,0,0,1-3.49-.05l-77-52.49L97,19.13a4.76,4.76,0,0,1,3.74,0L179.6,70.28Z"
  }), /*#__PURE__*/React__default.createElement("path", {
    fill: iconColor,
    d: "M88.66,47.82,45.1,76.06l13.61,9.33L97,60.61a4.76,4.76,0,0,1,3.74,0l39.37,25.52,14-9.06L109,47.82A19.76,19.76,0,0,0,88.66,47.82Z"
  }), /*#__PURE__*/React__default.createElement("path", {
    fill: iconColor,
    d: "M191.73,101.46l-8.62-5.59-14.05,9.06,10.53,6.83-78.91,51.15a4.37,4.37,0,0,1-3.49,0l-77-52.5,10-6.47L16.55,94.57,8.31,99.91a12,12,0,0,0-.25,20.63L88.6,175.46a19.34,19.34,0,0,0,20.37.24l82.75-53.65a11.88,11.88,0,0,0,0-20.59Z"
  }));
}
LogoIconSvg.propTypes = {
  iconColor: propTypes__default.string.isRequired,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};

/*
 * This should likely not live in ui-core, but in ui-widgets
 */

/**
 * @module
 * @param {Logo.PropTypes} props
 * @returns {React.Component}
 */

/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

/*
 * These are official colors for dhis2 logos.
 *
 * They are isolated here and not in @dhis2/ui-constants as they should not be
 * shared with any other components.
 *
 * https://github.com/dhis2/dhis2-identity
 *
 */

const blue = '#0080d4';
const white = '#ffffff';
const dark = '#212225';
const LogoIcon = ({
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement(LogoIconSvg, {
  iconColor: blue,
  className: className,
  dataTest: dataTest
});
LogoIcon.defaultProps = {
  dataTest: 'dhis2-uicore-logoicon'
};
LogoIcon.propTypes = {
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};
const LogoIconWhite = ({
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement(LogoIconSvg, {
  iconColor: white,
  className: className,
  dataTest: dataTest
});
LogoIconWhite.defaultProps = {
  dataTest: 'dhis2-uicore-logoiconwhite'
};
LogoIconWhite.propTypes = {
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};
const Logo = ({
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement(LogoSvg, {
  iconColor: blue,
  textColor: dark,
  className: className,
  dataTest: dataTest
});
Logo.defaultProps = {
  dataTest: 'dhis2-uicore-logo'
};
Logo.propTypes = {
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};
const LogoWhite = ({
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement(LogoSvg, {
  iconColor: white,
  textColor: white,
  className: className,
  dataTest: dataTest
});
LogoWhite.defaultProps = {
  dataTest: 'dhis2-uicore-logowhite'
};
LogoWhite.propTypes = {
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};

/**
 * @module
 * @param {MenuDivider.PropTypes}
 * @returns {React.Component}
 *
 * @example import { MenuDivider } from '@dhis2/ui
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/menu.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/components-core-menudivider--default|Storybook}
 */

const MenuDivider = ({
  className,
  dataTest,
  dense
}) => /*#__PURE__*/React__default.createElement("li", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["591815244", [theme.colors.white]]]) + " " + (className || "")
}, /*#__PURE__*/React__default.createElement(Divider, {
  dense: dense
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "591815244",
  dynamic: [theme.colors.white]
}, ["li.__jsx-style-dynamic-selector{list-style:none;background-color:".concat(theme.colors.white, ";-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;padding:0;line-height:0;}")]));

MenuDivider.defaultProps = {
  dataTest: 'dhis2-uicore-menudivider'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [className]
 * @prop {string} [dataTest='dhis2-uicore-menudivider']
 * @prop {boolean} [dense]
 */

MenuDivider.propTypes = {
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool
};

const _defaultExport$2 = ["li.jsx-665727467{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:stretch;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;padding:0;cursor:pointer;list-style:none;-webkit-transition:background-color 150ms ease-in-out;transition:background-color 150ms ease-in-out;background-color:".concat(theme.colors.white, ";color:").concat(theme.colors.grey900, ";fill:").concat(theme.colors.grey900, ";font-size:15px;line-height:18px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}"), "li.dense.jsx-665727467{font-size:14px;line-height:16px;}", "li.jsx-665727467:hover{background-color:".concat(theme.colors.grey200, ";}"), "li.jsx-665727467:active,li.active.jsx-665727467{background-color:".concat(theme.colors.grey400, ";}"), "li.destructive.jsx-665727467{color:".concat(theme.colors.red700, ";fill:").concat(theme.colors.red600, ";}"), "li.destructive.jsx-665727467:hover{background-color:".concat(theme.colors.red050, ";}"), "li.destructive.jsx-665727467:active,li.destructive.active.jsx-665727467{background-color:".concat(theme.colors.red100, ";}"), "li.disabled.jsx-665727467{cursor:not-allowed;color:".concat(theme.colors.grey500, ";fill:").concat(theme.colors.grey500, ";}"), "li.disabled.jsx-665727467:hover{background-color:".concat(theme.colors.white, ";}"), "a.jsx-665727467{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 ".concat(theme.spacers.dp24, ";min-height:48px;-webkit-text-decoration:none;text-decoration:none;color:inherit;}"), "li.with-chevron.jsx-665727467 a.jsx-665727467{padding-right:".concat(theme.spacers.dp8, ";}"), "li.dense.jsx-665727467 a.jsx-665727467{padding:0 ".concat(theme.spacers.dp12, ";min-height:32px;}"), "li.with-chevron.dense.jsx-665727467 a.jsx-665727467{padding-right:".concat(theme.spacers.dp4, ";}"), ".label.jsx-665727467{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;padding:15px 0;}", "li.dense.jsx-665727467 .label.jsx-665727467{padding:8px 0;}", ".icon.jsx-665727467{-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;margin-right:".concat(theme.spacers.dp16, ";width:24px;height:24px;}"), ".chevron.jsx-665727467{-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;margin-left:".concat(theme.spacers.dp48, ";}"), "li.dense.jsx-665727467 .icon.jsx-665727467{margin-right:".concat(theme.spacers.dp8, ";width:16px;height:16px;}"), "li.jsx-665727467 .icon.jsx-665727467>svg{width:24px;height:24px;}", "li.dense.jsx-665727467 .icon.jsx-665727467>svg,li.jsx-665727467 .chevron.jsx-665727467>svg{width:16px;height:16px;}"];
_defaultExport$2.__hash = "665727467";

const createOnClickHandler = (onClick, toggleSubMenu, value) => evt => {
  if (onClick || toggleSubMenu) {
    evt.preventDefault();
    evt.stopPropagation();
    onClick && onClick({
      value
    }, evt);
    toggleSubMenu && toggleSubMenu();
  }
};
/**
 * @module
 * @param {MenuItem.PropTypes}
 * @returns {React.Component}
 *
 * @example import { MenuItem } from '@dhis2/ui
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/menu.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/components-core-menulist--default|Storybook}
 */


const MenuItem = ({
  href,
  onClick,
  children,
  target,
  icon,
  className,
  destructive,
  disabled,
  dense,
  active,
  dataTest,
  chevron,
  value,
  label,
  showSubMenu,
  toggleSubMenu
}) => {
  const menuItemRef = React.useRef();
  const {
    node
  } = useLayerContext();
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("li", {
    ref: menuItemRef,
    "data-test": dataTest,
    className: "jsx-".concat(_defaultExport$2.__hash) + " " + (cx(className, {
      destructive,
      disabled,
      dense,
      active: active || showSubMenu,
      'with-chevron': chevron
    }) || "")
  }, /*#__PURE__*/React__default.createElement("a", {
    target: target,
    href: !disabled && href ? href : undefined,
    onClick: !disabled && createOnClickHandler(onClick, toggleSubMenu, value),
    className: "jsx-".concat(_defaultExport$2.__hash)
  }, icon && /*#__PURE__*/React__default.createElement("span", {
    className: "jsx-".concat(_defaultExport$2.__hash) + " " + "icon"
  }, icon), /*#__PURE__*/React__default.createElement("span", {
    className: "jsx-".concat(_defaultExport$2.__hash) + " " + "label"
  }, label), (chevron || children) && /*#__PURE__*/React__default.createElement("span", {
    className: "jsx-".concat(_defaultExport$2.__hash) + " " + "chevron"
  }, /*#__PURE__*/React__default.createElement(uiIcons.ChevronRight, null))), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: _defaultExport$2.__hash
  }, _defaultExport$2)), children && showSubMenu && reactDom.createPortal( /*#__PURE__*/React__default.createElement(Popper, {
    placement: "right-start",
    reference: menuItemRef
  }, /*#__PURE__*/React__default.createElement(FlyoutMenu, {
    dense: dense
  }, children)), node));
};

MenuItem.defaultProps = {
  dataTest: 'dhis2-uicore-menuitem'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {boolean} [active]
 * @prop {boolean} [chevron]
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest='dhis2-uicore-menuitem']
 * @prop {boolean} [dense]
 * @prop {boolean} [destructive]
 * @prop {boolean} [disabled]
 * @prop {string} [href]
 * @prop {Node} [icon]
 * @prop {Node} [label]
 * @prop {boolean} [showSubMenu]
 * @prop {string} [target]
 * @prop {function} [toggleSubMenu]
 * @prop {string} [value]
 * @prop {function} [onClick] - Click handler called with `value` in the payload
 */

MenuItem.propTypes = {
  active: propTypes__default.bool,
  chevron: propTypes__default.bool,
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  destructive: propTypes__default.bool,
  disabled: propTypes__default.bool,
  href: propTypes__default.string,
  icon: propTypes__default.node,
  label: propTypes__default.node,
  showSubMenu: propTypes__default.bool,
  target: propTypes__default.string,
  toggleSubMenu: propTypes__default.func,
  value: propTypes__default.string,
  onClick: propTypes__default.func
};

/**
 * @module
 * @param {MenuSectionHeader.PropTypes}
 * @returns {React.Component}
 *
 * @example import { MenuSectionHeader } from '@dhis2/ui
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/menu.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/components-core-menusectionheader--default|Storybook}
 */

const MenuSectionHeader = ({
  className,
  dataTest,
  dense,
  hideDivider,
  label
}) => /*#__PURE__*/React__default.createElement("li", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["954853487", [theme.colors.white, theme.spacers.dp8, theme.spacers.dp24, theme.spacers.dp12, theme.spacers.dp24, theme.colors.grey600, theme.spacers.dp8, theme.spacers.dp12, theme.spacers.dp12]]]) + " " + (cx(className, {
    dense
  }) || "")
}, !hideDivider && /*#__PURE__*/React__default.createElement(Divider, {
  dense: dense
}), /*#__PURE__*/React__default.createElement("h6", {
  className: _JSXStyle.dynamic([["954853487", [theme.colors.white, theme.spacers.dp8, theme.spacers.dp24, theme.spacers.dp12, theme.spacers.dp24, theme.colors.grey600, theme.spacers.dp8, theme.spacers.dp12, theme.spacers.dp12]]])
}, label), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "954853487",
  dynamic: [theme.colors.white, theme.spacers.dp8, theme.spacers.dp24, theme.spacers.dp12, theme.spacers.dp24, theme.colors.grey600, theme.spacers.dp8, theme.spacers.dp12, theme.spacers.dp12]
}, ["li.__jsx-style-dynamic-selector{list-style:none;background-color:".concat(theme.colors.white, ";-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;padding:0;line-height:0;}"), "h6.__jsx-style-dynamic-selector{margin:0;padding:".concat(theme.spacers.dp8, " ").concat(theme.spacers.dp24, " ").concat(theme.spacers.dp12, " ").concat(theme.spacers.dp24, ";font-size:15px;line-height:16px;font-weight:500;color:").concat(theme.colors.grey600, ";}"), "li.dense.__jsx-style-dynamic-selector h6.__jsx-style-dynamic-selector{font-size:14px;line-height:16px;padding:".concat(theme.spacers.dp8, " ").concat(theme.spacers.dp12, " 6px ").concat(theme.spacers.dp12, ";}")]));

MenuSectionHeader.defaultProps = {
  dataTest: 'dhis2-uicore-menusectionheader'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [className]
 * @prop {string} [dataTest='dhis2-uicore-menusectionheader']
 * @prop {boolean} [dense]
 * @prop {boolean} [hideDivider]
 * @prop {Node} [label]
 */

MenuSectionHeader.propTypes = {
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  hideDivider: propTypes__default.bool,
  label: propTypes__default.node
};

const scrollBoxCard = {
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2814715826"
  }, ["div.jsx-2814715826{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;max-height:calc(100vh - ".concat(2 * theme.spacersNum.dp64, "px);max-width:calc(100vw - ").concat(2 * theme.spacersNum.dp64, "px);}")]),
  className: "jsx-2814715826"
};
/**
 * @module
 * @param {Modal.PropTypes} props
 * @returns {React.Component}
 *
 * @desc Modal provides a UI to prompt the user to respond to a question
 * or a note to the user.
 *
 * Use Model with the following Components:
 * ModelTitle (optional)
 * ModelContent (required)
 * ModelActions (optional)
 * @module
 * @param {Modal.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Modal } from @dhis2/ui-core
 * @example
 *  <Modal>
 *      <ModalTitle>Hello</ModalTitle>
 *      <ModalContent>Some content here</ModalContent>
 *      <ModalActions>
 *          <Button primary>My action</Button>
 *      </ModalActions>
 *  </Modal>
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/modal.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/modal--small-title-content-action|Storybook}
 */

const Modal = ({
  children,
  onClose,
  small,
  large,
  className,
  position,
  dataTest
}) => /*#__PURE__*/React__default.createElement(Layer, {
  onClick: onClose,
  level: theme.layers.blocking,
  translucent: true
}, /*#__PURE__*/React__default.createElement(CenteredContent, {
  position: position
}, /*#__PURE__*/React__default.createElement("aside", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["3759547178", [2 * theme.spacersNum.dp64, 2 * theme.spacersNum.dp64, theme.spacers.dp64, theme.spacers.dp64]]]) + " " + (cx(className, position, {
    small,
    large
  }) || "")
}, /*#__PURE__*/React__default.createElement(Card, {
  className: scrollBoxCard.className
}, children)), scrollBoxCard.styles, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3759547178",
  dynamic: [2 * theme.spacersNum.dp64, 2 * theme.spacersNum.dp64, theme.spacers.dp64, theme.spacers.dp64]
}, ["aside.__jsx-style-dynamic-selector{overflow-y:hidden;height:auto;max-height:calc(100vh - ".concat(2 * theme.spacersNum.dp64, "px);max-width:calc(100vw - ").concat(2 * theme.spacersNum.dp64, "px);width:600px;}"), "aside.top.__jsx-style-dynamic-selector{-webkit-transform:translateY(".concat(theme.spacers.dp64, ");-ms-transform:translateY(").concat(theme.spacers.dp64, ");transform:translateY(").concat(theme.spacers.dp64, ");}"), "aside.bottom.__jsx-style-dynamic-selector{-webkit-transform:translateY(-".concat(theme.spacers.dp64, ");-ms-transform:translateY(-").concat(theme.spacers.dp64, ");transform:translateY(-").concat(theme.spacers.dp64, ");}"), "aside.small.__jsx-style-dynamic-selector{width:400px;}", "aside.large.__jsx-style-dynamic-selector{width:800px;}"])));
Modal.defaultProps = {
  dataTest: 'dhis2-uicore-modal',
  position: 'top'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {Node} [children]
 * @prop {string} className
 * @prop {Function} onClose
 * @prop {bool} small
 * @prop {bool} large
 * @prop {string} [dataTest]
 */

Modal.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  large: theme.sharedPropTypes.sizePropType,
  position: theme.sharedPropTypes.insideAlignmentPropType,
  small: theme.sharedPropTypes.sizePropType,
  // Callback used when clicking on the screen cover
  onClose: propTypes__default.func
};

/**
 * @module
 *
 * @param {ModalActions.PropTypes} props
 * @returns {React.Component}
 */

const ModalActions = ({
  children,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["1459377348", [theme.spacers.dp24, theme.spacers.dp24, theme.spacers.dp24]]])
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1459377348",
  dynamic: [theme.spacers.dp24, theme.spacers.dp24, theme.spacers.dp24]
}, ["div.__jsx-style-dynamic-selector{padding:0 ".concat(theme.spacers.dp24, " ").concat(theme.spacers.dp24, " ").concat(theme.spacers.dp24, ";display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}")]));
ModalActions.defaultProps = {
  dataTest: 'dhis2-uicore-modalactions'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Object} [children] - Accepts one or more `Element`s
 * @prop {string} [dataTest]
 */

ModalActions.propTypes = {
  children: propTypes__default.node,
  dataTest: propTypes__default.string
};

/**
 * @module
 *
 * @param {ModalContent.PropTypes} props
 * @returns {React.Component}
 */

const ModalContent = ({
  children,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["936713121", [theme.spacers.dp24, theme.spacers.dp24]]]) + " " + (className || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "936713121",
  dynamic: [theme.spacers.dp24, theme.spacers.dp24]
}, ["div.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;margin:".concat(theme.spacers.dp24, " 0;padding:0 ").concat(theme.spacers.dp24, ";overflow-y:auto;}")]));
ModalContent.defaultProps = {
  dataTest: 'dhis2-uicore-modalcontent'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

ModalContent.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};

/**
 * @module
 * @param {ModalTitle.PropTypes} props
 * @returns {React.Component}
 */

const ModalTitle = ({
  children,
  dataTest
}) => /*#__PURE__*/React__default.createElement("h1", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["1525509444", [theme.spacers.dp24, theme.spacers.dp24, theme.spacers.dp24]]]) + " " + (cx('title') || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1525509444",
  dynamic: [theme.spacers.dp24, theme.spacers.dp24, theme.spacers.dp24]
}, ["h1.__jsx-style-dynamic-selector{font-size:20px;font-weight:500;line-height:24px;margin:0;padding:".concat(theme.spacers.dp24, " ").concat(theme.spacers.dp24, " 0 ").concat(theme.spacers.dp24, ";}")]));
ModalTitle.defaultProps = {
  dataTest: 'dhis2-uicore-modaltitle'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [children]
 * @prop {string} [dataTest]
 */

ModalTitle.propTypes = {
  children: propTypes__default.string,
  dataTest: propTypes__default.string
};

const ArrowDown = ({
  className
}) => /*#__PURE__*/React__default.createElement("svg", {
  viewBox: "0 0 16 16",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  className: "jsx-595155045" + " " + (className || "")
}, /*#__PURE__*/React__default.createElement("g", {
  id: "icon/16/arrow-down",
  stroke: "none",
  strokeWidth: "1",
  fill: "none",
  fillRule: "evenodd",
  className: "jsx-595155045"
}, /*#__PURE__*/React__default.createElement("path", {
  d: "M7.29289,11.7071 C7.68342,12.0976 8.31658,12.0976 8.70711,11.7071 L13.7071,6.70711 C14.0976,6.31658 14.0976,5.68342 13.7071,5.29289 C13.3166,4.90237 12.6834,4.90237 12.2929,5.29289 L8,9.58579 L3.70711,5.29289 C3.31658,4.90237 2.68342,4.90237 2.29289,5.29289 C1.90237,5.68342 1.90237,6.31658 2.29289,6.70711 L7.29289,11.7071 Z",
  id: "arrow-down",
  fill: "#4A5768",
  className: "jsx-595155045"
})), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "595155045"
}, ["svg.jsx-595155045{fill:inherit;height:16px;width:16px;vertical-align:middle;}"]));
ArrowDown.propTypes = {
  className: propTypes__default.string
};

const InputWrapper = ({
  dataTest,
  onToggle,
  children,
  tabIndex,
  error,
  warning,
  valid,
  disabled,
  dense,
  className,
  inputRef
}) => {
  const classNames = cx(className, 'root', {
    error,
    warning,
    valid,
    disabled,
    dense
  });
  return /*#__PURE__*/React__default.createElement("div", {
    onClick: onToggle,
    tabIndex: tabIndex,
    ref: inputRef,
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["1450512774", [theme.colors.grey500, theme.colors.teal400, theme.theme.valid, theme.theme.warning, theme.theme.error, theme.colors.grey100, theme.colors.grey500, theme.theme.disabled]]]) + " " + (classNames || "")
  }, /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1450512774", [theme.colors.grey500, theme.colors.teal400, theme.theme.valid, theme.theme.warning, theme.theme.error, theme.colors.grey100, theme.colors.grey500, theme.theme.disabled]]]) + " " + "root-children"
  }, children), /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1450512774", [theme.colors.grey500, theme.colors.teal400, theme.theme.valid, theme.theme.warning, theme.theme.error, theme.colors.grey100, theme.colors.grey500, theme.theme.disabled]]]) + " " + "root-right"
  }, /*#__PURE__*/React__default.createElement(ArrowDown, null)), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "1450512774",
    dynamic: [theme.colors.grey500, theme.colors.teal400, theme.theme.valid, theme.theme.warning, theme.theme.error, theme.colors.grey100, theme.colors.grey500, theme.theme.disabled]
  }, [".root.__jsx-style-dynamic-selector{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:white;border-radius:3px;border:1px solid ".concat(theme.colors.grey500, ";box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:40px;padding:6px 12px;box-shadow:inset 0 1px 2px 0 rgba(48,54,60,0.1);}"), ".root.__jsx-style-dynamic-selector:focus,.root.__jsx-style-dynamic-selector:active{border-color:".concat(theme.colors.teal400, ";outline:0;}"), ".root.valid.__jsx-style-dynamic-selector{border-color:".concat(theme.theme.valid, ";}"), ".root.warning.__jsx-style-dynamic-selector{border-color:".concat(theme.theme.warning, ";}"), ".root.error.__jsx-style-dynamic-selector{border-color:".concat(theme.theme.error, ";}"), ".root.disabled.__jsx-style-dynamic-selector{background-color:".concat(theme.colors.grey100, ";border-color:").concat(theme.colors.grey500, ";color:").concat(theme.theme.disabled, ";cursor:not-allowed;}"), ".root.dense.__jsx-style-dynamic-selector{padding:4px 8px;min-height:32px;}", ".root-children.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".root-right.__jsx-style-dynamic-selector{margin-left:auto;}"]));
};

InputWrapper.defaultProps = {
  tabIndex: '0'
};
InputWrapper.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  inputRef: propTypes__default.object.isRequired,
  tabIndex: propTypes__default.string.isRequired,
  onToggle: propTypes__default.func.isRequired,
  children: propTypes__default.element,
  className: propTypes__default.string,
  dense: propTypes__default.bool,
  disabled: propTypes__default.bool,
  error: theme.sharedPropTypes.statusPropType,
  valid: theme.sharedPropTypes.statusPropType,
  warning: theme.sharedPropTypes.statusPropType
};

const MenuWrapper = ({
  children,
  dataTest,
  maxHeight,
  menuWidth,
  onClick,
  selectRef
}) => {
  const {
    styles,
    className: cardClassName
  } = {
    styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "81273804",
      dynamic: [maxHeight]
    }, [".__jsx-style-dynamic-selector{height:auto;max-height:".concat(maxHeight, ";overflow:auto;}")]),
    className: _JSXStyle.dynamic([["81273804", [maxHeight]]])
  };
  return /*#__PURE__*/React__default.createElement(Layer, {
    onClick: onClick,
    transparent: true
  }, /*#__PURE__*/React__default.createElement(Popper, {
    reference: selectRef,
    placement: "bottom-start",
    observeReferenceResize: true
  }, /*#__PURE__*/React__default.createElement("div", {
    "data-test": "".concat(dataTest, "-menuwrapper"),
    className: _JSXStyle.dynamic([["3936600096", [menuWidth]]])
  }, /*#__PURE__*/React__default.createElement(Card, {
    className: cardClassName
  }, children), styles, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "3936600096",
    dynamic: [menuWidth]
  }, ["div.__jsx-style-dynamic-selector{width:".concat(menuWidth, ";}")]))));
};

MenuWrapper.defaultProps = {
  maxHeight: '280px'
};
MenuWrapper.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  menuWidth: propTypes__default.string.isRequired,
  selectRef: propTypes__default.object.isRequired,
  children: propTypes__default.node,
  maxHeight: propTypes__default.string,
  onClick: propTypes__default.func
};

/**
 * Returns a function, that, as long as it continues to be invoked, will not be triggered. The
 * function will be called after it stops being called for N milliseconds. If `immediate` is
 * passed, trigger the function on the leading edge, instead of the trailing.
 */
const debounce = (func, wait, immediate) => {
  let timeout;
  return (...args) => {
    const context = undefined;

    const later = () => {
      timeout = null;

      if (!immediate) {
        func.apply(context, args);
      }
    };

    const callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);

    if (callNow) {
      func.apply(context, args);
    }
  };
};

const ESCAPE_KEY = 27;
const SPACE_KEY = 32;
const UP_KEY = 38;
const DOWN_KEY = 40;
class Select extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      open: false,
      menuWidth: 'auto'
    });

    _defineProperty(this, "selectRef", React__default.createRef());

    _defineProperty(this, "inputRef", React__default.createRef());

    _defineProperty(this, "setMenuWidth", debounce(() => {
      const hasOffsetWidth = this.inputRef.current && this.inputRef.current.offsetWidth;

      if (hasOffsetWidth) {
        const inputWidth = "".concat(this.inputRef.current.offsetWidth, "px");

        if (this.state.menuWidth !== inputWidth) {
          this.setState({
            menuWidth: inputWidth
          });
        }
      }
    }, 50));

    _defineProperty(this, "handleFocusInput", () => {
      this.inputRef.current.focus();
    });

    _defineProperty(this, "onFocus", e => {
      const {
        onFocus,
        disabled,
        selected
      } = this.props;

      if (disabled || !onFocus) {
        return;
      }

      onFocus({
        selected
      }, e);
    });

    _defineProperty(this, "handleOpen", () => {
      this.setState({
        open: true
      });
    });

    _defineProperty(this, "handleClose", () => {
      this.setState({
        open: false
      });
    });

    _defineProperty(this, "onToggle", e => {
      if (this.props.disabled) {
        return;
      }

      e.stopPropagation();
      this.state.open ? this.handleClose() : this.handleOpen();
    });

    _defineProperty(this, "onOutsideClick", e => {
      const {
        onBlur,
        disabled,
        selected
      } = this.props;

      if (disabled) {
        return;
      }

      this.handleClose();

      if (onBlur) {
        onBlur({
          selected
        }, e);
      }
    });

    _defineProperty(this, "onKeyDown", e => {
      if (this.props.disabled) {
        return;
      }

      e.stopPropagation();
      const {
        open
      } = this.state;
      const {
        keyCode
      } = e;
      const shouldOpen = !open && (keyCode === SPACE_KEY || keyCode === UP_KEY || keyCode === DOWN_KEY);
      const shouldClose = open && keyCode === ESCAPE_KEY;

      if (shouldClose) {
        return this.handleClose();
      }

      if (shouldOpen) {
        return this.handleOpen();
      }
    });
  }

  componentDidMount() {
    if (this.props.initialFocus) {
      this.inputRef.current.focus();
    }

    this.setMenuWidth();
    window.addEventListener('resize', this.setMenuWidth);
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.setMenuWidth);
  }
  /**
   * We're debouncing this so it doesn't fire continually during a resize.
   *
   * Additionally we should use requestPostAnimationFrame to not trigger a forced
   * layout, but that's just a proposal, and the added complexity of solving this
   * in another manner does not seem worth it, considering the minor perf penalty.
   *
   * See: https://nolanlawson.com/2018/09/25/accurately-measuring-layout-on-the-web
   */


  render() {
    const {
      open,
      menuWidth
    } = this.state;
    const {
      children,
      className,
      selected,
      onChange,
      tabIndex,
      maxHeight,
      error,
      warning,
      valid,
      disabled,
      dense,
      dataTest
    } = this.props; // Create the input

    const inputProps = {
      selected,
      onChange,
      options: children,
      disabled
    };
    const input = React__default.cloneElement(this.props.input, inputProps); // Create the menu

    const menuProps = {
      selected,
      onChange,
      options: children,
      handleClose: this.handleClose,
      handleFocusInput: this.handleFocusInput
    };
    const menu = React__default.cloneElement(this.props.menu, menuProps);
    return /*#__PURE__*/React__default.createElement("div", {
      className: className,
      ref: this.selectRef,
      onFocus: this.onFocus,
      onKeyDown: this.onKeyDown,
      "data-test": dataTest
    }, /*#__PURE__*/React__default.createElement(InputWrapper, {
      onToggle: this.onToggle,
      inputRef: this.inputRef,
      tabIndex: tabIndex,
      error: error,
      warning: warning,
      valid: valid,
      disabled: disabled,
      dense: dense,
      dataTest: "".concat(dataTest, "-input")
    }, input), open && /*#__PURE__*/React__default.createElement(MenuWrapper, {
      onClick: this.onOutsideClick,
      maxHeight: maxHeight,
      selectRef: this.selectRef,
      menuWidth: menuWidth,
      dataTest: "".concat(dataTest, "-menu")
    }, menu));
  }

}
Select.defaultProps = {
  dataTest: 'dhis2-uicore-select'
};
Select.propTypes = {
  input: propTypes__default.element.isRequired,
  menu: propTypes__default.element.isRequired,
  selected: propTypes__default.oneOfType([propTypes__default.string, propTypes__default.arrayOf(propTypes__default.string)]).isRequired,
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  disabled: propTypes__default.bool,
  error: theme.sharedPropTypes.statusPropType,
  initialFocus: propTypes__default.bool,
  maxHeight: propTypes__default.string,
  tabIndex: propTypes__default.string,
  valid: theme.sharedPropTypes.statusPropType,
  warning: theme.sharedPropTypes.statusPropType,
  onBlur: propTypes__default.func,
  onChange: propTypes__default.func,
  onFocus: propTypes__default.func
};

const Loading = ({
  message,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["1434277130", [theme.colors.grey700, theme.theme.fonts, theme.spacers.dp8, theme.spacers.dp24]]]) + " " + (className || "")
}, /*#__PURE__*/React__default.createElement(CircularLoader, {
  small: true
}), message, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1434277130",
  dynamic: [theme.colors.grey700, theme.theme.fonts, theme.spacers.dp8, theme.spacers.dp24]
}, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;color:".concat(theme.colors.grey700, ";font-family:").concat(theme.theme.fonts, ";font-size:13px;padding:").concat(theme.spacers.dp8, " ").concat(theme.spacers.dp24, ";}")]));

Loading.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  className: propTypes__default.string,
  message: propTypes__default.string
};

const checkIfValidOption = option => option && 'props' in option && 'value' in option.props && 'label' in option.props; // Filters all children that won't be rendered from an array of react children

const filterIgnored = children => React__default.Children.toArray(children).filter(child => child !== null && child !== false && child !== undefined); // Find an option in an array of react children

const findOptionChild = (value, optionChildren) => React__default.Children.toArray(optionChildren).find(currentOption => {
  if (!currentOption.props) {
    return false;
  }

  return value === currentOption.props.value;
}); // Find an option in an array of option objects

const findOption = (value, optionArray) => optionArray.find(optionValue => value === optionValue); // Remove a specific option from an array of options

const removeOption = (value, optionArray) => optionArray.filter(optionValue => {
  return optionValue !== value;
});

const createRemoveHandler = ({
  selected,
  onChange,
  value
}) => (_, e) => {
  const filtered = removeOption(value, selected);
  const data = {
    selected: filtered
  };
  onChange(data, e);
};

const SelectionList = ({
  selected,
  onChange,
  disabled,
  options
}) => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, selected.map(value => {
  const selectedOption = findOptionChild(value, options);

  if (!selectedOption) {
    const message = "There is no option with the value: \"".concat(value, "\". ") + 'Make sure that all the values passed to the selected ' + 'prop match the value of an existing option.';
    throw new Error(message);
  } // The chip should be disabled if the option or the select are disabled


  const isDisabled = selectedOption.props.disabled || disabled; // Create an onRemove handler, but only if it's not disabled

  const onRemove = isDisabled ? undefined : createRemoveHandler({
    selected,
    onChange,
    value
  });
  return /*#__PURE__*/React__default.createElement(Chip, {
    key: value,
    onRemove: onRemove,
    disabled: isDisabled,
    overflow: true,
    dense: true
  }, selectedOption.props.label);
}));

SelectionList.propTypes = {
  disabled: propTypes__default.bool,
  options: propTypes__default.node,
  selected: propTypes__default.arrayOf(propTypes__default.string),
  onChange: propTypes__default.func
};

const InputPlaceholder = ({
  placeholder,
  className,
  dataTest
}) => {
  if (!placeholder) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["1027033961", [theme.colors.grey600]]]) + " " + (className || "")
  }, placeholder, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "1027033961",
    dynamic: [theme.colors.grey600]
  }, ["div.__jsx-style-dynamic-selector{color:".concat(theme.colors.grey600, ";-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}")]));
};

InputPlaceholder.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  className: propTypes__default.string,
  placeholder: propTypes__default.string
};

const InputPrefix = ({
  prefix,
  className,
  dataTest
}) => {
  if (!prefix) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["153011991", [theme.colors.grey600, theme.spacers.dp4]]]) + " " + (className || "")
  }, prefix, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "153011991",
    dynamic: [theme.colors.grey600, theme.spacers.dp4]
  }, ["div.__jsx-style-dynamic-selector{color:".concat(theme.colors.grey600, ";padding-right:").concat(theme.spacers.dp4, ";font-size:14px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}")]));
};

InputPrefix.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  className: propTypes__default.string,
  prefix: propTypes__default.string
};

const InputClearButton = ({
  onClear,
  clearText,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement(Button, {
  small: true,
  secondary: true,
  dataTest: dataTest,
  onClick: onClear,
  type: "button",
  className: className
}, clearText);

InputClearButton.propTypes = {
  clearText: propTypes__default.string.isRequired,
  dataTest: propTypes__default.string.isRequired,
  onClear: propTypes__default.func.isRequired,
  className: propTypes__default.string
};

const Input$1 = ({
  selected,
  onChange,
  clearable,
  clearText,
  placeholder,
  dataTest,
  prefix,
  options,
  className,
  disabled,
  inputMaxHeight
}) => {
  const hasSelection = selected.length > 0;

  const onClear = (_, e) => {
    const data = {
      selected: []
    };
    e.stopPropagation();
    onChange(data, e);
  };

  return /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1360178250", [theme.colors.grey900]], ["1331770409", [inputMaxHeight]]]) + " " + (cx('root', className) || "")
  }, /*#__PURE__*/React__default.createElement(InputPrefix, {
    prefix: prefix,
    dataTest: "".concat(dataTest, "-prefix")
  }), !hasSelection && !prefix && /*#__PURE__*/React__default.createElement(InputPlaceholder, {
    placeholder: placeholder,
    dataTest: "".concat(dataTest, "-placeholder")
  }), hasSelection && /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1360178250", [theme.colors.grey900]], ["1331770409", [inputMaxHeight]]]) + " " + "root-input"
  }, /*#__PURE__*/React__default.createElement(SelectionList, {
    selected: selected,
    onChange: onChange,
    options: options,
    disabled: disabled
  })), hasSelection && clearable && !disabled && /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1360178250", [theme.colors.grey900]], ["1331770409", [inputMaxHeight]]]) + " " + "root-right"
  }, /*#__PURE__*/React__default.createElement(InputClearButton, {
    onClear: onClear,
    clearText: clearText,
    dataTest: "".concat(dataTest, "-clear")
  })), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "1360178250",
    dynamic: [theme.colors.grey900]
  }, [".root.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:".concat(theme.colors.grey900, ";font-size:14px;line-height:16px;}"), ".root-input.__jsx-style-dynamic-selector{overflow-y:auto;-webkit-flex:1;-ms-flex:1;flex:1;}", ".root-right.__jsx-style-dynamic-selector{margin-left:auto;margin-right:10px;}"]), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "1331770409",
    dynamic: [inputMaxHeight]
  }, [".root-input.__jsx-style-dynamic-selector{max-height:".concat(inputMaxHeight, ";}")]));
};

Input$1.defaultProps = {
  inputMaxHeight: '100px'
};
Input$1.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  className: propTypes__default.string,
  clearText: propTypes__default.requiredIf(props => props.clearable, propTypes__default.string),
  clearable: propTypes__default.bool,
  disabled: propTypes__default.bool,
  inputMaxHeight: propTypes__default.string,
  options: propTypes__default.node,
  placeholder: propTypes__default.string,
  prefix: propTypes__default.string,
  selected: propTypes__default.arrayOf(propTypes__default.string),
  onChange: propTypes__default.func
};

const Empty = ({
  message,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["849993029", [theme.colors.grey700, theme.theme.fonts, theme.spacers.dp8, theme.spacers.dp24]]]) + " " + (className || "")
}, message, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "849993029",
  dynamic: [theme.colors.grey700, theme.theme.fonts, theme.spacers.dp8, theme.spacers.dp24]
}, ["div.__jsx-style-dynamic-selector{color:".concat(theme.colors.grey700, ";font-family:").concat(theme.theme.fonts, ";font-size:13px;line-height:16px;padding:").concat(theme.spacers.dp8, " ").concat(theme.spacers.dp24, ";text-align:center;}")]));

Empty.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  message: propTypes__default.string.isRequired,
  className: propTypes__default.string
};

const onDisabledClick = (_, e) => {
  e.stopPropagation();
  e.preventDefault();
};

const createHandler = ({
  isActive,
  onChange,
  selected,
  value
}) => (_, e) => {
  e.stopPropagation(); // If the option is currently selected remove it from the array of selected options

  if (isActive) {
    const filtered = removeOption(value, selected);
    const data = {
      selected: filtered
    };
    return onChange(data, e);
  } // Otherwise, add it to selected


  const data = {
    selected: selected.concat([value])
  };
  return onChange(data, e);
};

const Menu$1 = ({
  options,
  onChange,
  selected,
  empty,
  dataTest
}) => {
  const renderedOptions = filterIgnored(options);

  if (React__default.Children.count(renderedOptions) === 0) {
    // If it's a string, supply it to our <Empty> component so it looks better
    if (typeof empty === 'string') {
      return /*#__PURE__*/React__default.createElement(Empty, {
        message: empty,
        dataTest: "".concat(dataTest, "-empty")
      });
    } // Otherwise just render the supplied markup


    return empty;
  }

  const children = React__default.Children.map(options, child => {
    const isValidOption = checkIfValidOption(child); // Return early if the child isn't an option, to prevent attaching handlers etc.

    if (!isValidOption) {
      return child;
    }

    const {
      value,
      label,
      disabled: isDisabled
    } = child.props; // Active means the option is currently selected

    const isActive = !!findOption(value, selected); // Create the appropriate click handler for the option

    const onClick = isDisabled ? onDisabledClick : createHandler({
      isActive,
      onChange,
      selected,
      value,
      label
    });
    return React__default.cloneElement(child, _objectSpread2({}, child.props, {
      onClick,
      active: isActive
    }));
  });
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, children);
};

Menu$1.defaultProps = {
  empty: ''
};
Menu$1.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  empty: propTypes__default.node,
  options: propTypes__default.node,
  selected: propTypes__default.arrayOf(propTypes__default.string),
  onChange: propTypes__default.func
};

const FilterInput = ({
  value,
  onChange,
  placeholder,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  className: _JSXStyle.dynamic([["4109576192", [theme.colors.white, theme.spacers.dp8, theme.spacers.dp8, theme.spacers.dp4, theme.spacers.dp8]]]) + " " + (className || "")
}, /*#__PURE__*/React__default.createElement(Input, {
  dense: true,
  dataTest: dataTest,
  value: value,
  onChange: onChange,
  type: "text",
  name: "filter",
  placeholder: placeholder,
  initialFocus: true
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "4109576192",
  dynamic: [theme.colors.white, theme.spacers.dp8, theme.spacers.dp8, theme.spacers.dp4, theme.spacers.dp8]
}, ["div.__jsx-style-dynamic-selector{position:-webkit-sticky;position:sticky;top:0;background:".concat(theme.colors.white, ";padding:").concat(theme.spacers.dp8, " ").concat(theme.spacers.dp8, " ").concat(theme.spacers.dp4, " ").concat(theme.spacers.dp8, ";}")]));

FilterInput.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  value: propTypes__default.string.isRequired,
  className: propTypes__default.string,
  placeholder: propTypes__default.string,
  onChange: propTypes__default.func
};

const NoMatch = ({
  message,
  className
}) => /*#__PURE__*/React__default.createElement("div", {
  className: _JSXStyle.dynamic([["849993029", [theme.colors.grey700, theme.theme.fonts, theme.spacers.dp8, theme.spacers.dp24]]]) + " " + (className || "")
}, message, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "849993029",
  dynamic: [theme.colors.grey700, theme.theme.fonts, theme.spacers.dp8, theme.spacers.dp24]
}, ["div.__jsx-style-dynamic-selector{color:".concat(theme.colors.grey700, ";font-family:").concat(theme.theme.fonts, ";font-size:13px;line-height:16px;padding:").concat(theme.spacers.dp8, " ").concat(theme.spacers.dp24, ";text-align:center;}")]));

NoMatch.propTypes = {
  message: propTypes__default.string.isRequired,
  className: propTypes__default.string
};

class FilterableMenu extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      filter: ''
    });

    _defineProperty(this, "onFilterChange", ({
      value
    }) => {
      this.setState({
        filter: value
      });
    });
  }

  render() {
    const {
      dataTest,
      options,
      onChange,
      selected,
      empty,
      handleClose,
      handleFocusInput,
      placeholder,
      noMatchText,
      Menu
    } = this.props;
    const {
      filter
    } = this.state;
    const menuProps = {
      onChange,
      selected,
      empty,
      handleClose,
      handleFocusInput,
      dataTest
    };
    const renderedOptions = filterIgnored(options); // If there are no options or there's no filter, just pass everything through

    if (React__default.Children.count(renderedOptions) === 0 || !filter) {
      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(FilterInput, {
        dataTest: "".concat(dataTest, "-filterinput"),
        placeholder: placeholder,
        value: filter,
        onChange: this.onFilterChange
      }), /*#__PURE__*/React__default.createElement(Menu, _extends({}, menuProps, {
        options: options
      })));
    }

    const filtered = React__default.Children.map(options, child => {
      const isValidOption = checkIfValidOption(child); // Filter it out if it's an invalid option

      if (!isValidOption) {
        return null;
      }

      const {
        label
      } = child.props; // Filter by label, because that's the part of an option that's displayed to the user

      const match = label.toLowerCase().includes(filter.toLowerCase());
      return match ? child : null;
    });
    const hasMatch = React__default.Children.count(filtered) > 0;
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(FilterInput, {
      dataTest: "".concat(dataTest, "-filterinput"),
      placeholder: placeholder,
      value: filter,
      onChange: this.onFilterChange
    }), hasMatch ? /*#__PURE__*/React__default.createElement(Menu, _extends({}, menuProps, {
      options: filtered
    })) : /*#__PURE__*/React__default.createElement(NoMatch, {
      message: noMatchText
    }));
  }

}
FilterableMenu.propTypes = {
  Menu: propTypes__default.elementType.isRequired,
  dataTest: propTypes__default.string.isRequired,
  noMatchText: propTypes__default.string.isRequired,
  selected: propTypes__default.oneOfType([propTypes__default.string, propTypes__default.arrayOf(propTypes__default.string)]).isRequired,
  empty: propTypes__default.node,
  handleClose: propTypes__default.func,
  handleFocusInput: propTypes__default.func,
  options: propTypes__default.node,
  placeholder: propTypes__default.string,
  onChange: propTypes__default.func
};

const FilterableMenu$1 = ({
  dataTest,
  options,
  onChange,
  selected,
  empty,
  handleClose,
  handleFocusInput,
  placeholder,
  noMatchText
}) => /*#__PURE__*/React__default.createElement(FilterableMenu, {
  dataTest: dataTest,
  options: options,
  onChange: onChange,
  selected: selected,
  empty: empty,
  handleClose: handleClose,
  handleFocusInput: handleFocusInput,
  placeholder: placeholder,
  noMatchText: noMatchText,
  Menu: Menu$1
});

FilterableMenu$1.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  noMatchText: propTypes__default.string.isRequired,
  empty: propTypes__default.node,
  handleClose: propTypes__default.func,
  handleFocusInput: propTypes__default.func,
  options: propTypes__default.node,
  placeholder: propTypes__default.string,
  selected: propTypes__default.arrayOf(propTypes__default.string),
  onChange: propTypes__default.func
};

/**
 * @module
 *
 * @param {MultiSelect.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { MultiSelect } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/select.md|Design system}
 */

const MultiSelect = ({
  className,
  selected,
  tabIndex,
  maxHeight,
  inputMaxHeight,
  onChange,
  onFocus,
  onBlur,
  loading,
  error,
  warning,
  valid,
  disabled,
  children,
  clearable,
  clearText,
  filterable,
  filterPlaceholder,
  placeholder,
  prefix,
  empty,
  loadingText,
  noMatchText,
  initialFocus,
  dense,
  dataTest
}) => {
  // If the select is filterable, use a filterable menu
  const menu = filterable ? /*#__PURE__*/React__default.createElement(FilterableMenu$1, {
    dataTest: dataTest,
    empty: empty,
    noMatchText: noMatchText,
    placeholder: filterPlaceholder
  }) : /*#__PURE__*/React__default.createElement(Menu$1, {
    empty: empty,
    dataTest: dataTest
  });
  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["4294070700", [theme.spacers.dp4]]]) + " " + "root"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["4294070700", [theme.spacers.dp4]]]) + " " + "root-input"
  }, /*#__PURE__*/React__default.createElement(Select, {
    className: className,
    selected: selected,
    input: /*#__PURE__*/React__default.createElement(Input$1, {
      clearable: clearable,
      clearText: clearText,
      dataTest: dataTest,
      placeholder: placeholder,
      prefix: prefix,
      inputMaxHeight: inputMaxHeight
    }),
    menu: menu,
    tabIndex: tabIndex,
    maxHeight: maxHeight,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    error: error,
    warning: warning,
    valid: valid,
    disabled: disabled,
    initialFocus: initialFocus,
    dense: dense
  }, children, loading && /*#__PURE__*/React__default.createElement(Loading, {
    message: loadingText,
    dataTest: "".concat(dataTest, "-loading")
  }))), /*#__PURE__*/React__default.createElement(uiIcons.StatusIcon, {
    error: error,
    valid: valid,
    warning: warning
  }), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "4294070700",
    dynamic: [theme.spacers.dp4]
  }, [".root.__jsx-style-dynamic-selector{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".root-input.__jsx-style-dynamic-selector{margin-right:".concat(theme.spacers.dp4, ";-webkit-flex:1;-ms-flex:1;flex:1;}")]));
};

MultiSelect.defaultProps = {
  selected: [],
  dataTest: 'dhis2-uicore-multiselect'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {function} [onChange]
 * @prop {Array.<string>} [selected]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 * @prop {Node} [children]
 * @prop {boolean} [disabled]
 * @prop {boolean} [dense]
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, `loading`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {boolean} [initialFocus]
 * @prop {string} [clearText] - Only required if clearable is true
 * @prop {boolean} [clearable]
 * @prop {Node} [empty]
 * @prop {string} [filterPlaceholder]
 * @prop {boolean} [filterable]
 * @prop {string} [loadingText]
 * @prop {string} [maxHeight]
 * @prop {string} [inputMaxHeight]
 * @prop {string} [noMatchText] - Only required if filterable is true
 * @prop {string} [placeholder]
 * @prop {string} [prefix]
 * @prop {string} [dataTest]
 */

MultiSelect.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  clearText: propTypes__default.requiredIf(props => props.clearable, propTypes__default.string),
  clearable: propTypes__default.bool,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  disabled: propTypes__default.bool,
  empty: propTypes__default.node,
  error: theme.sharedPropTypes.statusPropType,
  filterPlaceholder: propTypes__default.string,
  filterable: propTypes__default.bool,
  initialFocus: propTypes__default.bool,
  inputMaxHeight: propTypes__default.string,
  loading: propTypes__default.bool,
  loadingText: propTypes__default.string,
  maxHeight: propTypes__default.string,
  noMatchText: propTypes__default.requiredIf(props => props.filterable, propTypes__default.string),
  placeholder: propTypes__default.string,
  prefix: propTypes__default.string,
  selected: propTypes__default.arrayOf(propTypes__default.string),
  tabIndex: propTypes__default.string,
  valid: theme.sharedPropTypes.statusPropType,
  warning: theme.sharedPropTypes.statusPropType,
  onBlur: propTypes__default.func,
  onChange: propTypes__default.func,
  onFocus: propTypes__default.func
};

const {
  styles: styles$2,
  className: checkboxClassname
} = {
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2013783366"
  }, [".jsx-2013783366{padding:".concat(theme.spacers.dp8, " ").concat(theme.spacers.dp12, ";}")]),
  className: "jsx-2013783366"
};
/**
 * @module
 *
 * @param {MultiSelectOption.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { MultiSelectOption } from '@dhis2/ui-core'
 *
 */

const MultiSelectOption = ({
  label,
  active,
  disabled,
  onClick,
  className,
  dataTest,
  value
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  "data-value": value,
  "data-label": label,
  className: _JSXStyle.dynamic([["3813980210", [theme.colors.grey200]]]) + " " + (cx(className, {
    disabled
  }) || "")
}, /*#__PURE__*/React__default.createElement(Checkbox, {
  name: label,
  className: checkboxClassname,
  checked: active,
  label: label,
  onChange: onClick,
  disabled: disabled,
  dense: true
}), styles$2, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3813980210",
  dynamic: [theme.colors.grey200]
}, ["div.__jsx-style-dynamic-selector:hover{background-color:".concat(theme.colors.grey200, ";}"), "div.disabled.__jsx-style-dynamic-selector:hover{background-color:initial;}"]));

MultiSelectOption.defaultProps = {
  dataTest: 'dhis2-uicore-multiselectoption'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} value
 * @prop {string} label
 * @prop {function} [onChange]
 * @prop {string} [className]
 * @prop {function} [onClick]
 * @prop {boolean} [active]
 * @prop {boolean} [disabled]
 * @prop {string} [dataTest]
 */

MultiSelectOption.propTypes = {
  label: propTypes__default.string.isRequired,
  value: propTypes__default.string.isRequired,
  active: propTypes__default.bool,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  disabled: propTypes__default.bool,
  onClick: propTypes__default.func
};

const ArrowDown$1 = () => /*#__PURE__*/React__default.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 48 48",
  className: "jsx-2769585603"
}, /*#__PURE__*/React__default.createElement("path", {
  d: "M14 20l10 10 10-10z",
  className: "jsx-2769585603"
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2769585603"
}, ["svg.jsx-2769585603{fill:inherit;height:24px;width:24px;vertical-align:middle;pointer-events:none;}"]));

const Toggle = ({
  open,
  onOpen,
  onClose,
  dataTest
}) => {
  const _onClick = open ? onClose : onOpen;

  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest,
    onClick: event => _onClick && _onClick({
      open: !open
    }, event),
    className: _JSXStyle.dynamic([["486382662", [theme.colors.grey400, theme.colors.grey700]]]) + " " + (cx({
      open
    }) || "")
  }, /*#__PURE__*/React__default.createElement("span", {
    className: _JSXStyle.dynamic([["486382662", [theme.colors.grey400, theme.colors.grey700]]])
  }, /*#__PURE__*/React__default.createElement(ArrowDown$1, null)), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "486382662",
    dynamic: [theme.colors.grey400, theme.colors.grey700]
  }, ["div.__jsx-style-dynamic-selector{width:24px;position:relative;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}", "div.__jsx-style-dynamic-selector:after{background:".concat(theme.colors.grey400, ";height:calc(100% - 24px);left:12px;position:absolute;top:15px;width:1px;z-index:1;}"), ".open.__jsx-style-dynamic-selector:after{content:'';}", "span.__jsx-style-dynamic-selector{display:block;position:relative;z-index:2;fill:".concat(theme.colors.grey700, ";}"), "div.__jsx-style-dynamic-selector svg{vertical-align:top;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);transform:rotate(-90deg);}", ".open.__jsx-style-dynamic-selector svg{-webkit-transform:rotate(0);-ms-transform:rotate(0);transform:rotate(0);}"]));
};
Toggle.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  open: propTypes__default.bool,
  onClose: propTypes__default.func,
  onOpen: propTypes__default.func
};

const Spacer = () => /*#__PURE__*/React__default.createElement("div", {
  className: "jsx-2503342345"
}, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2503342345"
}, ["div.jsx-2503342345{width:24px;}"]));

const Leaves = ({
  children,
  open,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: "jsx-3677374542" + " " + (cx({
    open
  }) || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3677374542"
}, ["div.jsx-3677374542{height:0;overflow:hidden;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".open.jsx-3677374542{height:auto;}"]));
Leaves.propTypes = {
  children: propTypes__default.node,
  dataTest: propTypes__default.string,
  open: propTypes__default.bool
};

/**
 * @module
 *
 * @param {Node.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Node } from '@dhis2/ui-core'
 *
 * @see Live demo: {@link /demo/?path=/story/node--multiple-roots|Storybook}
 */

const Node = ({
  open,
  className,
  component: label,
  children,
  icon,
  onOpen,
  onClose,
  dataTest
}) => {
  const hasLeaves = !!React__default.Children.toArray(children).filter(i => i).length;
  const showArrow = !icon && hasLeaves;
  const showSpacer = !icon && !hasLeaves;
  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest,
    className: "jsx-1433072554" + " " + (cx('node', className) || "")
  }, icon && /*#__PURE__*/React__default.createElement("div", {
    "data-test": "".concat(dataTest, "-icon"),
    className: "jsx-1433072554"
  }, icon), showArrow && /*#__PURE__*/React__default.createElement(Toggle, {
    open: open,
    onOpen: onOpen,
    onClose: onClose,
    dataTest: "".concat(dataTest, "-toggle")
  }), showSpacer && /*#__PURE__*/React__default.createElement(Spacer, null), /*#__PURE__*/React__default.createElement("div", {
    "data-test": "".concat(dataTest, "-content"),
    className: "jsx-1433072554"
  }, /*#__PURE__*/React__default.createElement("div", {
    "data-test": "".concat(dataTest, "-label"),
    className: "jsx-1433072554"
  }, label), /*#__PURE__*/React__default.createElement(Leaves, {
    open: open,
    dataTest: "".concat(dataTest, "-leaves")
  }, children)), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "1433072554"
  }, [".node.jsx-1433072554{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}"]));
};
Node.defaultProps = {
  dataTest: 'dhis2-uicore-node'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Element} [component]
 * @prop {className} [string]
 * @prop {Node} [children]
 * @prop {Node} [icon]
 * @prop {boolean} [open]
 * @prop {function} [onOpen]
 * @prop {funtion} [onClose]
 * @prop {string} [dataTest]
 */

Node.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  component: propTypes__default.element,
  dataTest: propTypes__default.string,
  icon: propTypes__default.node,
  open: propTypes__default.bool,
  onClose: propTypes__default.func,
  onOpen: propTypes__default.func
};

const NoticeBoxTitle = ({
  title,
  dataTest
}) => {
  if (!title) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("h6", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["3611901971", [theme.colors.grey900, theme.spacers.dp12]]])
  }, title, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "3611901971",
    dynamic: [theme.colors.grey900, theme.spacers.dp12]
  }, ["h6.__jsx-style-dynamic-selector{color:".concat(theme.colors.grey900, ";font-size:14px;font-weight:500;line-height:20px;margin:0 0 ").concat(theme.spacers.dp12, " 0;}")]));
};
NoticeBoxTitle.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  title: propTypes__default.string
};

const getIconStyles = color => ({
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "800665792",
    dynamic: [color, theme.spacers.dp12]
  }, ["svg.__jsx-style-dynamic-selector{fill:".concat(color, ";width:24px;height:24px;margin-right:").concat(theme.spacers.dp12, ";}")]),
  className: _JSXStyle.dynamic([["800665792", [color, theme.spacers.dp12]]])
});

const NoticeBoxIcon = ({
  warning,
  error,
  dataTest
}) => {
  // Info is the default icon
  let color = theme.colors.blue900;
  let Icon = uiIcons.Info;

  if (warning) {
    color = theme.colors.yellow700;
    Icon = uiIcons.Warning;
  }

  if (error) {
    color = theme.colors.red700;
    Icon = uiIcons.Error;
  }

  const {
    className,
    styles
  } = getIconStyles(color);
  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest
  }, /*#__PURE__*/React__default.createElement(Icon, {
    className: className
  }), styles);
};
NoticeBoxIcon.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  error: propTypes__default.mutuallyExclusive(['error', 'warning'], propTypes__default.bool),
  warning: propTypes__default.mutuallyExclusive(['error', 'warning'], propTypes__default.bool)
};

const NoticeBoxMessage = ({
  children,
  dataTest
}) => {
  if (!children) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["3452101222", [theme.colors.grey900]]])
  }, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "3452101222",
    dynamic: [theme.colors.grey900]
  }, ["div.__jsx-style-dynamic-selector{color:".concat(theme.colors.grey900, ";font-size:14px;line-height:20px;}")]));
};
NoticeBoxMessage.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  children: propTypes__default.node
};

/**
 * @module
 *
 * @param {NoticeBox.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { NoticeBox } from '@dhis2/ui-core'
 *
 * @see Live demo: {@link /demo/?path=/story/component-widget-noticebox--default|Storybook}
 */

const NoticeBox = ({
  className,
  children,
  dataTest,
  title,
  warning,
  error
}) => {
  const classnames = cx(className, 'root', {
    warning,
    error
  });
  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["833500449", [theme.colors.blue050, theme.colors.blue200, theme.spacers.dp12, theme.spacers.dp16, theme.colors.yellow050, theme.colors.yellow200, theme.colors.red050, theme.colors.red500]]]) + " " + (classnames || "")
  }, /*#__PURE__*/React__default.createElement(NoticeBoxIcon, {
    error: error,
    warning: warning,
    dataTest: "".concat(dataTest, "-icon")
  }), /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["833500449", [theme.colors.blue050, theme.colors.blue200, theme.spacers.dp12, theme.spacers.dp16, theme.colors.yellow050, theme.colors.yellow200, theme.colors.red050, theme.colors.red500]]])
  }, /*#__PURE__*/React__default.createElement(NoticeBoxTitle, {
    title: title,
    dataTest: "".concat(dataTest, "-title")
  }), /*#__PURE__*/React__default.createElement(NoticeBoxMessage, {
    dataTest: "".concat(dataTest, "-message")
  }, children)), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "833500449",
    dynamic: [theme.colors.blue050, theme.colors.blue200, theme.spacers.dp12, theme.spacers.dp16, theme.colors.yellow050, theme.colors.yellow200, theme.colors.red050, theme.colors.red500]
  }, [".root.__jsx-style-dynamic-selector{background:".concat(theme.colors.blue050, ";border:1px solid ").concat(theme.colors.blue200, ";border-radius:3px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;padding:").concat(theme.spacers.dp12, " ").concat(theme.spacers.dp16, ";}"), ".root.warning.__jsx-style-dynamic-selector{background:".concat(theme.colors.yellow050, ";border:1px solid ").concat(theme.colors.yellow200, ";}"), ".root.error.__jsx-style-dynamic-selector{background:".concat(theme.colors.red050, ";border:2px solid ").concat(theme.colors.red500, ";}")]));
};
NoticeBox.defaultProps = {
  dataTest: 'dhis2-uicore-noticebox'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} [children]
 * @prop {className} [string]
 * @prop {title} [string]
 * @prop {string} [dataTest]
 * @prop {boolean} [warning] - `warning` and `error` are mutually exclusive boolean props
 * @prop {boolean} [error]
 */

NoticeBox.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  error: propTypes__default.mutuallyExclusive(['error', 'warning'], propTypes__default.bool),
  title: propTypes__default.string,
  warning: propTypes__default.mutuallyExclusive(['error', 'warning'], propTypes__default.bool)
};

const getArrowPosition = popperPlacement => {
  const direction = typeof popperPlacement === 'string' ? popperPlacement.split('-')[0] : '';

  switch (direction) {
    case 'top':
      return 'bottom';

    case 'right':
      return 'left';

    case 'bottom':
      return 'top';

    case 'left':
      return 'right';

    default:
      return '';
  }
};

const ARROW_SIZE = 8;
const Arrow = React.forwardRef(({
  hidden,
  popperPlacement,
  styles
}, ref) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": "dhis2-uicore-popoverarrow",
  style: styles,
  ref: ref,
  className: _JSXStyle.dynamic([["1397459397", [ARROW_SIZE, ARROW_SIZE, ARROW_SIZE / 2, ARROW_SIZE / 2, ARROW_SIZE / 2, ARROW_SIZE / 2, ARROW_SIZE / 2, theme.colors.white, theme.colors.white]]]) + " " + (cx(getArrowPosition(popperPlacement), {
    hidden
  }) || "")
}, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1397459397",
  dynamic: [ARROW_SIZE, ARROW_SIZE, ARROW_SIZE / 2, ARROW_SIZE / 2, ARROW_SIZE / 2, ARROW_SIZE / 2, ARROW_SIZE / 2, theme.colors.white, theme.colors.white]
}, ["div.__jsx-style-dynamic-selector{width:".concat(ARROW_SIZE, "px;height:").concat(ARROW_SIZE, "px;position:absolute;}"), "div.top.__jsx-style-dynamic-selector{top:-".concat(ARROW_SIZE / 2, "px;}"), "div.right.__jsx-style-dynamic-selector{right:-".concat(ARROW_SIZE / 2, "px;}"), "div.bottom.__jsx-style-dynamic-selector{bottom:-".concat(ARROW_SIZE / 2, "px;}"), "div.left.__jsx-style-dynamic-selector{left:-".concat(ARROW_SIZE / 2, "px;}"), "div.hidden.__jsx-style-dynamic-selector{visibility:hidden;}", "div.__jsx-style-dynamic-selector::after{content:'';position:absolute;pointer-events:none;box-sizing:border-box;border-style:solid;border-width:".concat(ARROW_SIZE / 2, "px;border-color:transparent transparent ").concat(theme.colors.white, " ").concat(theme.colors.white, ";box-shadow:-1px 1px 1px 0 rgba(64,75,90,0.08), -3px 3px 8px -6px rgba(64,75,90,0.15);}"), "div.bottom.__jsx-style-dynamic-selector::after{-webkit-transform:rotate(-45deg);-ms-transform:rotate(-45deg);transform:rotate(-45deg);}", "div.top.__jsx-style-dynamic-selector::after{-webkit-transform:rotate(135deg);-ms-transform:rotate(135deg);transform:rotate(135deg);}", "div.right.__jsx-style-dynamic-selector::after{-webkit-transform:rotate(-135deg);-ms-transform:rotate(-135deg);transform:rotate(-135deg);}", "div.left.__jsx-style-dynamic-selector::after{-webkit-transform:rotate(45deg);-ms-transform:rotate(45deg);transform:rotate(45deg);}"])));
Arrow.displayName = 'Arrow';
Arrow.propTypes = {
  hidden: propTypes__default.bool,
  popperPlacement: propTypes__default.string,
  styles: propTypes__default.shape({
    left: propTypes__default.string,
    position: propTypes__default.string,
    top: propTypes__default.string,
    transform: propTypes__default.string
  })
};

const BORDER_RADIUS = 4;

const computeArrowPadding = () => {
  // pythagoras
  const diagonal = Math.sqrt(2 * Math.pow(ARROW_SIZE, 2));
  const overflowInPx = (diagonal - ARROW_SIZE) / 2;
  const padding = BORDER_RADIUS + overflowInPx;
  return Math.ceil(padding);
};

const hideArrowWhenDisplaced = ({
  state
}) => {
  const halfArrow = ARROW_SIZE / 2;
  const displacement = state.modifiersData.preventOverflow;
  const referenceRect = state.rects.reference;
  const shouldHideArrow = Math.abs(displacement.x) >= referenceRect.width + halfArrow || Math.abs(displacement.y) >= referenceRect.height + halfArrow;

  if (typeof state.attributes.arrow !== 'object') {
    state.attributes.arrow = {};
  }

  state.attributes.arrow['data-arrow-hidden'] = shouldHideArrow;
  return state;
};

const combineModifiers = (arrow, arrowElement, resizeObservers) => {
  const baseModifiers = getBaseModifiers(resizeObservers);

  if (!arrow) {
    return baseModifiers;
  }

  return [...baseModifiers, {
    name: 'offset',
    options: {
      offset: [0, ARROW_SIZE]
    }
  }, {
    name: 'arrow',
    options: {
      padding: computeArrowPadding(),
      element: arrowElement
    }
  }, {
    name: 'hideArrowWhenDisplaced',
    enabled: true,
    phase: 'main',
    fn: hideArrowWhenDisplaced,
    requires: ['preventOverflow']
  }];
};

/**
 * @module
 * @param {Popover.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Popover } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/popover.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/components-core-popover--default|Storybook}
 */

const Popover = ({
  children,
  reference,
  arrow,
  className,
  dataTest,
  elevation,
  maxWidth,
  observePopperResize,
  observeReferenceResize,
  placement,
  onClickOutside
}) => {
  const referenceElement = getReferenceElement(reference);
  const [popperElement, setPopperElement] = React.useState(null);
  const [arrowElement, setArrowElement] = React.useState(null);
  const modifiers = React.useMemo(() => combineModifiers(arrow, arrowElement, {
    observePopperResize,
    observeReferenceResize
  }), [arrow, arrowElement, observePopperResize, observeReferenceResize]);
  const {
    styles,
    attributes
  } = reactPopper.usePopper(referenceElement, popperElement, {
    placement,
    modifiers
  });
  return /*#__PURE__*/React__default.createElement(Layer, {
    onClick: onClickOutside
  }, /*#__PURE__*/React__default.createElement("div", _extends({
    "data-test": dataTest,
    ref: setPopperElement,
    style: styles.popper
  }, attributes.popper, {
    className: _JSXStyle.dynamic([["632767479", [maxWidth, elevation, theme.colors.white]]]) + " " + (attributes.popper && attributes.popper.className != null && attributes.popper.className || className || "")
  }), children, arrow && /*#__PURE__*/React__default.createElement(Arrow, {
    hidden: attributes.arrow && attributes.arrow['data-arrow-hidden'],
    popperPlacement: attributes.popper && attributes.popper['data-popper-placement'],
    ref: setArrowElement,
    styles: styles.arrow
  }), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "632767479",
    dynamic: [maxWidth, elevation, theme.colors.white]
  }, ["div.__jsx-style-dynamic-selector{max-width:".concat(maxWidth, "px;box-shadow:").concat(elevation, ";background-color:").concat(theme.colors.white, ";border-radius:4px;}")])));
};

Popover.defaultProps = {
  arrow: true,
  dataTest: 'dhis2-uicore-popover',
  elevation: theme.elevations.e200,
  maxWidth: 360,
  placement: 'top'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {React.Ref} reference A React ref that refers to the element the Popover should position against
 * @prop {Node} children
 * @prop {boolean} [arrow=true] Show or hide the arrow
 * @prop {string} [className]
 * @prop {string} [dataTest=dhis2-uicore-popover]
 * @prop {number} [maxWidth=360]
 * @prop {('auto'|'auto-start'|'auto-end'|'top'|'top-start'|'top-end'|'bottom'|'bottom-start'|'bottom-end'|'right'|'right-start'|'right-end'|'left'|'left-start'|'left-end')} [placement=top]
 * @prop {function} [onClickOutside]
 */

Popover.propTypes = {
  children: propTypes$1.node.isRequired,
  arrow: propTypes$1.bool,
  className: propTypes$1.string,
  dataTest: propTypes$1.string,
  elevation: propTypes$1.string,
  maxWidth: propTypes$1.number,
  observePopperResize: propTypes$1.bool,
  observeReferenceResize: propTypes$1.bool,
  placement: theme.sharedPropTypes.popperPlacementPropType,
  reference: theme.sharedPropTypes.popperReferencePropType,
  onClickOutside: propTypes$1.func
};

/**
 * @module
 *
 * @param {Radio.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Radio } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/radio.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/radio--default|Storybook}
 */

class Radio extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "ref", React.createRef());

    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(), e);
      }
    });

    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(), e);
      }
    });

    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(), e);
      }
    });
  }

  componentDidMount() {
    if (this.props.initialFocus) {
      this.ref.current.focus();
    }
  }

  createHandlerPayload() {
    return {
      value: this.props.value,
      name: this.props.name,
      checked: !this.props.checked
    };
  }

  render() {
    const {
      checked = false,
      className,
      disabled,
      error,
      label,
      name,
      tabIndex,
      valid,
      value,
      warning,
      dense,
      dataTest
    } = this.props;
    const classes = cx({
      checked,
      disabled,
      valid,
      error,
      warning
    });
    return /*#__PURE__*/React__default.createElement("label", {
      "data-test": dataTest,
      className: _JSXStyle.dynamic([["2797418068", [theme.colors.grey900, theme.theme.disabled, theme.colors.blue600]]]) + " " + (cx(className, {
        disabled,
        dense
      }) || "")
    }, /*#__PURE__*/React__default.createElement("input", {
      type: "radio",
      ref: this.ref,
      name: name,
      value: value,
      checked: checked,
      disabled: disabled,
      tabIndex: tabIndex,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      className: _JSXStyle.dynamic([["2797418068", [theme.colors.grey900, theme.theme.disabled, theme.colors.blue600]]])
    }), /*#__PURE__*/React__default.createElement("div", {
      className: _JSXStyle.dynamic([["2797418068", [theme.colors.grey900, theme.theme.disabled, theme.colors.blue600]]]) + " " + (cx('icon', {
        dense
      }) || "")
    }, dense ? /*#__PURE__*/React__default.createElement(uiIcons.RadioDense, {
      className: classes
    }) : /*#__PURE__*/React__default.createElement(uiIcons.RadioRegular, {
      className: classes
    })), label, /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "2797418068",
      dynamic: [theme.colors.grey900, theme.theme.disabled, theme.colors.blue600]
    }, ["label.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;cursor:pointer;pointer-events:all;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:".concat(theme.colors.grey900, ";font-size:16px;line-height:20px;}"), "label.dense.__jsx-style-dynamic-selector{font-size:14px;line-height:16px;}", "label.disabled.__jsx-style-dynamic-selector{cursor:not-allowed;color:".concat(theme.theme.disabled, ";}"), "input.__jsx-style-dynamic-selector{opacity:0;pointer-events:none;position:absolute;}", ".icon.__jsx-style-dynamic-selector{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;margin-right:5px;border:2px solid transparent;padding:1px;border-radius:50%;}", "label.dense.__jsx-style-dynamic-selector .icon.__jsx-style-dynamic-selector{margin-right:3px;}", "input.__jsx-style-dynamic-selector:focus+.icon.__jsx-style-dynamic-selector{border-color:".concat(theme.colors.blue600, ";}")]));
  }

}

Radio.defaultProps = {
  dataTest: 'dhis2-uicore-radio'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [value]
 * @prop {Node} [label]
 * @prop {function} [onChange] - called with the signature `object, event`
 * @prop {string} [name]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [checked]
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 *
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {string} [dataTest]
 */

Radio.propTypes = {
  checked: propTypes__default.bool,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  disabled: propTypes__default.bool,
  error: theme.sharedPropTypes.statusPropType,
  initialFocus: propTypes__default.bool,
  label: propTypes__default.node,
  name: propTypes__default.string,
  tabIndex: propTypes__default.string,
  valid: theme.sharedPropTypes.statusPropType,
  value: propTypes__default.string,
  warning: theme.sharedPropTypes.statusPropType,
  onBlur: propTypes__default.func,
  onChange: propTypes__default.func,
  onFocus: propTypes__default.func
};

const Selection = ({
  options,
  selected,
  className
}) => {
  const selectedOption = findOptionChild(selected, options);

  if (!selectedOption) {
    const message = "There is no option with the value: \"".concat(selected, "\". ") + 'Make sure that the value passed to the selected ' + 'prop matches the value of an existing option.';
    throw new Error(message);
  }

  const icon = selectedOption.props.icon;
  const label = selectedOption.props.label;
  return /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["2368250986", [theme.spacers.dp8, theme.spacers.dp16, theme.spacers.dp16]]]) + " " + (cx(className, 'root') || "")
  }, icon && /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["2368250986", [theme.spacers.dp8, theme.spacers.dp16, theme.spacers.dp16]]]) + " " + "root-icon"
  }, icon), label, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2368250986",
    dynamic: [theme.spacers.dp8, theme.spacers.dp16, theme.spacers.dp16]
  }, [".root.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}", ".root-icon.__jsx-style-dynamic-selector{margin-right:".concat(theme.spacers.dp8, ";width:").concat(theme.spacers.dp16, ";height:").concat(theme.spacers.dp16, ";overflow:hidden;}")]));
};

Selection.propTypes = {
  className: propTypes__default.string,
  options: propTypes__default.node,
  selected: propTypes__default.string
};

const Input$2 = ({
  selected,
  onChange,
  clearable,
  clearText,
  placeholder,
  dataTest,
  prefix,
  options,
  className,
  disabled,
  inputMaxHeight
}) => {
  const hasSelection = selected && typeof selected === 'string';

  const onClear = (_, e) => {
    const data = {
      selected: ''
    };
    e.stopPropagation();
    onChange(data, e);
  };

  return /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1360178250", [theme.colors.grey900]], ["1331770409", [inputMaxHeight]]]) + " " + (cx('root', className) || "")
  }, /*#__PURE__*/React__default.createElement(InputPrefix, {
    prefix: prefix,
    dataTest: "".concat(dataTest, "-prefix")
  }), !hasSelection && !prefix && /*#__PURE__*/React__default.createElement(InputPlaceholder, {
    placeholder: placeholder,
    dataTest: "".concat(dataTest, "-placeholder")
  }), hasSelection && /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1360178250", [theme.colors.grey900]], ["1331770409", [inputMaxHeight]]]) + " " + "root-input"
  }, /*#__PURE__*/React__default.createElement(Selection, {
    selected: selected,
    options: options
  })), hasSelection && clearable && !disabled && /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1360178250", [theme.colors.grey900]], ["1331770409", [inputMaxHeight]]]) + " " + "root-right"
  }, /*#__PURE__*/React__default.createElement(InputClearButton, {
    onClear: onClear,
    clearText: clearText,
    dataTest: "".concat(dataTest, "-clear")
  })), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "1360178250",
    dynamic: [theme.colors.grey900]
  }, [".root.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:".concat(theme.colors.grey900, ";font-size:14px;line-height:16px;}"), ".root-input.__jsx-style-dynamic-selector{overflow-y:auto;-webkit-flex:1;-ms-flex:1;flex:1;}", ".root-right.__jsx-style-dynamic-selector{margin-left:auto;margin-right:10px;}"]), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "1331770409",
    dynamic: [inputMaxHeight]
  }, [".root-input.__jsx-style-dynamic-selector{max-height:".concat(inputMaxHeight, ";}")]));
};

Input$2.defaultProps = {
  inputMaxHeight: '100px'
};
Input$2.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  className: propTypes__default.string,
  clearText: propTypes__default.requiredIf(props => props.clearable, propTypes__default.string),
  clearable: propTypes__default.bool,
  disabled: propTypes__default.bool,
  inputMaxHeight: propTypes__default.string,
  options: propTypes__default.node,
  placeholder: propTypes__default.string,
  prefix: propTypes__default.string,
  selected: propTypes__default.string,
  onChange: propTypes__default.func
};

const onIgnoredClick = (_, e) => {
  e.stopPropagation();
  e.preventDefault();
};

const Menu$2 = ({
  options,
  onChange,
  selected,
  empty,
  handleFocusInput,
  handleClose,
  dataTest
}) => {
  const renderedOptions = filterIgnored(options);

  if (React__default.Children.count(renderedOptions) === 0) {
    // If it's a string, supply it to our <Empty> component so it looks better
    if (typeof empty === 'string') {
      return /*#__PURE__*/React__default.createElement(Empty, {
        message: empty,
        dataTest: "".concat(dataTest, "-empty")
      });
    } // Otherwise just render the supplied markup


    return empty;
  }

  const children = React__default.Children.map(options, child => {
    const isValidOption = checkIfValidOption(child); // Return early if the child isn't an option, to prevent attaching handlers etc.

    if (!isValidOption) {
      return child;
    }

    const {
      value,
      disabled: isDisabled
    } = child.props; // Active means the option is currently selected

    const isActive = value === selected;

    const onClick = (_, e) => {
      const data = {
        selected: value
      };
      e.stopPropagation();
      onChange(data, e);
      handleClose();
      handleFocusInput();
    }; // Clicks on active options or disabled options should be ignored for the single select


    const isIgnored = isActive || isDisabled;
    return React__default.cloneElement(child, _objectSpread2({}, child.props, {
      onClick: isIgnored ? onIgnoredClick : onClick,
      active: isActive
    }));
  });
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, children);
};

Menu$2.defaultProps = {
  empty: ''
};
Menu$2.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  empty: propTypes__default.node,
  handleClose: propTypes__default.func,
  handleFocusInput: propTypes__default.func,
  options: propTypes__default.node,
  selected: propTypes__default.string,
  onChange: propTypes__default.func
};

const FilterableMenu$2 = ({
  dataTest,
  options,
  onChange,
  selected,
  empty,
  handleClose,
  handleFocusInput,
  placeholder,
  noMatchText
}) => /*#__PURE__*/React__default.createElement(FilterableMenu, {
  dataTest: dataTest,
  options: options,
  onChange: onChange,
  selected: selected,
  empty: empty,
  handleClose: handleClose,
  handleFocusInput: handleFocusInput,
  placeholder: placeholder,
  noMatchText: noMatchText,
  Menu: Menu$2
});

FilterableMenu$2.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  noMatchText: propTypes__default.string.isRequired,
  empty: propTypes__default.node,
  handleClose: propTypes__default.func,
  handleFocusInput: propTypes__default.func,
  options: propTypes__default.node,
  placeholder: propTypes__default.string,
  selected: propTypes__default.string,
  onChange: propTypes__default.func
};

/**
 * @module
 *
 * @param {SingleSelect.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { SingleSelect } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/select.md|Design system}
 */

const SingleSelect = ({
  className,
  selected,
  tabIndex,
  maxHeight,
  inputMaxHeight,
  onChange,
  onFocus,
  onBlur,
  loading,
  error,
  warning,
  valid,
  disabled,
  children,
  clearable,
  clearText,
  filterable,
  filterPlaceholder,
  placeholder,
  prefix,
  empty,
  loadingText,
  noMatchText,
  initialFocus,
  dense,
  dataTest
}) => {
  // If the select is filterable, use a filterable menu
  const menu = filterable ? /*#__PURE__*/React__default.createElement(FilterableMenu$2, {
    dataTest: dataTest,
    empty: empty,
    noMatchText: noMatchText,
    placeholder: filterPlaceholder
  }) : /*#__PURE__*/React__default.createElement(Menu$2, {
    empty: empty,
    dataTest: dataTest
  });
  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["4294070700", [theme.spacers.dp4]]]) + " " + "root"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["4294070700", [theme.spacers.dp4]]]) + " " + "root-input"
  }, /*#__PURE__*/React__default.createElement(Select, {
    className: className,
    selected: selected,
    input: /*#__PURE__*/React__default.createElement(Input$2, {
      clearable: clearable,
      clearText: clearText,
      dataTest: dataTest,
      placeholder: placeholder,
      prefix: prefix,
      inputMaxHeight: inputMaxHeight
    }),
    menu: menu,
    tabIndex: tabIndex,
    maxHeight: maxHeight,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    error: error,
    warning: warning,
    valid: valid,
    disabled: disabled,
    initialFocus: initialFocus,
    dense: dense
  }, children, loading && /*#__PURE__*/React__default.createElement(Loading, {
    message: loadingText,
    dataTest: "".concat(dataTest, "-loading")
  }))), /*#__PURE__*/React__default.createElement(uiIcons.StatusIcon, {
    error: error,
    valid: valid,
    warning: warning
  }), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "4294070700",
    dynamic: [theme.spacers.dp4]
  }, [".root.__jsx-style-dynamic-selector{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".root-input.__jsx-style-dynamic-selector{margin-right:".concat(theme.spacers.dp4, ";-webkit-flex:1;-ms-flex:1;flex:1;}")]));
};

SingleSelect.defaultProps = {
  selected: '',
  dataTest: 'dhis2-uicore-singleselect'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {function} [onChange]
 * @prop {String} [selected]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 * @prop {Node} [children]
 * @prop {boolean} [disabled]
 * @prop {boolean} [dense]
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, `loading`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {boolean} [initialFocus]
 * @prop {string} [clearText] - Only required if clearable is true
 * @prop {boolean} [clearable]
 * @prop {Node} [empty]
 * @prop {string} [filterPlaceholder]
 * @prop {boolean} [filterable]
 * @prop {string} [loadingText]
 * @prop {string} [maxHeight]
 * @prop {string} [inputMaxHeight]
 * @prop {string} [noMatchText] - Only required if filterable is true
 * @prop {string} [placeholder]
 * @prop {string} [prefix]
 * @prop {string} [dataTest]
 */

SingleSelect.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  clearText: propTypes__default.requiredIf(props => props.clearable, propTypes__default.string),
  clearable: propTypes__default.bool,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  disabled: propTypes__default.bool,
  empty: propTypes__default.node,
  error: theme.sharedPropTypes.statusPropType,
  filterPlaceholder: propTypes__default.string,
  filterable: propTypes__default.bool,
  initialFocus: propTypes__default.bool,
  inputMaxHeight: propTypes__default.string,
  loading: propTypes__default.bool,
  loadingText: propTypes__default.string,
  maxHeight: propTypes__default.string,
  noMatchText: propTypes__default.requiredIf(props => props.filterable, propTypes__default.string),
  placeholder: propTypes__default.string,
  prefix: propTypes__default.string,
  selected: propTypes__default.string,
  tabIndex: propTypes__default.string,
  valid: theme.sharedPropTypes.statusPropType,
  warning: theme.sharedPropTypes.statusPropType,
  onBlur: propTypes__default.func,
  onChange: propTypes__default.func,
  onFocus: propTypes__default.func
};

/**
 * @module
 *
 * @param {SingleSelectOption.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { SingleSelectOption } from '@dhis2/ui-core'
 *
 */

const SingleSelectOption = ({
  label,
  active,
  disabled,
  onClick: _onClick,
  className,
  dataTest,
  value
}) => /*#__PURE__*/React__default.createElement("div", {
  onClick: e => _onClick({}, e),
  "data-test": dataTest,
  "data-value": value,
  "data-label": label,
  className: _JSXStyle.dynamic([["2046100779", [theme.colors.grey900, theme.spacers.dp8, theme.spacers.dp12, theme.colors.grey200, theme.colors.teal700, theme.colors.white, theme.colors.grey500]]]) + " " + (cx(className, {
    disabled,
    active
  }) || "")
}, label, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2046100779",
  dynamic: [theme.colors.grey900, theme.spacers.dp8, theme.spacers.dp12, theme.colors.grey200, theme.colors.teal700, theme.colors.white, theme.colors.grey500]
}, ["div.__jsx-style-dynamic-selector{cursor:pointer;font-size:14px;-webkit-text-decoration:none;text-decoration:none;color:".concat(theme.colors.grey900, ";padding:").concat(theme.spacers.dp8, " ").concat(theme.spacers.dp12, ";}"), "div.__jsx-style-dynamic-selector:hover{background-color:".concat(theme.colors.grey200, ";}"), "div.__jsx-style-dynamic-selector:active,div.active.__jsx-style-dynamic-selector{background-color:".concat(theme.colors.teal700, ";color:").concat(theme.colors.white, ";cursor:auto;}"), "div.disabled.__jsx-style-dynamic-selector{color:".concat(theme.colors.grey500, ";cursor:not-allowed;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}"), "div.disabled.__jsx-style-dynamic-selector:hover{background-color:initial;}"]));

SingleSelectOption.defaultProps = {
  dataTest: 'dhis2-uicore-singleselectoption'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} value
 * @prop {string} label
 * @prop {string} [className]
 * @prop {function} [onClick]
 * @prop {boolean} [active]
 * @prop {boolean} [disabled]
 * @prop {string} [dataTest]
 */

SingleSelectOption.propTypes = {
  label: propTypes__default.string.isRequired,
  value: propTypes__default.string.isRequired,
  active: propTypes__default.bool,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  disabled: propTypes__default.bool,
  onClick: propTypes__default.func
};

/**
 * @module
 * @param {StackedTableHead.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableHead } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

const StackedTableHead = ({
  children,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("thead", {
  "data-test": dataTest,
  className: "jsx-1150407268" + " " + (className || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1150407268"
}, ["thead.jsx-1150407268{display:none;}"]));
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [children]
 * Has to be instance of StackedTableRowHead
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

StackedTableHead.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};
StackedTableHead.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtablehead'
};

const isChildTableHead = child => child.type === StackedTableHead;

const extractChildrenProp = component => component.props.children;

const extractRowsFromTableChildren = children => React__default.Children.toArray(children).filter(isChildTableHead) // extract table head children (rows)
.map(extractChildrenProp) // when there are multiple header rows,
// children will come as arrays
.reduce((flattened, row) => Array.isArray(row) ? [...flattened, ...row] : [...flattened, row], []) // extract table row children (cells),
// will return an array with arrays of cells
.map(extractChildrenProp);

const calculateColumnCount = row => Array.isArray(row) ? row.reduce((total, col) => // make sure to take col span into account
col.props.colSpan ? total + parseInt(col.props.colSpan, 10) : total + 1, 0) : 1;

const mapCellsToLabels = rowChildren => {
  let labels = []; // in case there's only one cell, the children are not an array

  const row = Array.isArray(rowChildren) ? rowChildren : [rowChildren]; // Using a for loop here to be able to increment "i"
  // when a cell has a colspan prop by the colspan number

  for (let i = 0, count = row.length; i < count; ++i) {
    const cell = row[i];
    const colSpan = cell.props.colSpan ? parseInt(cell.props.colSpan, 10) : 1;
    const label = extractLabelFromCell(cell); // Add a label entry for each column

    labels = [...labels, ...Array(colSpan).fill(label)];
  }

  return labels;
};

const extractLabelFromCell = cell => !cell.props.hideResponsiveLabel ? cell.props.children : '';

const combineRowLables = (columnCount, rowCount, headerLabels) => // create array with length of column count
Array(columnCount).fill('').reduce((labels, _, colIndex) => {
  // an array with all labels for a column
  const colLabels = // create array with length of rows
  Array(rowCount).fill('') // get label for current row & col
  .map((__, rowIndex) => headerLabels[rowIndex][colIndex]) // remove empty ones
  .filter(val => val);
  return [...labels, colLabels.join(' / ')];
}, []);

const extractHeaderLabels = children => {
  if (React__default.Children.count(children) === 0) return [];
  const rows = extractRowsFromTableChildren(children);
  if (!rows.length) return [];
  const rowCount = rows.length;
  const columnCount = calculateColumnCount(rows[0]);
  const headerLabels = rows.map(mapCellsToLabels);
  return combineRowLables(columnCount, rowCount, headerLabels);
};

const TableContext = React.createContext({
  headerLabels: []
});
const {
  Provider,
  Consumer
} = TableContext;

const Table = ({
  children,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("table", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["4278890465", [theme.colors.white, theme.colors.grey900]]]) + " " + (className || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "4278890465",
  dynamic: [theme.colors.white, theme.colors.grey900]
}, ["table.__jsx-style-dynamic-selector{display:block;border:0;background-color:".concat(theme.colors.white, ";min-width:100%;text-align:left;border-collapse:collapse;vertical-align:top;color:").concat(theme.colors.grey900, ";}")]));
Table.propTypes = {
  children: propTypes__default.node.isRequired,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};

/**
 * @module
 * @param {StackedTable.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTable } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

const StackedTable = ({
  children,
  className,
  dataTest,
  headerLabels
}) => {
  const contextHeaderLabels = extractHeaderLabels(children);
  const context = {
    headerLabels: headerLabels || contextHeaderLabels
  };
  return /*#__PURE__*/React__default.createElement(Provider, {
    value: context
  }, /*#__PURE__*/React__default.createElement(Table, {
    className: className,
    dataTest: dataTest
  }, children));
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 * @prop {string[]} [headerLabels]
 * If a specific column should not have a header,
 * an empty string must be provided
 */

StackedTable.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  headerLabels: propTypes__default.arrayOf(propTypes__default.string)
};
StackedTable.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtable'
};

/**
 * @module
 * @param {StackedTableBody.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableBody } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

const StackedTableBody = ({
  children,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("tbody", {
  "data-tset": dataTest,
  className: "jsx-4146628131" + " " + (className || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "4146628131"
}, ["tbody.jsx-4146628131{display:block;}"]));
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} [children]
 * Should only be StackedTableCell or StackedTableCellHead
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

StackedTableBody.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};
StackedTableBody.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtablebody'
};

const ContentWithTitle = ({
  title,
  children
}) => /*#__PURE__*/React__default.createElement(React.Fragment, null, title && /*#__PURE__*/React__default.createElement("span", {
  className: _JSXStyle.dynamic([["215664166", [theme.colors.grey700]]]) + " " + "title"
}, title), /*#__PURE__*/React__default.createElement("span", {
  className: _JSXStyle.dynamic([["215664166", [theme.colors.grey700]]]) + " " + "content"
}, children), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "215664166",
  dynamic: [theme.colors.grey700]
}, [".title.__jsx-style-dynamic-selector{display:block;white-space:normal;min-height:24px;font-size:13px;line-height:16px;padding:8px 0 4px;font-weight:normal;color:".concat(theme.colors.grey700, ";}"), ".content.__jsx-style-dynamic-selector{display:block;padding:0 0 8px 0;font-size:14px;line-height:18px;}", ".content.__jsx-style-dynamic-selector:first-child{padding-top:8px;padding-bottom:8px;}"]));
ContentWithTitle.propTypes = {
  children: propTypes__default.node.isRequired,
  title: propTypes__default.string
};

/**
 * @module
 * @param {StackedTableCell.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableCell } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

const StackedTableCell = ({
  children,
  className,
  colSpan,
  column,
  dataTest,
  headerLabels,
  hideTitle,
  rowSpan,
  title
}) => {
  const cellTitle = title || headerLabels[column] || '';
  const realTitle = hideTitle ? '' : cellTitle;
  return /*#__PURE__*/React__default.createElement("td", {
    colSpan: colSpan,
    rowSpan: rowSpan,
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["1368473511", [theme.colors.grey300]]]) + " " + (className || "")
  }, /*#__PURE__*/React__default.createElement(ContentWithTitle, {
    title: realTitle
  }, children), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "1368473511",
    dynamic: [theme.colors.grey300]
  }, ["td.__jsx-style-dynamic-selector{border-bottom:1px solid ".concat(theme.colors.grey300, ";padding:0 12px;font-size:14px;width:100%;display:block;}"), "td.__jsx-style-dynamic-selector:last-child{border-bottom:0;}"]));
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [colSpan]
 * @prop {number} [column]
 * @prop {string} [dataTest]
 * @prop {boolean} [hideTitle]
 * @prop {boolean} [rowSpan]
 * @prop {string} [title]
 */

StackedTableCell.propTypes = {
  children: propTypes$1.node,
  className: propTypes$1.string,
  colSpan: propTypes$1.string,
  column: propTypes$1.number,
  dataTest: propTypes$1.string,
  headerLabels: propTypes$1.arrayOf(propTypes$1.string),
  hideTitle: propTypes$1.bool,
  rowSpan: propTypes$1.string,
  title: propTypes$1.string
};
StackedTableCell.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtablecell',
  headerLabels: []
};

/**
 * @module
 * @param {StackedTableCellHead.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableCellHead } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

const StackedTableCellHead = ({
  children,
  className,
  colSpan,
  dataTest,
  rowSpan
}) => /*#__PURE__*/React__default.createElement("th", {
  colSpan: colSpan,
  rowSpan: rowSpan,
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["178822310", [theme.colors.grey300]]]) + " " + (className || "")
}, children && /*#__PURE__*/React__default.createElement("div", {
  className: _JSXStyle.dynamic([["178822310", [theme.colors.grey300]]])
}, children), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "178822310",
  dynamic: [theme.colors.grey300]
}, ["th.__jsx-style-dynamic-selector{border-bottom:1px solid ".concat(theme.colors.grey300, ";padding:0 12px;}"), "div.__jsx-style-dynamic-selector{min-height:36px;}"]));
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [children]
 * Can be left empty to hide titles for all columns
 * @prop {string} [className]
 * @prop {string} [colSpan]
 * @prop {string} [dataTest]
 * @prop {string} [rowSpan]
 */

StackedTableCellHead.propTypes = {
  children: propTypes__default.string,
  className: propTypes__default.string,
  colSpan: propTypes__default.string,
  dataTest: propTypes__default.string,
  rowSpan: propTypes__default.string
};
StackedTableCellHead.defaultProps = {
  children: '',
  dataTest: 'dhis2-uicore-stackedtablecellhead'
};

/**
 * @module
 * @param {StackedTableFoot.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableFoot } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

const StackedTableFoot = ({
  children,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("tfoot", {
  "data-test": dataTest,
  className: "jsx-3912324960" + " " + (className || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3912324960"
}, ["tfoot.jsx-3912324960{display:block;margin-top:32px;}"]));
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [children]
 * Has to be instance of StackedTableRow
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

StackedTableFoot.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};
StackedTableFoot.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtablefoot'
};

const addColNumToChildren = children => {
  let curCol = 0;
  return React.Children.map(children, child => {
    const column = child.props.column || curCol;
    const colSpan = child.props.colSpan ? parseInt(child.props.colSpan, 10) : 1;
    curCol += colSpan;
    return React.cloneElement(child, {
      column
    });
  });
};

const supplyHeaderLabelsToChildren = (headerLabels, children) => {
  return React.Children.map(children, child => {
    return React.cloneElement(child, {
      headerLabels
    });
  });
};

/**
 * @module
 * @param {StackedTableRow.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableRow } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

const StackedTableRow = ({
  children,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("tr", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["2003961452", [theme.colors.grey300, theme.colors.white]]]) + " " + (className || "")
}, /*#__PURE__*/React__default.createElement(Consumer, null, ({
  headerLabels
}) => supplyHeaderLabelsToChildren(headerLabels, addColNumToChildren(children))), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2003961452",
  dynamic: [theme.colors.grey300, theme.colors.white]
}, ["tr.__jsx-style-dynamic-selector{min-height:45px;display:block;border:1px solid ".concat(theme.colors.grey300, ";}"), "tr.__jsx-style-dynamic-selector:nth-child(even){background:".concat(theme.colors.white, ";}"), "thead>tr.__jsx-style-dynamic-selector,tbody>tr.__jsx-style-dynamic-selector{min-height:36px;}", "tr.__jsx-style-dynamic-selector+tr.__jsx-style-dynamic-selector{margin-top:32px;}"]));
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} [children]
 * Has to be instance of StackedTableCell or StackedTableCellHead
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

StackedTableRow.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};
StackedTableRow.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtablerow'
};

/**
 * @module
 * @param {StackedTableRowHead.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableRowHead } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

const StackedTableRowHead = ({
  children,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement(StackedTableRow, {
  className: className,
  dataTest: dataTest
}, children);
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} [children]
 * Has to be instance of StackedTableCellHead
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

StackedTableRowHead.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};
StackedTableRowHead.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtablerowhead'
};

const rightButton = {
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2502148942"
  }, ["button.jsx-2502148942{padding:0 ".concat(theme.spacers.dp12, ";}")]),
  className: "jsx-2502148942"
};
/**
 * @module
 *
 * @param {SplitButton.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { SplitButton } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/button.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/splitbutton-basic--default|Storybook}
 */

class SplitButton extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      open: false
    });

    _defineProperty(this, "anchorRef", React__default.createRef());

    _defineProperty(this, "onClick", (payload, event) => {
      if (this.props.onClick) {
        this.props.onClick({
          name: payload.name,
          value: payload.value,
          open: this.state.open
        }, event);
      }
    });

    _defineProperty(this, "onToggle", () => this.setState({
      open: !this.state.open
    }));
  }

  render() {
    const {
      open
    } = this.state;
    const {
      component,
      children,
      className,
      name,
      value,
      icon,
      small,
      large,
      primary,
      secondary,
      destructive,
      disabled,
      type,
      tabIndex,
      dataTest,
      initialFocus
    } = this.props;
    const arrow = open ? /*#__PURE__*/React__default.createElement(uiIcons.ArrowUp, null) : /*#__PURE__*/React__default.createElement(uiIcons.ArrowDown, null);
    return /*#__PURE__*/React__default.createElement("div", {
      ref: this.anchorRef,
      "data-test": dataTest,
      className: "jsx-4260486793"
    }, /*#__PURE__*/React__default.createElement(Button, {
      name: name,
      value: value,
      icon: icon,
      small: small,
      large: large,
      primary: primary,
      secondary: secondary,
      destructive: destructive,
      disabled: disabled,
      onClick: this.onClick,
      type: type,
      tabIndex: tabIndex,
      className: cx(className),
      initialFocus: initialFocus,
      dataTest: "".concat(dataTest, "-button")
    }, children), /*#__PURE__*/React__default.createElement(Button, {
      name: name,
      value: value,
      icon: icon,
      small: small,
      large: large,
      primary: primary,
      secondary: secondary,
      destructive: destructive,
      disabled: disabled,
      onClick: this.onToggle,
      type: type,
      tabIndex: tabIndex,
      className: cx(className, rightButton.className),
      dataTest: "".concat(dataTest, "-toggle")
    }, arrow), open && /*#__PURE__*/React__default.createElement(Layer, {
      onClick: this.onToggle,
      transparent: true
    }, /*#__PURE__*/React__default.createElement(Popper, {
      dataTest: "".concat(dataTest, "-menu"),
      placement: "bottom-end",
      reference: this.anchorRef
    }, component)), rightButton.styles, /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "4260486793"
    }, ["div.jsx-4260486793{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;position:relative;color:inherit;white-space:nowrap;}", "div.jsx-4260486793>button:first-child{border-top-right-radius:0;border-bottom-right-radius:0;border-right:0;}", "div.jsx-4260486793>button:last-child{border-top-left-radius:0;border-bottom-left-radius:0;}"]));
  }

}

SplitButton.defaultProps = {
  dataTest: 'dhis2-uicore-splitbutton'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Element} [component]
 * @prop {string} [children]
 * @prop {string} [className]
 * @prop {string} [name]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 * @prop {function} [onClick]
 * @prop {Element} [icon]
 * @prop {boolean} [small] - `small` and `large` are mutually exclusive
 * @prop {boolean} [large]
 * @prop {string} [type] Type of button: `submit`, `reset`, or
 * `button`
 * @prop {boolean } [primary] - `primary`, `secondary`, and
 * `destructive` are mutually exclusive boolean props
 * @prop {boolean } [secondary]
 * @prop {boolean } [destructive]
 * @prop {boolean } [disabled]
 * @prop {boolean} [initialFocus] Grants the button the initial focus
 * @prop {string} [dataTest]
 */

SplitButton.propTypes = {
  children: propTypes__default.string,
  className: propTypes__default.string,
  component: propTypes__default.element,
  dataTest: propTypes__default.string,
  destructive: theme.sharedPropTypes.buttonVariantPropType,
  disabled: propTypes__default.bool,
  icon: propTypes__default.element,
  initialFocus: propTypes__default.bool,
  large: theme.sharedPropTypes.sizePropType,
  name: propTypes__default.string,
  primary: theme.sharedPropTypes.buttonVariantPropType,
  secondary: theme.sharedPropTypes.buttonVariantPropType,
  small: theme.sharedPropTypes.sizePropType,
  tabIndex: propTypes__default.string,
  type: propTypes__default.oneOf(['submit', 'reset', 'button']),
  value: propTypes__default.string,
  onClick: propTypes__default.func
};

/**
 * @module
 *
 * @param {Switch.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Switch } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/switch.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/switch--default|Storybook}
 */

class Switch extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "ref", React.createRef());

    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(), e);
      }
    });

    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(), e);
      }
    });

    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(), e);
      }
    });
  }

  componentDidMount() {
    if (this.props.initialFocus) {
      this.ref.current.focus();
    }
  }

  createHandlerPayload() {
    return {
      value: this.props.value,
      name: this.props.name,
      checked: !this.props.checked
    };
  }

  render() {
    const {
      checked = false,
      className,
      disabled,
      error,
      label,
      name,
      tabIndex,
      valid,
      value,
      warning,
      dense,
      dataTest
    } = this.props;
    const classes = cx({
      checked,
      disabled,
      valid,
      error,
      warning,
      dense
    });
    return /*#__PURE__*/React__default.createElement("label", {
      "data-test": dataTest,
      className: _JSXStyle.dynamic([["2828389896", [theme.colors.grey900, theme.theme.disabled, theme.colors.blue600]]]) + " " + (cx(className, {
        disabled,
        dense
      }) || "")
    }, /*#__PURE__*/React__default.createElement("input", {
      type: "checkbox",
      ref: this.ref,
      name: name,
      value: value,
      checked: checked,
      disabled: disabled,
      tabIndex: tabIndex,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      className: _JSXStyle.dynamic([["2828389896", [theme.colors.grey900, theme.theme.disabled, theme.colors.blue600]]])
    }), /*#__PURE__*/React__default.createElement("div", {
      className: _JSXStyle.dynamic([["2828389896", [theme.colors.grey900, theme.theme.disabled, theme.colors.blue600]]]) + " " + (cx('icon', {
        dense
      }) || "")
    }, /*#__PURE__*/React__default.createElement(uiIcons.SwitchRegular, {
      className: classes
    })), label, /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "2828389896",
      dynamic: [theme.colors.grey900, theme.theme.disabled, theme.colors.blue600]
    }, ["label.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;cursor:pointer;pointer-events:all;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:".concat(theme.colors.grey900, ";font-size:16px;line-height:20px;}"), "label.dense.__jsx-style-dynamic-selector{font-size:14px;line-height:16px;}", "label.disabled.__jsx-style-dynamic-selector{cursor:not-allowed;color:".concat(theme.theme.disabled, ";}"), "input.__jsx-style-dynamic-selector{opacity:0;pointer-events:none;position:absolute;}", ".icon.__jsx-style-dynamic-selector{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;margin-right:5px;border:2px solid transparent;padding:1px;border-radius:14px;}", "label.dense.__jsx-style-dynamic-selector .icon.__jsx-style-dynamic-selector{margin-right:3px;border-radius:12px;}", "input.__jsx-style-dynamic-selector:focus+.icon.__jsx-style-dynamic-selector{border-color:".concat(theme.colors.blue600, ";}")]));
  }

}

Switch.defaultProps = {
  dataTest: 'dhis2-uicore-switch'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [value]
 * @prop {Node} [label]
 * @prop {function} [onChange] - called with the signature `object, event`
 * @prop {string} [name]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [checked]
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 *
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {string} [dataTest]
 */

Switch.propTypes = {
  checked: propTypes__default.bool,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  disabled: propTypes__default.bool,
  error: theme.sharedPropTypes.statusPropType,
  initialFocus: propTypes__default.bool,
  label: propTypes__default.node,
  name: propTypes__default.string,
  tabIndex: propTypes__default.string,
  valid: theme.sharedPropTypes.statusPropType,
  value: propTypes__default.string,
  warning: theme.sharedPropTypes.statusPropType,
  onBlur: propTypes__default.func,
  onChange: propTypes__default.func,
  onFocus: propTypes__default.func
};

/**
 * @module
 * @param {Tab.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Tab } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/tab.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/tabs--default-fluid|Storybook}
 */

const Tab = ({
  icon,
  onClick,
  selected,
  disabled,
  children,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("button", {
  onClick: disabled ? undefined : event => onClick({}, event),
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["1376158693", [theme.colors.grey400, theme.colors.grey600, theme.colors.grey600, theme.colors.grey100, theme.colors.grey200, theme.theme.primary700, theme.theme.primary700, theme.theme.primary700, theme.colors.grey500, theme.colors.grey500]]]) + " " + "".concat(cx('tab', className, {
    selected,
    disabled
  }))
}, icon, /*#__PURE__*/React__default.createElement("span", {
  className: _JSXStyle.dynamic([["1376158693", [theme.colors.grey400, theme.colors.grey600, theme.colors.grey600, theme.colors.grey100, theme.colors.grey200, theme.theme.primary700, theme.theme.primary700, theme.theme.primary700, theme.colors.grey500, theme.colors.grey500]]])
}, children), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1376158693",
  dynamic: [theme.colors.grey400, theme.colors.grey600, theme.colors.grey600, theme.colors.grey100, theme.colors.grey200, theme.theme.primary700, theme.theme.primary700, theme.theme.primary700, theme.colors.grey500, theme.colors.grey500]
}, ["button.__jsx-style-dynamic-selector{-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;vertical-align:bottom;height:100%;padding:16px 16px 11px;background-color:transparent;outline:none;border:none;border-bottom:1px solid ".concat(theme.colors.grey400, ";color:").concat(theme.colors.grey600, ";font-size:14px;line-height:20px;-webkit-transition:all 150ms ease-in-out;transition:all 150ms ease-in-out;-webkit-transition-property:color,background-color;transition-property:color,background-color;cursor:pointer;}"), ".fixed>button.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", "button.__jsx-style-dynamic-selector::after{content:' ';display:block;position:absolute;bottom:-1px;left:0;height:4px;width:100%;-webkit-transition:background-color 150ms ease-in-out;transition:background-color 150ms ease-in-out;background-color:transparent;}", "span.__jsx-style-dynamic-selector{max-width:320px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;-webkit-transition:fill 150ms ease-in-out;transition:fill 150ms ease-in-out;}", "button.__jsx-style-dynamic-selector>svg{fill:".concat(theme.colors.grey600, ";width:14px;height:14px;margin:0 4px 0 0;}"), "button.__jsx-style-dynamic-selector:hover{background-color:".concat(theme.colors.grey100, ";}"), "button.__jsx-style-dynamic-selector:active{background-color:".concat(theme.colors.grey200, ";}"), "button.selected.__jsx-style-dynamic-selector{color:".concat(theme.theme.primary700, ";}"), "button.selected.__jsx-style-dynamic-selector::after{background-color:".concat(theme.theme.primary700, ";}"), "button.selected.__jsx-style-dynamic-selector>svg{fill:".concat(theme.theme.primary700, ";}"), "button.disabled.__jsx-style-dynamic-selector{color:".concat(theme.colors.grey500, ";cursor:not-allowed;}"), "button.disabled.__jsx-style-dynamic-selector:hover,button.selected.__jsx-style-dynamic-selector:hover{background-color:transparent;}", "button.disabled.__jsx-style-dynamic-selector>svg{fill:".concat(theme.colors.grey500, ";}")]));

Tab.defaultProps = {
  dataTest: 'dhis2-uicore-tab'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Element} [icon]
 * @prop {function} [onClick]
 * @prop {boolean} [selected]
 * @prop {boolean} [disabled]
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

Tab.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  disabled: propTypes__default.bool,
  icon: propTypes__default.element,
  selected: propTypes__default.bool,
  onClick: propTypes__default.func
};

let horizontalScrollbarHeight;
const className = '__vertical-scrollbar-height-test__';
const styles$3 = "\n    .".concat(className, " {\n        position: absolute;\n        top: -9999px;\n        width: 100px;\n        height: 100px;\n        overflow-x: scroll;\n    }\n    .").concat(className, "::-webkit-scrollbar {\n        display: none;\n    }\n");
function detectHorizontalScrollbarHeight() {
  if (horizontalScrollbarHeight) {
    return horizontalScrollbarHeight;
  }

  const style = document.createElement('style');
  style.innerHTML = styles$3;
  const el = document.createElement('div');
  el.classList.add(className);
  document.body.appendChild(style);
  document.body.appendChild(el);
  horizontalScrollbarHeight = el.offsetHeight - el.clientHeight;
  document.body.removeChild(style);
  document.body.removeChild(el);
  return horizontalScrollbarHeight;
}

const DURATION = 250;
const SCROLL_STEP = 0.5;
function animatedSideScroll(scrollBox, callback, goBackwards = false) {
  const startValue = scrollBox.scrollLeft;
  const endValue = getEndValue(scrollBox, startValue, goBackwards);
  const change = endValue - startValue;
  const step = createFrameStepper({
    scrollBox,
    callback,
    startValue,
    endValue,
    change
  });
  window.requestAnimationFrame(step);
}

function getEndValue(scrollBox, startValue, goBackwards) {
  const scrollDistance = scrollBox.clientWidth * SCROLL_STEP;
  const inverter = goBackwards ? -1 : 1;
  return Math.floor(startValue + scrollDistance * inverter);
}

function createFrameStepper({
  scrollBox,
  callback,
  startValue,
  endValue,
  change
}) {
  let startTimestamp, elapsedTime, scrollValue;
  return function step(timestamp) {
    if (!startTimestamp) {
      startTimestamp = timestamp;
    }

    elapsedTime = timestamp - startTimestamp;
    scrollValue = easeInOutQuad({
      currentTime: elapsedTime,
      DURATION,
      startValue,
      change
    });

    if (elapsedTime >= DURATION) {
      if (scrollValue !== endValue) {
        scrollBox.scrollLeft = endValue;
      }

      callback && callback();
    } else {
      scrollBox.scrollLeft = scrollValue;
      window.requestAnimationFrame(step);
    }
  };
}

function easeInOutQuad({
  currentTime,
  startValue,
  change
}) {
  return (currentTime /= DURATION / 2) < 1 ? change / 2 * currentTime * currentTime + startValue : -change / 2 * (--currentTime * (currentTime - 2) - 1) + startValue;
}

/**
 * @module
 * @private
 * @param {ScrollBar.PropTypes} props
 * @returns {React.Component}
 */

class ScrollBar extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "scrollBox", React.createRef());

    _defineProperty(this, "scrollArea", React.createRef());

    _defineProperty(this, "state", {
      scrolledToStart: false,
      scrolledToEnd: false
    });

    _defineProperty(this, "horizontalScrollBarHeight", detectHorizontalScrollbarHeight());

    _defineProperty(this, "scrollRight", () => this.scroll());

    _defineProperty(this, "scrollLeft", () => this.scroll(true));

    _defineProperty(this, "animatedScrollCallback", () => {
      this.toggleScrollButtonVisibility();
      this.attachSideScrollListener();
    });

    _defineProperty(this, "toggleScrollButtonVisibility", () => {
      const {
        scrollLeft,
        offsetWidth
      } = this.scrollBox.current;
      const {
        offsetWidth: areaOffsetWidth
      } = this.scrollArea.current;
      const scrolledToStart = scrollLeft <= 0;
      const scrolledToEnd = scrollLeft + offsetWidth >= areaOffsetWidth;

      if (this.state.scrolledToStart !== scrolledToStart || this.state.scrolledToEnd !== scrolledToEnd) {
        this.setState({
          scrolledToStart,
          scrolledToEnd
        });
      }
    });
  }

  componentDidMount() {
    this.scrollSelectedTabIntoView();
    this.attachSideScrollListener();
  }

  componentWillUnmount() {
    this.removeSideScrollListener();
  }

  scroll(goBackwards) {
    this.removeSideScrollListener();
    animatedSideScroll(this.scrollBox.current, this.animatedScrollCallback, goBackwards);
  }

  scrollSelectedTabIntoView() {
    const scrollBoxEl = this.scrollBox.current;
    const tab = scrollBoxEl.querySelector('.tab.selected');

    if (tab) {
      const tabEnd = tab.offsetLeft + tab.offsetWidth;

      if (tabEnd > scrollBoxEl.offsetWidth) {
        scrollBoxEl.scrollLeft = tabEnd - scrollBoxEl.offsetWidth;
      }
    }
  }

  attachSideScrollListener() {
    this.scrollBox.current.addEventListener('scroll', this.toggleScrollButtonVisibility);
  }

  removeSideScrollListener() {
    this.scrollBox.current.removeEventListener('scroll', this.toggleScrollButtonVisibility);
  }

  render() {
    const {
      scrolledToStart,
      scrolledToEnd
    } = this.state;
    const {
      children,
      className,
      dataTest
    } = this.props;
    return /*#__PURE__*/React__default.createElement("div", {
      "data-test": dataTest,
      className: "jsx-4061674243 " + _JSXStyle.dynamic([["1341056994", [theme.colors.white, theme.colors.grey400, theme.colors.grey600, theme.colors.grey100, theme.colors.grey200, theme.colors.grey500]]]) + " " + (cx('scroll-bar', className) || "")
    }, /*#__PURE__*/React__default.createElement("button", {
      onClick: scrolledToStart ? undefined : this.scrollLeft,
      className: "jsx-4061674243 " + _JSXStyle.dynamic([["1341056994", [theme.colors.white, theme.colors.grey400, theme.colors.grey600, theme.colors.grey100, theme.colors.grey200, theme.colors.grey500]]]) + " " + (cx('scroll-button', {
        disabled: scrolledToStart
      }) || "")
    }, /*#__PURE__*/React__default.createElement(uiIcons.ChevronLeft, null)), /*#__PURE__*/React__default.createElement("div", {
      className: "jsx-4061674243 " + _JSXStyle.dynamic([["1341056994", [theme.colors.white, theme.colors.grey400, theme.colors.grey600, theme.colors.grey100, theme.colors.grey200, theme.colors.grey500]]]) + " " + "scroll-box-clipper"
    }, /*#__PURE__*/React__default.createElement("div", {
      ref: this.scrollBox,
      className: "jsx-4061674243 " + _JSXStyle.dynamic([["1341056994", [theme.colors.white, theme.colors.grey400, theme.colors.grey600, theme.colors.grey100, theme.colors.grey200, theme.colors.grey500]]]) + " " + "scroll-box"
    }, /*#__PURE__*/React__default.createElement("div", {
      ref: this.scrollArea,
      className: "jsx-4061674243 " + _JSXStyle.dynamic([["1341056994", [theme.colors.white, theme.colors.grey400, theme.colors.grey600, theme.colors.grey100, theme.colors.grey200, theme.colors.grey500]]]) + " " + "scroll-area"
    }, children))), /*#__PURE__*/React__default.createElement("button", {
      onClick: scrolledToEnd ? undefined : this.scrollRight,
      className: "jsx-4061674243 " + _JSXStyle.dynamic([["1341056994", [theme.colors.white, theme.colors.grey400, theme.colors.grey600, theme.colors.grey100, theme.colors.grey200, theme.colors.grey500]]]) + " " + (cx('scroll-button', {
        disabled: scrolledToEnd
      }) || "")
    }, /*#__PURE__*/React__default.createElement(uiIcons.ChevronRight, null)), /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "4061674243"
    }, [".scroll-box.jsx-4061674243{margin-bottom:".concat(-this.horizontalScrollBarHeight, "px;}")]), /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "1341056994",
      dynamic: [theme.colors.white, theme.colors.grey400, theme.colors.grey600, theme.colors.grey100, theme.colors.grey200, theme.colors.grey500]
    }, [".scroll-bar.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}", ".scroll-button.__jsx-style-dynamic-selector{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:inherit;background-color:".concat(theme.colors.white, ";border:none;border-bottom:1px solid ").concat(theme.colors.grey400, ";outline:none;padding:16px 16px 11px 16px;cursor:pointer;}"), ".scroll-button.__jsx-style-dynamic-selector svg{width:20px;height:20px;fill:".concat(theme.colors.grey600, ";-webkit-transition:opacity 150ms ease-in-out;transition:opacity 150ms ease-in-out;opacity:1;}"), ".scroll-button.__jsx-style-dynamic-selector:hover{background-color:".concat(theme.colors.grey100, ";}"), ".scroll-button.__jsx-style-dynamic-selector:active{background-color:".concat(theme.colors.grey200, ";}"), ".scroll-button.disabled.__jsx-style-dynamic-selector{cursor:not-allowed;}", ".scroll-button.disabled.__jsx-style-dynamic-selector:hover{background-color:transparent;}", ".scroll-button.disabled.__jsx-style-dynamic-selector svg{fill:".concat(theme.colors.grey500, ";}"), ".scroll-box-clipper.__jsx-style-dynamic-selector{overflow-y:hidden;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".scroll-box.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;overflow-x:scroll;-webkit-overflow-scrolling:touch;display:-ms-flexbox;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".scroll-box.__jsx-style-dynamic-selector::-webkit-scrollbar{display:none;}", ".scroll-area.__jsx-style-dynamic-selector{position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;overflow-x:hidden;}"]));
  }

}
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} children
 * @prop {string} [className]
 */


ScrollBar.propTypes = {
  children: propTypes__default.node.isRequired,
  dataTest: propTypes__default.string.isRequired,
  className: propTypes__default.string
};

/**
 * @module
 * @private
 * @param {Object} PropTypes
 * @returns {React.Component}
 */

const Tabs = ({
  children,
  fixed,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["2678989862", [theme.colors.grey400, theme.colors.white]]]) + " " + (cx({
    fixed
  }) || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2678989862",
  dynamic: [theme.colors.grey400, theme.colors.white]
}, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;position:relative;overflow:hidden;box-shadow:inset 0 -1px 0 0 ".concat(theme.colors.grey400, ";-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;background:").concat(theme.colors.white, ";}")]));
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} children
 * @prop {boolean} [fixed]
 * @prop {string} [dataTest]
 */


Tabs.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  children: propTypes__default.node,
  fixed: propTypes__default.bool
};

/**
 * @module
 * @param {TabBar.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { TabBar } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/tab.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/tabs--default-fluid|Storybook}
 */

const TabBar = ({
  fixed,
  children,
  className,
  scrollable,
  dataTest
}) => {
  if (scrollable) {
    return /*#__PURE__*/React__default.createElement("div", {
      className: className,
      "data-test": dataTest
    }, /*#__PURE__*/React__default.createElement(ScrollBar, {
      dataTest: "".concat(dataTest, "-scrollbar")
    }, /*#__PURE__*/React__default.createElement(Tabs, {
      fixed: fixed,
      dataTest: "".concat(dataTest, "-tabs")
    }, children)));
  }

  return /*#__PURE__*/React__default.createElement("div", {
    className: className,
    "data-test": dataTest
  }, /*#__PURE__*/React__default.createElement(Tabs, {
    fixed: fixed,
    dataTest: "".concat(dataTest, "-tabs")
  }, children));
};

TabBar.defaultProps = {
  dataTest: 'dhis2-uicore-tabbar'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Tab|Array.<Tab>} [children]
 * @prop {string} [className]
 * @prop {boolean} [fixed]
 * @prop {boolean} [scrollable]
 * @prop {string} [dataTest]
 * @prop {string} [dataTest]
 */

TabBar.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  fixed: propTypes__default.bool,
  scrollable: propTypes__default.bool
};

const TableContext$1 = React.createContext({
  suppressZebraStriping: false
});
const {
  Consumer: Consumer$1,
  Provider: Provider$1
} = TableContext$1;

const tableStyles = ["table.jsx-2430604489{border:1px solid #e8edf2;background-color:#ffffff;min-width:100%;text-align:left;border-collapse:collapse;vertical-align:top;}"];
/**
 * @module
 * @param {Table.PropTypes} props
 * @returns {React.Component}
 * @example import { Table } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

tableStyles.__hash = "2430604489";
const Table$1 = ({
  children,
  className,
  dataTest,
  suppressZebraStriping
}) => /*#__PURE__*/React__default.createElement(Provider$1, {
  value: {
    suppressZebraStriping
  }
}, /*#__PURE__*/React__default.createElement("table", {
  "data-test": dataTest,
  className: "jsx-".concat(tableStyles.__hash) + " " + (className || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: tableStyles.__hash
}, tableStyles)));
Table$1.defaultProps = {
  dataTest: 'dhis2-uicore-table'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {TableHead|TableBody|TableFoot|Array.<TableHead|TableBody|TableFoot>} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 * @prop {bool} [suppressZebraStriping]
 */

Table$1.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  suppressZebraStriping: propTypes__default.bool
};

/**
 * @module
 * @param {TableBody.PropTypes} props
 * @returns {React.Component}
 * @example import { TableBody } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

const TableBody = ({
  children,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("tbody", {
  className: className,
  "data-test": dataTest
}, children);
TableBody.defaultProps = {
  dataTest: 'dhis2-uicore-tablebody'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {TableRow|Array.<TableRow>} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableBody.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};

const tableCellStyles = ["td.jsx-996330601{border-bottom:1px solid #e8edf2;font-size:14px;line-height:18px;padding:13px 12px;height:45px;}", ".dense.jsx-996330601{padding:9px 12px;height:36px;}"];
/**
 * @module
 * @param {TableCell.PropTypes} props
 * @returns {React.Component}
 * @example import { TableCell } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

tableCellStyles.__hash = "996330601";
const TableCell = ({
  className,
  children,
  colSpan,
  rowSpan,
  dense,
  dataTest
}) => /*#__PURE__*/React__default.createElement("td", {
  colSpan: colSpan,
  rowSpan: rowSpan,
  "data-test": dataTest,
  className: "jsx-".concat(tableCellStyles.__hash) + " " + (cx({
    dense
  }, className) || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: tableCellStyles.__hash
}, tableCellStyles));
TableCell.defaultProps = {
  dataTest: 'dhis2-uicore-tablecell'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [colSpan]
 * @prop {string} [rowSpan]
 * @prop {bool} [dense]
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableCell.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  colSpan: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  rowSpan: propTypes__default.string
};

const tableCellHeadStyles = ["th.jsx-1796049005{border-bottom:1px solid #e8edf2;font-size:14px;line-height:18px;padding:13px 12px;height:45px;}", ".dense.jsx-1796049005{padding:9px 12px;height:36px;}"];
/**
 * @module
 * @param {TableCellHead.PropTypes} props
 * @returns {React.Component}
 * @example import { TableCellHead } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

tableCellHeadStyles.__hash = "1796049005";
const TableCellHead = ({
  colSpan,
  rowSpan,
  dense,
  children,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("th", {
  colSpan: colSpan,
  rowSpan: rowSpan,
  "data-test": dataTest,
  className: "jsx-".concat(tableCellHeadStyles.__hash) + " " + (cx({
    dense
  }, className) || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: tableCellHeadStyles.__hash
}, tableCellHeadStyles));
TableCellHead.defaultProps = {
  dataTest: 'dhis2-uicore-tablecellhead'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [colSpan]
 * @prop {string} [rowSpan]
 * @prop {bool} [dense]
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableCellHead.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  colSpan: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  rowSpan: propTypes__default.string
};

/**
 * @module
 * @param {TableFoot.PropTypes} props
 * @returns {React.Component}
 * @example import { TableFoot } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

const TableFoot = ({
  children,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("tfoot", {
  className: className,
  "data-test": dataTest
}, children);
TableFoot.defaultProps = {
  dataTest: 'dhis2-uicore-tablefoot'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {TableRow|Array.<TableRow>} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableFoot.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};

/**
 * @module
 * @param {TableHead.PropTypes} props
 * @returns {React.Component}
 * @example import { TableHead } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

const TableHead = ({
  children,
  className,
  dataTest
}) => /*#__PURE__*/React__default.createElement("thead", {
  className: className,
  "data-test": dataTest
}, children);
TableHead.defaultProps = {
  dataTest: 'dhis2-uicore-tablehead'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {TableRowHead|Array.<TableRowHead>} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableHead.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string
};

const tableRowStyles = [".zebraStriping.jsx-3124144591:nth-child(even){background:#fbfcfd;}"];
/**
 * @module
 * @param {TableRow.PropTypes} props
 * @returns {React.Component}
 * @example import { TableRow } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

tableRowStyles.__hash = "3124144591";
const TableRow = ({
  children,
  className,
  dataTest,
  suppressZebraStriping
}) => {
  const {
    suppressZebraStriping: suppressZebraStripingFromContext
  } = React.useContext(TableContext$1);
  const zebraStriping = typeof suppressZebraStriping !== 'undefined' ? !suppressZebraStriping : !suppressZebraStripingFromContext;
  return /*#__PURE__*/React__default.createElement("tr", {
    "data-test": dataTest,
    className: "jsx-".concat(tableRowStyles.__hash) + " " + (cx(className, {
      zebraStriping
    }) || "")
  }, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: tableRowStyles.__hash
  }, tableRowStyles));
};
TableRow.defaultProps = {
  dataTest: 'dhis2-uicore-tablerow'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {TableCell|TableCellHead|Array.<TableCell|TableCellHead>} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableRow.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  suppressZebraStriping: propTypes__default.bool
};

/**
 * @module
 * @param {TableRowHead.PropTypes} props
 * @returns {React.Component}
 * @example import { TableRowHead } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

const TableRowHead = ({
  children,
  className,
  dataTest,
  suppressZebraStriping
}) => /*#__PURE__*/React__default.createElement(TableRow, {
  className: className,
  dataTest: dataTest,
  suppressZebraStriping: suppressZebraStriping
}, children);
TableRowHead.defaultProps = {
  dataTest: 'dhis2-uicore-tablerowhead'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {TableCellHead|Array.<TableCellHead>} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableRowHead.propTypes = {
  children: propTypes__default.node,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  suppressZebraStriping: propTypes__default.bool
};

const TagIcon = ({
  children,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: "jsx-3574806025"
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3574806025"
}, [".jsx-3574806025{margin-right:4px;width:12px;height:12px;overflow:hidden;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}"]));
TagIcon.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  children: propTypes__default.node
};

const TagText = ({
  children,
  dataTest
}) => /*#__PURE__*/React__default.createElement("span", {
  "data-test": dataTest,
  className: "jsx-1110058759"
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1110058759"
}, [".jsx-1110058759{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;}"]));
TagText.propTypes = {
  dataTest: propTypes__default.string.isRequired,
  children: propTypes__default.node
};

/**
 * @module
 * @param {Tag.PropTypes} props
 * @returns {React.Component}
 * @example import { Tag } from @dhis2/ui-core
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/tag.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/tag--default|Storybook}
 */

const Tag = ({
  neutral,
  negative,
  positive,
  icon,
  bold,
  className,
  dataTest,
  children
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["460111072", [theme.colors.grey300, theme.colors.grey700, theme.colors.grey900, theme.colors.red100, theme.colors.red800, theme.colors.red900, theme.colors.blue100, theme.colors.blue800, theme.colors.blue900, theme.colors.green100, theme.colors.green800, theme.colors.green900, theme.colors.grey700, theme.colors.white, theme.colors.white, theme.colors.blue800, theme.colors.blue050, theme.colors.white, theme.colors.green700, theme.colors.green050, theme.colors.white, theme.colors.red700, theme.colors.red050, theme.colors.white]]]) + " " + (cx(className, {
    neutral,
    positive,
    negative,
    bold
  }) || "")
}, icon && /*#__PURE__*/React__default.createElement(TagIcon, {
  dataTest: "".concat(dataTest, "-icon")
}, icon), /*#__PURE__*/React__default.createElement(TagText, {
  dataTest: "".concat(dataTest, "-text")
}, children), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "460111072",
  dynamic: [theme.colors.grey300, theme.colors.grey700, theme.colors.grey900, theme.colors.red100, theme.colors.red800, theme.colors.red900, theme.colors.blue100, theme.colors.blue800, theme.colors.blue900, theme.colors.green100, theme.colors.green800, theme.colors.green900, theme.colors.grey700, theme.colors.white, theme.colors.white, theme.colors.blue800, theme.colors.blue050, theme.colors.white, theme.colors.green700, theme.colors.green050, theme.colors.white, theme.colors.red700, theme.colors.red050, theme.colors.white]
}, ["div.__jsx-style-dynamic-selector{padding:5px 6px 3px;border-radius:3px;background-color:".concat(theme.colors.grey300, ";fill:").concat(theme.colors.grey700, ";color:").concat(theme.colors.grey900, ";max-width:240px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;font-size:13px;line-height:12px;height:23px;}"), ".negative.__jsx-style-dynamic-selector{background-color:".concat(theme.colors.red100, ";fill:").concat(theme.colors.red800, ";color:").concat(theme.colors.red900, ";}"), ".neutral.__jsx-style-dynamic-selector{background-color:".concat(theme.colors.blue100, ";fill:").concat(theme.colors.blue800, ";color:").concat(theme.colors.blue900, ";}"), ".positive.__jsx-style-dynamic-selector{background-color:".concat(theme.colors.green100, ";fill:").concat(theme.colors.green800, ";color:").concat(theme.colors.green900, ";}"), ".bold.__jsx-style-dynamic-selector{font-weight:700;background-color:".concat(theme.colors.grey700, ";color:").concat(theme.colors.white, ";fill:").concat(theme.colors.white, ";}"), ".bold.neutral.__jsx-style-dynamic-selector{background-color:".concat(theme.colors.blue800, ";color:").concat(theme.colors.blue050, ";fill:").concat(theme.colors.white, ";}"), ".bold.positive.__jsx-style-dynamic-selector{background-color:".concat(theme.colors.green700, ";color:").concat(theme.colors.green050, ";fill:").concat(theme.colors.white, ";}"), ".bold.negative.__jsx-style-dynamic-selector{background-color:".concat(theme.colors.red700, ";color:").concat(theme.colors.red050, ";fill:").concat(theme.colors.white, ";}")]));
const tagVariantPropType = propTypes__default.mutuallyExclusive(['neutral', 'positive', 'negative'], propTypes__default.bool);
Tag.defaultProps = {
  dataTest: 'dhis2-uicore-tag'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {boolean} [bold]
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 * @prop {Node} [icon]
 * @prop {boolean} [neutral] - `neutral`, `positive`, and
 * `negative` are mutually exclusive boolean props
 * @prop {boolean} [positive]
 * @prop {boolean} [negative]
 */

Tag.propTypes = {
  bold: propTypes__default.bool,
  children: propTypes__default.string,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  icon: propTypes__default.node,
  negative: tagVariantPropType,
  neutral: tagVariantPropType,
  positive: tagVariantPropType
};

const styles$4 = [".textarea.jsx-2672713380{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", "textarea.jsx-2672713380{box-sizing:border-box;padding:8px 12px;color:".concat(theme.colors.grey900, ";background-color:transparent;border:1px solid ").concat(theme.colors.grey500, ";border-radius:3px;box-shadow:inset 0 0 0 1px rgba(102,113,123,0.15), inset 0 1px 2px 0 rgba(102,113,123,0.1);outline:0;font-size:14px;line-height:16px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;}"), "textarea.dense.jsx-2672713380{padding:4px 12px;}", "textarea.jsx-2672713380:focus{border-color:".concat(theme.colors.teal400, ";}"), "textarea.valid.jsx-2672713380{border-color:".concat(theme.theme.valid, ";}"), "textarea.warning.jsx-2672713380{border-color:".concat(theme.theme.warning, ";}"), "textarea.error.jsx-2672713380{border-color:".concat(theme.theme.error, ";}"), "textarea.read-only.jsx-2672713380{background-color:".concat(theme.colors.grey100, ";border-color:").concat(theme.colors.grey500, ";cursor:text;}"), "textarea.disabled.jsx-2672713380{background-color:".concat(theme.colors.grey100, ";border-color:").concat(theme.colors.grey500, ";color:").concat(theme.theme.disabled, ";cursor:not-allowed;}"), ".status-icon.jsx-2672713380{-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;margin-left:".concat(theme.spacers.dp4, ";}")];
styles$4.__hash = "2672713380";

/**
 * @module
 * @param {TextArea.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { TextArea } from '@dhis2/ui-core'
 */

class TextArea extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "textareaRef", React__default.createRef());

    _defineProperty(this, "state", {
      height: 'auto'
    });

    _defineProperty(this, "textareaDimensions", {
      width: 0,
      height: 0
    });

    _defineProperty(this, "userHasResized", false);

    _defineProperty(this, "setTextareaDimensions", () => {
      const textarea = this.textareaRef.current;
      this.textareaDimensions = {
        width: textarea.clientWidth,
        height: textarea.clientHeight
      };
    });

    _defineProperty(this, "hasUserResized", () => {
      const {
        width: oldWidth,
        height: oldHeight
      } = this.textareaDimensions;
      this.setTextareaDimensions();
      const {
        width: newWidth,
        height: newHeight
      } = this.textareaDimensions;
      const userHasResized = newWidth !== oldWidth || newHeight !== oldHeight;

      if (userHasResized) {
        this.userHasResized = true;
        this.removeResizeListener();
      }
    });

    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(e), e);
      }
    });

    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(e), e);
      }
    });

    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(e), e);
      }
    });
  }

  componentDidMount() {
    this.attachResizeListener();

    if (this.props.initialFocus) {
      this.textareaRef.current.focus();
    }

    if (this.shouldDoAutoGrow()) {
      this.setHeight();
    }
  }

  componentDidUpdate(prevProps) {
    if (this.shouldDoAutoGrow() && this.props.value !== prevProps.value) {
      this.setHeight();
    }
  }

  attachResizeListener() {
    const textarea = this.textareaRef.current;
    textarea.addEventListener('mousedown', this.setTextareaDimensions);
    textarea.addEventListener('mouseup', this.hasUserResized);
  }

  removeResizeListener() {
    const textarea = this.textareaRef.current;
    textarea.removeEventListener('mousedown', this.setTextareaDimensions);
    textarea.removeEventListener('mouseup', this.hasUserResized);
  }

  setHeight() {
    const textarea = this.textareaRef.current;
    const offset = textarea.offsetHeight - textarea.clientHeight;
    const height = textarea.scrollHeight + offset + 'px';
    this.setState({
      height
    });
  }

  shouldDoAutoGrow() {
    return this.props.autoGrow && !this.userHasResized;
  }

  createHandlerPayload(e) {
    return {
      value: e.target.value,
      name: this.props.name
    };
  }

  render() {
    const {
      className,
      dense,
      disabled,
      readOnly,
      placeholder,
      name,
      valid,
      error,
      warning,
      loading,
      value,
      tabIndex,
      rows,
      width,
      resize,
      dataTest
    } = this.props;
    const {
      height
    } = this.state;
    return /*#__PURE__*/React__default.createElement("div", {
      "data-test": dataTest,
      className: "jsx-".concat(styles$4.__hash) + " " + _JSXStyle.dynamic([["3036048772", [width, height, resize]]]) + " " + (cx('textarea', className) || "")
    }, /*#__PURE__*/React__default.createElement("textarea", {
      id: name,
      name: name,
      placeholder: placeholder,
      ref: this.textareaRef,
      value: value,
      disabled: disabled,
      readOnly: readOnly,
      tabIndex: tabIndex,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onChange: this.handleChange,
      rows: rows,
      className: "jsx-".concat(styles$4.__hash) + " " + _JSXStyle.dynamic([["3036048772", [width, height, resize]]]) + " " + (cx({
        dense,
        disabled,
        error,
        valid,
        warning,
        'read-only': readOnly
      }) || "")
    }), /*#__PURE__*/React__default.createElement("div", {
      className: "jsx-".concat(styles$4.__hash) + " " + _JSXStyle.dynamic([["3036048772", [width, height, resize]]]) + " " + "status-icon"
    }, /*#__PURE__*/React__default.createElement(uiIcons.StatusIcon, {
      error: error,
      valid: valid,
      loading: loading,
      warning: warning
    })), /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: styles$4.__hash
    }, styles$4), /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "3036048772",
      dynamic: [width, height, resize]
    }, ["textarea.__jsx-style-dynamic-selector{width:".concat(width, ";height:").concat(height, ";resize:").concat(resize, ";}")]));
  }

}
TextArea.defaultProps = {
  rows: 4,
  width: '100%',
  resize: 'vertical',
  dataTest: 'dhis2-uicore-textarea'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} name
 * @prop {function} [onChange] - called with the signature `object, event`
 * @prop {function} [onBlur]
 * @prop {function} [onFocus]
 * @prop {string} [className]
 * @prop {string} [placeholder]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [dense] - Compact mode
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, and `loading`
 * are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 *
 * @prop {boolean} [autoGrow]
 * @prop {boolean} [readOnly]
 * @prop {string} [resize=vertical] - resize attribute on the textarea,
 * one of `none`, `both`, `horizontal`, `vertical`
 * @prop {number} [rows=4]
 * @prop {string} [width]
 * @prop {string} [dataTest]
 */

TextArea.propTypes = {
  autoGrow: propTypes__default.bool,
  className: propTypes__default.string,
  dataTest: propTypes__default.string,
  dense: propTypes__default.bool,
  disabled: propTypes__default.bool,
  error: theme.sharedPropTypes.statusPropType,
  initialFocus: propTypes__default.bool,
  loading: propTypes__default.bool,
  name: propTypes__default.string,
  placeholder: propTypes__default.string,
  readOnly: propTypes__default.bool,
  resize: propTypes__default.oneOf(['none', 'both', 'horizontal', 'vertical']),
  rows: propTypes__default.number,
  tabIndex: propTypes__default.string,
  valid: theme.sharedPropTypes.statusPropType,
  value: propTypes__default.string,
  warning: theme.sharedPropTypes.statusPropType,
  width: propTypes__default.string,
  onBlur: propTypes__default.func,
  onChange: propTypes__default.func,
  onFocus: propTypes__default.func
};

const TOOLTIP_OFFSET = 4;
const popperStyle = {
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2131450337"
  }, [".jsx-2131450337{z-index:".concat(theme.layers.applicationTop, ";pointer-events:none;}")]),
  className: "jsx-2131450337"
};
const offsetModifier = {
  name: 'offset',
  options: {
    offset: [0, TOOLTIP_OFFSET]
  }
};
const OPEN_DELAY = 200;
const CLOSE_DELAY = 400;
/**
 * @module
 * @param {Tooltip.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Tooltip } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/tooltip.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/tooltips--default-fluid|Storybook}
 */

class Tooltip extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      open: false
    });

    _defineProperty(this, "ref", React.createRef());

    _defineProperty(this, "openTimeout", null);

    _defineProperty(this, "closeTimeout", null);

    _defineProperty(this, "onMouseOver", () => {
      clearTimeout(this.closeTimeout);
      this.openTimeout = setTimeout(() => {
        this.setState({
          open: true
        });
      }, OPEN_DELAY);
    });

    _defineProperty(this, "onMouseOut", () => {
      clearTimeout(this.openTimeout);
      this.closeTimeout = setTimeout(() => {
        this.setState({
          open: false
        });
      }, CLOSE_DELAY);
    });
  }

  componentWillUnmount() {
    clearTimeout(this.openTimeout);
    clearTimeout(this.closeTimeout);
  }

  render() {
    const {
      children,
      className,
      content,
      dataTest,
      maxWidth,
      placement
    } = this.props;
    const {
      open
    } = this.state;
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, typeof children === 'function' ? children({
      onMouseOver: this.onMouseOver,
      onMouseOut: this.onMouseOut,
      ref: this.ref
    }) : /*#__PURE__*/React__default.createElement("span", {
      onMouseOver: this.onMouseOver,
      onMouseOut: this.onMouseOut,
      ref: this.ref,
      "data-test": "".concat(dataTest, "-reference"),
      className: _JSXStyle.dynamic([["2050605671", [maxWidth, theme.colors.grey800, theme.colors.white]]])
    }, children), open && reactDom.createPortal( /*#__PURE__*/React__default.createElement(Popper, {
      className: popperStyle.className,
      placement: placement,
      reference: this.ref,
      modifiers: [offsetModifier]
    }, /*#__PURE__*/React__default.createElement("div", {
      "data-test": "".concat(dataTest, "-content"),
      className: _JSXStyle.dynamic([["2050605671", [maxWidth, theme.colors.grey800, theme.colors.white]]]) + " " + (className || "")
    }, content)), document.body), popperStyle.styles, /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "2050605671",
      dynamic: [maxWidth, theme.colors.grey800, theme.colors.white]
    }, ["div.__jsx-style-dynamic-selector{max-width:".concat(maxWidth, "px;}"), "div.__jsx-style-dynamic-selector{padding:6px 8px;background-color:".concat(theme.colors.grey800, ";border-radius:3px;color:").concat(theme.colors.white, ";font-size:12px;line-height:16px;}")]));
  }

}

Tooltip.defaultProps = {
  dataTest: 'dhis2-uicore-tooltip',
  maxWidth: 300,
  placement: 'top',
  tag: 'span'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node|function} [children]
 * @prop {string} [className]
 * @prop {Node} [content]
 * @prop {string} [dataTest=dhis2-uicore-tooltip]
 * @prop {number} [maxWidth=300]
 * @prop {('top'|'bottom'|'right'|'left')} [placement=top]
 */

Tooltip.propTypes = {
  children: propTypes__default.oneOfType([propTypes__default.node, propTypes__default.func]),
  className: propTypes__default.string,
  content: propTypes__default.node,
  dataTest: propTypes__default.string,
  maxWidth: propTypes__default.number,
  placement: propTypes__default.oneOf(['top', 'right', 'bottom', 'left'])
};

exports.AlertBar = AlertBar;
exports.AlertStack = AlertStack;
exports.Box = Box;
exports.Button = Button;
exports.ButtonStrip = ButtonStrip;
exports.Card = Card;
exports.CenteredContent = CenteredContent;
exports.Checkbox = Checkbox;
exports.Chip = Chip;
exports.CircularLoader = CircularLoader;
exports.ComponentCover = ComponentCover;
exports.CssReset = CssReset;
exports.CssVariables = CssVariables;
exports.Divider = Divider;
exports.DropdownButton = DropdownButton;
exports.Field = Field;
exports.FieldSet = FieldSet;
exports.FileInput = FileInput;
exports.FileList = FileList;
exports.FileListItem = FileListItem;
exports.FileListPlaceholder = FileListPlaceholder;
exports.FlyoutMenu = FlyoutMenu;
exports.Help = Help;
exports.Input = Input;
exports.IntersectionDetector = IntersectionDetector;
exports.Label = Label;
exports.Layer = Layer;
exports.Legend = Legend;
exports.LinearLoader = LinearLoader;
exports.Logo = Logo;
exports.LogoIcon = LogoIcon;
exports.LogoIconWhite = LogoIconWhite;
exports.LogoWhite = LogoWhite;
exports.Menu = Menu;
exports.MenuDivider = MenuDivider;
exports.MenuItem = MenuItem;
exports.MenuSectionHeader = MenuSectionHeader;
exports.Modal = Modal;
exports.ModalActions = ModalActions;
exports.ModalContent = ModalContent;
exports.ModalTitle = ModalTitle;
exports.MultiSelect = MultiSelect;
exports.MultiSelectOption = MultiSelectOption;
exports.Node = Node;
exports.NoticeBox = NoticeBox;
exports.Popover = Popover;
exports.Popper = Popper;
exports.Radio = Radio;
exports.Required = Required;
exports.SingleSelect = SingleSelect;
exports.SingleSelectOption = SingleSelectOption;
exports.SplitButton = SplitButton;
exports.StackedTable = StackedTable;
exports.StackedTableBody = StackedTableBody;
exports.StackedTableCell = StackedTableCell;
exports.StackedTableCellHead = StackedTableCellHead;
exports.StackedTableFoot = StackedTableFoot;
exports.StackedTableHead = StackedTableHead;
exports.StackedTableRow = StackedTableRow;
exports.StackedTableRowHead = StackedTableRowHead;
exports.Switch = Switch;
exports.Tab = Tab;
exports.TabBar = TabBar;
exports.Table = Table$1;
exports.TableBody = TableBody;
exports.TableCell = TableCell;
exports.TableCellHead = TableCellHead;
exports.TableFoot = TableFoot;
exports.TableHead = TableHead;
exports.TableRow = TableRow;
exports.TableRowHead = TableRowHead;
exports.Tag = Tag;
exports.TextArea = TextArea;
exports.Tooltip = Tooltip;
exports.useLayerContext = useLayerContext;
//# sourceMappingURL=lib.js.map
