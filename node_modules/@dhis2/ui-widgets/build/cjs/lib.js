/* eslint-disable */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _JSXStyle = _interopDefault(require('styled-jsx/style'));
var React = require('react');
var React__default = _interopDefault(React);
var propTypes = _interopDefault(require('@dhis2/prop-types'));
var appRuntime = require('@dhis2/app-runtime');
var uiConstants = require('@dhis2/ui-constants');
var uiCore = require('@dhis2/ui-core');
var uiIcons = require('@dhis2/ui-icons');
var i18n = _interopDefault(require('@dhis2/d2-i18n'));
var propTypes$1 = _interopDefault(require('prop-types'));
var cx = _interopDefault(require('classnames'));

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

/**
 * @module
 * @param {InputField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { InputField } from '@dhis2/ui-widgets'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/inputfield.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/inputfield--no-placeholder-no-value|Storybook}
 */

class InputField extends React__default.Component {
  render() {
    const {
      className,
      onChange,
      onFocus,
      onBlur,
      initialFocus,
      type,
      dense,
      required,
      label,
      disabled,
      readOnly,
      placeholder,
      name,
      valid,
      error,
      warning,
      loading,
      value,
      tabIndex,
      helpText,
      validationText,
      inputWidth,
      dataTest
    } = this.props;
    return /*#__PURE__*/React__default.createElement(uiCore.Field, {
      className: className,
      dataTest: dataTest,
      error: error,
      warning: warning,
      valid: valid,
      helpText: helpText,
      validationText: validationText,
      label: label,
      name: name,
      disabled: disabled,
      required: required
    }, /*#__PURE__*/React__default.createElement(uiCore.Box, {
      width: inputWidth,
      minWidth: "72px"
    }, /*#__PURE__*/React__default.createElement(uiCore.Input, {
      onFocus: onFocus,
      onBlur: onBlur,
      onChange: onChange,
      name: name,
      type: type,
      value: value || '',
      placeholder: placeholder,
      disabled: disabled,
      valid: valid,
      warning: warning,
      error: error,
      loading: loading,
      dense: dense,
      tabIndex: tabIndex,
      initialFocus: initialFocus,
      readOnly: readOnly
    })));
  }

}

InputField.defaultProps = {
  dataTest: 'dhis2-uiwidgets-inputfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} name
 * @prop {string} [type=text]
 * @prop {function} [onChange]
 * @prop {function} [onBlur]
 * @prop {function} [onFocus]
 * @prop {string} [label]
 * @prop {string} [className]
 * @prop {string} [placeholder]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 * @prop {string} [inputWidth]
 *
 * @prop {boolean} [required]
 * @prop {boolean} [disabled]
 * @prop {boolean} [readOnly]
 * @prop {boolean} [dense] - Compact mode
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, and `loading`
 * are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 *
 * @prop {string} [validationText]
 * @prop {string} [helpText]
 * @prop {string} [dataTest]
 */

InputField.propTypes = {
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: uiConstants.sharedPropTypes.statusPropType,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  inputWidth: propTypes.string,
  label: propTypes.string,
  loading: propTypes.bool,
  name: propTypes.string,
  placeholder: propTypes.string,
  readOnly: propTypes.bool,
  required: propTypes.bool,
  tabIndex: propTypes.string,
  type: uiCore.Input.propTypes.type,
  valid: uiConstants.sharedPropTypes.statusPropType,
  validationText: propTypes.string,
  value: propTypes.string,
  warning: uiConstants.sharedPropTypes.statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

const joinPath = (...parts) => {
  const realParts = parts.filter(part => !!part);
  return realParts.map(part => part.replace(/^\/+|\/+$/g, '')).join('/');
};

const appIcon = {
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "255544020"
  }, ["svg.jsx-255544020{fill:".concat(uiConstants.colors.white, ";cursor:pointer;height:24px;width:24px;}")]),
  className: "jsx-255544020"
};
const settingsIcon = {
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "4285170702"
  }, ["svg.jsx-4285170702{margin:8px 8px 0 16px;color:".concat(uiConstants.colors.grey900, ";height:24px;width:24px;cursor:pointer;}")]),
  className: "jsx-4285170702"
};
/**
 * Copied from here:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping
 */

function escapeRegExpCharacters(text) {
  return text.replace(/[/.*+?^${}()|[\]\\]/g, '\\$&');
}

function Search({
  value,
  onChange
}) {
  const {
    baseUrl
  } = appRuntime.useConfig();
  return /*#__PURE__*/React__default.createElement("div", {
    className: "jsx-2764723183"
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "jsx-2764723183"
  }, /*#__PURE__*/React__default.createElement(InputField, {
    value: value,
    name: "filter",
    placeholder: i18n.t('Search apps'),
    onChange: onChange,
    initialFocus: true
  })), /*#__PURE__*/React__default.createElement("span", {
    className: "jsx-2764723183"
  }, /*#__PURE__*/React__default.createElement("a", {
    href: joinPath(baseUrl, 'dhis-web-menu-management'),
    className: "jsx-2764723183"
  }, /*#__PURE__*/React__default.createElement(uiIcons.Settings, {
    className: settingsIcon.className
  }))), settingsIcon.styles, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2764723183"
  }, ["div.jsx-2764723183{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;height:52px;margin:8px;}", "span.jsx-2764723183{-webkit-flex:1 100%;-ms-flex:1 100%;flex:1 100%;}", "span.jsx-2764723183:last-child{-webkit-flex:1 auto;-ms-flex:1 auto;flex:1 auto;}"]));
}

Search.propTypes = {
  value: propTypes.string.isRequired,
  onChange: propTypes.func.isRequired
};

function Item({
  name,
  path,
  img
}) {
  return /*#__PURE__*/React__default.createElement("a", {
    href: path,
    className: _JSXStyle.dynamic([["3670725638", [uiConstants.theme.primary050]]])
  }, /*#__PURE__*/React__default.createElement("img", {
    src: img,
    alt: "app logo",
    className: _JSXStyle.dynamic([["3670725638", [uiConstants.theme.primary050]]])
  }), /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["3670725638", [uiConstants.theme.primary050]]])
  }, name), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "3670725638",
    dynamic: [uiConstants.theme.primary050]
  }, ["a.__jsx-style-dynamic-selector{display:inline-block;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;width:96px;margin:8px;padding:8px;border-radius:12px;-webkit-text-decoration:none;text-decoration:none;cursor:pointer;}", "a.__jsx-style-dynamic-selector:hover,a.__jsx-style-dynamic-selector:focus{background-color:".concat(uiConstants.theme.primary050, ";cursor:pointer;}"), "a.__jsx-style-dynamic-selector:hover>div.__jsx-style-dynamic-selector{font-weight:500;cursor:pointer;}", "img.__jsx-style-dynamic-selector{width:48px;height:48px;cursor:pointer;}", "div.__jsx-style-dynamic-selector{margin-top:14px;color:rgba(0,0,0,0.87);font-size:12px;-webkit-letter-spacing:0.01em;-moz-letter-spacing:0.01em;-ms-letter-spacing:0.01em;letter-spacing:0.01em;line-height:14px;text-align:center;cursor:pointer;}"]));
}

Item.propTypes = {
  img: propTypes.string,
  name: propTypes.string,
  path: propTypes.string
};

function List({
  apps,
  filter
}) {
  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": "headerbar-apps-menu-list",
    className: "jsx-2076871745"
  }, apps.filter(({
    displayName,
    name
  }) => {
    const appName = displayName || name;
    const formattedAppName = appName.toLowerCase();
    const formattedFilter = escapeRegExpCharacters(filter).toLowerCase();
    return filter.length > 0 ? formattedAppName.match(formattedFilter) : true;
  }).map(({
    displayName,
    name,
    defaultAction,
    icon
  }, idx) => /*#__PURE__*/React__default.createElement(Item, {
    key: "app-".concat(name, "-").concat(idx),
    name: displayName || name,
    path: defaultAction,
    img: icon
  })), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2076871745"
  }, ["div.jsx-2076871745{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-align-content:flex-start;-ms-flex-line-pack:start;align-content:flex-start;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;width:30vw;min-width:300px;max-width:560px;min-height:200px;max-height:465px;margin:0 8px 8px 8px;overflow:auto;overflow-x:hidden;}"]));
}

List.propTypes = {
  apps: propTypes.array,
  filter: propTypes.string
};
class Apps extends React__default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      show: false,
      filter: ''
    });

    _defineProperty(this, "onDocClick", evt => {
      if (this.elContainer && !this.elContainer.contains(evt.target)) {
        this.setState({
          show: false
        });
      }
    });

    _defineProperty(this, "onToggle", () => this.setState({
      show: !this.state.show
    }));

    _defineProperty(this, "onChange", ({
      value
    }) => this.setState({
      filter: value
    }));

    _defineProperty(this, "AppMenu", apps => /*#__PURE__*/React__default.createElement("div", {
      "data-test": "headerbar-apps-menu",
      className: "jsx-1740460911"
    }, /*#__PURE__*/React__default.createElement(uiCore.Card, null, /*#__PURE__*/React__default.createElement(Search, {
      value: this.state.filter,
      onChange: this.onChange
    }), /*#__PURE__*/React__default.createElement(List, {
      apps: apps,
      filter: this.state.filter
    })), /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "1740460911"
    }, ["div.jsx-1740460911{z-index:10000;position:absolute;top:28px;right:-6px;border-top:4px solid transparent;}"])));
  }

  componentDidMount() {
    document.addEventListener('click', this.onDocClick);
  }

  componentWillUnmount() {
    document.removeEventListener('click', this.onDocClick);
  }

  render() {
    const apps = this.props.apps;
    return /*#__PURE__*/React__default.createElement("div", {
      ref: c => this.elContainer = c,
      "data-test": "headerbar-apps",
      className: "jsx-1265754857"
    }, /*#__PURE__*/React__default.createElement("a", {
      onClick: this.onToggle,
      "data-test": "headerbar-apps-icon",
      className: "jsx-1265754857"
    }, /*#__PURE__*/React__default.createElement(uiIcons.Apps, {
      className: appIcon.className
    })), this.state.show && this.AppMenu(apps), appIcon.styles, /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "1265754857"
    }, ["a.jsx-1265754857{display:block;}", "div.jsx-1265754857{position:relative;width:24px;height:30px;margin:8px 0 0 0;}"]));
  }

}
Apps.propTypes = {
  apps: propTypes.array.isRequired
};

const ImageIcon = ({
  src,
  onClick,
  dataTestId
}) => /*#__PURE__*/React__default.createElement("div", {
  onClick: onClick,
  "data-test": dataTestId,
  className: "jsx-4170436681"
}, /*#__PURE__*/React__default.createElement("img", {
  src: src,
  alt: "user avatar",
  className: "jsx-4170436681"
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "4170436681"
}, ["img.jsx-4170436681{max-width:100%;max-height:100%;}", "div.jsx-4170436681{width:48px;height:48px;}"]));
ImageIcon.defaultProps = {
  onClick: undefined
};
ImageIcon.propTypes = {
  src: propTypes.string.isRequired,
  dataTestId: propTypes.string,
  onClick: propTypes.func
};

const TextIcon = ({
  name,
  onClick,
  dataTestId
}) => {
  let title = name[0];

  if (name.indexOf(' ') > 0) {
    title += name.split(' ')[1][0];
  }

  return /*#__PURE__*/React__default.createElement("div", {
    onClick: onClick,
    "data-test": dataTestId,
    className: "jsx-1795768421"
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "jsx-1795768421"
  }, title), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "1795768421"
  }, ["div.jsx-1795768421{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;width:36px;height:36px;overflow:hidden;border-radius:50%;background-color:rgba(0,0,0,0.3);color:#fff;cursor:pointer;}", "p.jsx-1795768421{font-size:14px;font-weight:500;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;text-align:center;text-transform:uppercase;}"]));
};
TextIcon.defaultProps = {
  onClick: undefined
};
TextIcon.propTypes = {
  name: propTypes.string.isRequired,
  dataTestId: propTypes.string,
  onClick: propTypes.func
};

const ProfileName = ({
  children
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": "headerbar-profile-username",
  className: "jsx-2223023701"
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2223023701"
}, ["div.jsx-2223023701{margin-bottom:3px;font-size:16px;line-height:19px;}"]));

ProfileName.propTypes = {
  children: propTypes.string
};

const ProfileEmail = ({
  children
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": "headerbar-profile-user-email",
  className: "jsx-1072768994"
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1072768994"
}, ["div.jsx-1072768994{margin-bottom:6px;font-size:14px;line-height:16px;}"]));

ProfileEmail.propTypes = {
  children: propTypes.string
};

const ProfileEdit = ({
  children
}) => {
  const {
    baseUrl
  } = appRuntime.useConfig();
  return /*#__PURE__*/React__default.createElement("a", {
    href: joinPath(baseUrl, 'dhis-web-user-profile/#/profile'),
    "data-test": "headerbar-profile-edit-profile-link",
    className: "jsx-233684196"
  }, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "233684196"
  }, ["a.jsx-233684196{color:rgba(0,0,0,0.87);font-size:12px;line-height:14px;-webkit-text-decoration:underline;text-decoration:underline;cursor:pointer;}"]));
};

ProfileEdit.propTypes = {
  children: propTypes.string
};

const ProfileDetails = ({
  name,
  email
}) => /*#__PURE__*/React__default.createElement("div", {
  className: "jsx-3814112749"
}, /*#__PURE__*/React__default.createElement(ProfileName, null, name), /*#__PURE__*/React__default.createElement(ProfileEmail, null, email), /*#__PURE__*/React__default.createElement(ProfileEdit, null, i18n.t('Edit profile')), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3814112749"
}, ["div.jsx-3814112749{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;margin-left:20px;color:#000;font-size:14px;font-weight:400;}"]));

ProfileDetails.propTypes = {
  email: propTypes.string,
  name: propTypes.string
};
const ProfileHeader = ({
  name,
  email,
  img
}) => /*#__PURE__*/React__default.createElement("div", {
  className: "jsx-3625287538"
}, img ? /*#__PURE__*/React__default.createElement(ImageIcon, {
  src: img
}) : /*#__PURE__*/React__default.createElement(TextIcon, {
  name: name
}), /*#__PURE__*/React__default.createElement(ProfileDetails, {
  name: name,
  email: email
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3625287538"
}, ["div.jsx-3625287538{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;margin-left:24px;padding-top:20px;}"]));
ProfileHeader.propTypes = {
  email: propTypes.string,
  img: propTypes.string,
  name: propTypes.string
};

const iconStyle = {
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2224778647"
  }, ["svg.jsx-2224778647{fill:".concat(uiConstants.colors.grey700, ";cursor:pointer;height:24px;width:24px;}")]),
  className: "jsx-2224778647"
};

const getMenuList = () => [{
  icon: /*#__PURE__*/React__default.createElement(uiIcons.Settings, {
    className: iconStyle.className
  }),
  label: i18n.t('Settings'),
  value: 'settings',
  link: 'dhis-web-user-profile/#/settings'
}, {
  icon: /*#__PURE__*/React__default.createElement(uiIcons.Account, {
    className: iconStyle.className
  }),
  label: i18n.t('Account'),
  value: 'account',
  link: 'dhis-web-user-profile/#/account'
}, {
  icon: /*#__PURE__*/React__default.createElement(uiIcons.Help, {
    className: iconStyle.className
  }),
  label: i18n.t('Help'),
  value: 'help',
  link: 'https://docs.dhis2.org/master/en/user/html/dhis2_user_manual_en.html',
  nobase: true
}, {
  icon: /*#__PURE__*/React__default.createElement(uiIcons.Info, {
    className: iconStyle.className
  }),
  label: i18n.t('About DHIS2'),
  value: 'about',
  link: 'dhis-web-user-profile/#/aboutPage'
}, {
  icon: /*#__PURE__*/React__default.createElement(uiIcons.Exit, {
    className: iconStyle.className
  }),
  label: i18n.t('Logout'),
  value: 'logout',
  link: 'dhis-web-commons-security/logout.action'
}];

const ProfileContents = ({
  name,
  email,
  avatar
}) => {
  const {
    baseUrl
  } = appRuntime.useConfig();
  return /*#__PURE__*/React__default.createElement(uiCore.Card, null, /*#__PURE__*/React__default.createElement("div", {
    className: "jsx-2099675810"
  }, /*#__PURE__*/React__default.createElement(ProfileHeader, {
    name: name,
    email: email,
    img: avatar
  }), /*#__PURE__*/React__default.createElement(uiCore.Divider, {
    margin: "13px 0 7px 0"
  }), /*#__PURE__*/React__default.createElement("ul", {
    "data-test": "headerbar-profile-menu",
    className: "jsx-2099675810"
  }, getMenuList().map(({
    label,
    value,
    icon,
    link,
    nobase
  }) => /*#__PURE__*/React__default.createElement(uiCore.MenuItem, {
    href: nobase ? link : joinPath(baseUrl, link),
    key: "h-mi-".concat(value),
    label: label,
    value: value,
    icon: icon
  })))), iconStyle.styles, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "2099675810"
  }, ["div.jsx-2099675810{width:100%;padding:0;}", "ul.jsx-2099675810{padding:0;margin:0;}", "a.jsx-2099675810,a.jsx-2099675810:hover,a.jsx-2099675810:focus,a.jsx-2099675810:active,a.jsx-2099675810:visited{-webkit-text-decoration:none;text-decoration:none;display:block;}"]));
};

ProfileContents.propTypes = {
  avatar: propTypes.element,
  email: propTypes.string,
  name: propTypes.string
};
const ProfileMenu = ({
  avatar,
  name,
  email
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": "headerbar-profile-menu",
  className: "jsx-3620236321"
}, /*#__PURE__*/React__default.createElement(ProfileContents, {
  name: name,
  email: email,
  avatar: avatar
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3620236321"
}, ["div.jsx-3620236321{z-index:10000;position:absolute;top:34px;right:-6px;width:310px;border-top:4px solid transparent;}"]));
ProfileMenu.propTypes = {
  avatar: propTypes.element,
  email: propTypes.string,
  name: propTypes.string
};

function avatarPath(avatar, baseUrl) {
  if (!avatar) {
    return null;
  }

  return joinPath(baseUrl, 'api/fileResources', avatar.id, 'data');
}

class Profile extends React__default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      show: false
    });

    _defineProperty(this, "onDocClick", evt => {
      if (this.elContainer && !this.elContainer.contains(evt.target)) {
        this.setState({
          show: false
        });
      }
    });

    _defineProperty(this, "onToggle", () => this.setState({
      show: !this.state.show
    }));
  }

  componentDidMount() {
    document.addEventListener('click', this.onDocClick);
  }

  componentWillUnmount() {
    document.removeEventListener('click', this.onDocClick);
  }

  userIcon(me, baseUrl) {
    const avatar = avatarPath(me.avatar, baseUrl);

    if (avatar) {
      return /*#__PURE__*/React__default.createElement(ImageIcon, {
        src: avatar,
        onClick: this.onToggle,
        dataTestId: "headerbar-profile-icon-image"
      });
    }

    return /*#__PURE__*/React__default.createElement(TextIcon, {
      name: me.name,
      onClick: this.onToggle,
      dataTestId: "headerbar-profile-icon-text"
    });
  }

  render() {
    const {
      user,
      baseUrl
    } = this.props;
    return /*#__PURE__*/React__default.createElement("div", {
      ref: c => this.elContainer = c,
      "data-test": "headerbar-profile",
      className: "jsx-661915851"
    }, this.userIcon(user, baseUrl), this.state.show ? /*#__PURE__*/React__default.createElement(ProfileMenu, {
      avatar: avatarPath(user.avatar, baseUrl),
      name: user.name,
      email: user.email
    }) : null, /*#__PURE__*/React__default.createElement(_JSXStyle, {
      id: "661915851"
    }, ["div.jsx-661915851{position:relative;width:36px;height:36px;margin:2px 12px 0 24px;}"]));
  }

}
Profile.propTypes = {
  baseUrl: propTypes.string.isRequired,
  user: propTypes.object.isRequired
};

const logoStyles = {
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "3467673193"
  }, ["svg.jsx-3467673193{height:25px;width:27px;}", "img.jsx-3467673193{max-height:100%;min-height:auto;width:auto;}"]),
  className: "jsx-3467673193"
};
const query = {
  customLogo: {
    resource: 'staticContent/logo_banner'
  }
};

const pathExists = data => data && data.customLogo && data.customLogo.images && data.customLogo.images.png;

const LogoImage = () => {
  const {
    loading,
    error,
    data
  } = appRuntime.useDataQuery(query);
  if (loading) return null;
  let Logo;

  if (!error && pathExists(data)) {
    Logo = /*#__PURE__*/React__default.createElement("img", {
      alt: "Headerbar Logo",
      src: data.customLogo.images.png,
      className: logoStyles.className
    });
  } else {
    Logo = /*#__PURE__*/React__default.createElement(uiCore.LogoIconWhite, {
      className: logoStyles.className
    });
  }

  return /*#__PURE__*/React__default.createElement("div", {
    className: "jsx-3930434724"
  }, Logo, logoStyles.styles, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "3930434724"
  }, ["div.jsx-3930434724{padding:4px;min-width:48px;max-width:250px;height:48px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;overflow:hidden;}"]));
};

const Logo = () => {
  const {
    baseUrl
  } = appRuntime.useConfig();
  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": "headerbar-logo",
    className: "jsx-3962152106"
  }, /*#__PURE__*/React__default.createElement("a", {
    href: baseUrl,
    className: "jsx-3962152106"
  }, /*#__PURE__*/React__default.createElement(LogoImage, null)), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "3962152106"
  }, ["div.jsx-3962152106{box-sizing:border-box;min-width:49px;max-height:48px;margin:0 12px 0 0;border-right:1px solid rgba(32,32,32,0.15);}", "a.jsx-3962152106,a.jsx-3962152106:hover,a.jsx-3962152106:focus,a.jsx-3962152106:active,a.jsx-3962152106:visited{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}"]));
};

const Title = ({
  app,
  instance
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": "headerbar-title",
  className: "jsx-2721515324"
}, app ? "".concat(instance, " - ").concat(app) : "".concat(instance), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2721515324"
}, ["div.jsx-2721515324{overflow:hidden;text-overflow:ellipsis;font-size:14px;font-weight:500;-webkit-letter-spacing:0.01em;-moz-letter-spacing:0.01em;-ms-letter-spacing:0.01em;letter-spacing:0.01em;white-space:nowrap;}"]));
Title.propTypes = {
  app: propTypes.string,
  instance: propTypes.string
};

const messageIcon = {
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "255544020"
  }, ["svg.jsx-255544020{fill:".concat(uiConstants.colors.white, ";cursor:pointer;height:24px;width:24px;}")]),
  className: "jsx-255544020"
};
const interpretationIcon = {
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "255544020"
  }, ["svg.jsx-255544020{fill:".concat(uiConstants.colors.white, ";cursor:pointer;height:24px;width:24px;}")]),
  className: "jsx-255544020"
};

function icon(kind) {
  if (kind === 'message') {
    return /*#__PURE__*/React__default.createElement(uiIcons.Message, {
      className: messageIcon.className
    }, messageIcon.styles);
  } else {
    return /*#__PURE__*/React__default.createElement(uiIcons.Email, {
      className: interpretationIcon.className
    }, interpretationIcon.styles);
  }
}

const NotificationIcon = ({
  count,
  href,
  kind,
  dataTestId
}) => /*#__PURE__*/React__default.createElement("a", {
  href: href,
  "data-test": dataTestId,
  className: _JSXStyle.dynamic([["1854025327", [uiConstants.theme.secondary300]]]) + " " + (kind || "")
}, icon(kind), count > 0 && /*#__PURE__*/React__default.createElement("span", {
  "data-test": "".concat(dataTestId, "-count"),
  className: _JSXStyle.dynamic([["1854025327", [uiConstants.theme.secondary300]]])
}, count), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1854025327",
  dynamic: [uiConstants.theme.secondary300]
}, ["a.__jsx-style-dynamic-selector{position:relative;margin:8px 24px 0 0;cursor:pointer;}", "span.__jsx-style-dynamic-selector{z-index:1;position:absolute;top:-6px;right:-10px;width:16px;height:16px;border-radius:50%;background-color:".concat(uiConstants.theme.secondary300, ";color:#fff;font-size:9px;font-weight:500;line-height:16px;text-align:center;cursor:inherit;}")]));
NotificationIcon.defaultProps = {
  count: 0
};
NotificationIcon.propTypes = {
  href: propTypes.string.isRequired,
  count: propTypes.number,
  dataTestId: propTypes.string,
  kind: propTypes.oneOf(['interpretation', 'message'])
};

/*
 AUTHORITIES:
 - ALL: superuser
 - M_dhis-web-interpretation: access to interpretations app
 - M_dhis-web-messaging: access to messaging app
 */

const hasAuthority = (userAuthorities, authId) => Array.isArray(userAuthorities) && userAuthorities.some(userAuthId => userAuthId === 'ALL' || userAuthId === authId);

const Notifications = ({
  interpretations,
  messages,
  userAuthorities
}) => {
  const {
    baseUrl
  } = appRuntime.useConfig();
  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": "headerbar-notifications",
    className: "jsx-1500177125"
  }, hasAuthority(userAuthorities, 'M_dhis-web-interpretation') && /*#__PURE__*/React__default.createElement(NotificationIcon, {
    count: interpretations,
    href: joinPath(baseUrl, 'dhis-web-interpretation'),
    kind: "message",
    dataTestId: "headerbar-interpretations"
  }), hasAuthority(userAuthorities, 'M_dhis-web-messaging') && /*#__PURE__*/React__default.createElement(NotificationIcon, {
    message: "email",
    count: messages,
    href: joinPath(baseUrl, 'dhis-web-messaging'),
    kind: "interpretation",
    dataTestId: "headerbar-messages"
  }), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "1500177125"
  }, ["div.jsx-1500177125{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}"]));
};
Notifications.propTypes = {
  interpretations: propTypes.number,
  messages: propTypes.number,
  userAuthorities: propTypes.arrayOf(propTypes.string)
};

const query$1 = {
  title: {
    resource: 'systemSettings/applicationTitle'
  },
  user: {
    resource: 'me'
  },
  apps: {
    resource: 'action::menu/getModules'
  },
  notifications: {
    resource: 'me/dashboard'
  }
};
const HeaderBar = ({
  appName,
  className
}) => {
  const {
    baseUrl
  } = appRuntime.useConfig();
  const {
    loading,
    error,
    data
  } = appRuntime.useDataQuery(query$1);
  const apps = React.useMemo(() => {
    const getPath = path => path.startsWith('http:') || path.startsWith('https:') ? path : joinPath(baseUrl, 'api', path);

    return data === null || data === void 0 ? void 0 : data.apps.modules.map(app => _objectSpread2({}, app, {
      icon: getPath(app.icon),
      defaultAction: getPath(app.defaultAction)
    }));
  }, [data]);

  if (!loading && !error) {
    // TODO: This will run every render which is probably wrong!  Also, setting the global locale shouldn't be done in the headerbar
    const locale = data.user.settings.keyUiLocale || 'en';
    i18n.setDefaultNamespace('default');
    i18n.changeLanguage(locale);
  }

  return /*#__PURE__*/React__default.createElement("header", {
    className: _JSXStyle.dynamic([["1335571883", [uiConstants.colors.white]]]) + " " + (className || "")
  }, !loading && !error && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Logo, null), /*#__PURE__*/React__default.createElement(Title, {
    app: appName,
    instance: data.title.applicationTitle
  }), /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1335571883", [uiConstants.colors.white]]]) + " " + "right-control-spacer"
  }), /*#__PURE__*/React__default.createElement(Notifications, {
    interpretations: data.notifications.unreadInterpretations,
    messages: data.notifications.unreadMessageConversations,
    userAuthorities: data.user.authorities
  }), /*#__PURE__*/React__default.createElement(Apps, {
    apps: apps
  }), /*#__PURE__*/React__default.createElement(Profile, {
    user: data.user,
    baseUrl: baseUrl
  })), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "1335571883",
    dynamic: [uiConstants.colors.white]
  }, ["header.__jsx-style-dynamic-selector{background-color:#2c6693;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;height:48px;border-bottom:1px solid rgba(32,32,32,0.15);color:".concat(uiConstants.colors.white, ";}"), ".right-control-spacer.__jsx-style-dynamic-selector{margin-left:auto;}"]));
};
HeaderBar.propTypes = {
  appName: propTypes.string,
  className: propTypes.string
};

const ErrorMessage = ({
  children,
  dataTest
}) => /*#__PURE__*/React__default.createElement("span", {
  "data-test": "".concat(dataTest, "-error"),
  className: _JSXStyle.dynamic([["3198585030", [uiConstants.colors.grey800, uiConstants.spacers.dp4, uiConstants.theme.error]]])
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3198585030",
  dynamic: [uiConstants.colors.grey800, uiConstants.spacers.dp4, uiConstants.theme.error]
}, ["span.__jsx-style-dynamic-selector{font-size:14px;color:".concat(uiConstants.colors.grey800, ";margin:").concat(uiConstants.spacers.dp4, ";color:").concat(uiConstants.theme.error, ";}")]));
ErrorMessage.propTypes = {
  children: propTypes$1.any.isRequired,
  dataTest: propTypes$1.string.isRequired
};

/* eslint-disable max-params */
const UNIT_ID_PATTERN = '[a-zA-Z][a-zA-Z0-9]{10}';
const orgUnitPathPropType = (propValue, key, compName, location, propFullName) => {
  if (!new RegExp("(/".concat(UNIT_ID_PATTERN, ")+")).test(propValue[key])) {
    return new Error("Invalid org unit path `".concat(propValue[key], "` supplied to `").concat(compName, ".").concat(propFullName, "`"));
  }
};

/**
 * @param {Object} props
 * @param {string} props.label
 * @param {Function} props.onToggleOpen
 * @param {bool} [props.loading]
 * @returns {React.Component}
 */

const DisabledSelectionLabel = ({
  label,
  loading,
  onToggleOpen
}) => /*#__PURE__*/React__default.createElement(SingleSelectionLabel, {
  checked: false,
  loading: loading,
  label: label,
  onChange: onToggleOpen
});

DisabledSelectionLabel.propTypes = {
  label: propTypes$1.string.isRequired,
  onToggleOpen: propTypes$1.func.isRequired,
  loading: propTypes$1.bool
};
/**
 * @param {Object} props
 * @param {string} props.label
 * @param {bool} [props.checked]
 * @param {bool} [props.loading]
 * @param {Function} [props.onChange]
 * @returns {React.Component}
 */

const SingleSelectionLabel = ({
  checked,
  label,
  onChange,
  loading
}) => /*#__PURE__*/React__default.createElement("span", {
  onClick: event => {
    const payload = {
      checked: !checked
    };
    onChange(payload, event);
  },
  className: _JSXStyle.dynamic([["321503310", [uiConstants.colors.grey900, uiConstants.colors.teal700]]]) + " " + (cx({
    checked,
    loading
  }) || "")
}, label, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "321503310",
  dynamic: [uiConstants.colors.grey900, uiConstants.colors.teal700]
}, ["span.__jsx-style-dynamic-selector{background:transparent;border-radius:3px;color:".concat(uiConstants.colors.grey900, ";cursor:pointer;display:inline-block;font-size:14px;line-height:24px;padding:0 5px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;white-space:nowrap;}"), ".checked.__jsx-style-dynamic-selector{background:".concat(uiConstants.colors.teal700, ";color:white;}"), ".loading.__jsx-style-dynamic-selector{cursor:auto;}"]));

SingleSelectionLabel.propTypes = {
  label: propTypes$1.string.isRequired,
  checked: propTypes$1.bool,
  loading: propTypes$1.bool,
  onChange: propTypes$1.func
};
/**
 * @param {Object} props
 * @param {bool} props.highlighted
 * @param {React.Component|React.Component[]} props.children
 * @returns {React.Component}
 */

const LabelContainer = ({
  highlighted,
  children
}) => /*#__PURE__*/React__default.createElement("div", {
  className: _JSXStyle.dynamic([["495975020", [uiConstants.colors.teal200]]]) + " " + (cx({
    highlighted
  }) || "")
}, /*#__PURE__*/React__default.createElement("span", {
  className: _JSXStyle.dynamic([["495975020", [uiConstants.colors.teal200]]])
}, children), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "495975020",
  dynamic: [uiConstants.colors.teal200]
}, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", "span.__jsx-style-dynamic-selector{display:block;}", ".highlighted.__jsx-style-dynamic-selector{background:".concat(uiConstants.colors.teal200, ";padding-right:4px;}")]));

LabelContainer.propTypes = {
  children: propTypes$1.node,
  highlighted: propTypes$1.bool
};
/**
 * @param {Object} props
 * @param {bool} props.hasChildren
 * @param {bool} props.open
 * @returns {React.Component}
 */

const Icon = ({
  loading,
  hasChildren,
  open,
  dataTest
}) => {
  if (loading) {
    return /*#__PURE__*/React__default.createElement(uiIcons.Empty, {
      dataTest: dataTest
    });
  }

  if (!hasChildren) {
    return /*#__PURE__*/React__default.createElement(uiIcons.Single, {
      dataTest: dataTest
    });
  }

  if (open) {
    return /*#__PURE__*/React__default.createElement(uiIcons.FolderOpen, {
      dataTest: dataTest
    });
  }

  return /*#__PURE__*/React__default.createElement(uiIcons.FolderClosed, {
    dataTest: dataTest
  });
};

Icon.propTypes = {
  dataTest: propTypes$1.string.isRequired,
  hasChildren: propTypes$1.bool,
  loading: propTypes$1.bool,
  open: propTypes$1.bool
};

const IconizedCheckbox = ({
  checked,
  dataTest,
  hasChildren,
  indeterminate,
  label,
  loading,
  name,
  open,
  value,
  onChange
}) => {
  const icon = /*#__PURE__*/React__default.createElement(Icon, {
    loading: loading,
    open: open,
    hasChildren: hasChildren,
    dataTest: dataTest
  });
  const checkboxLabel = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("span", {
    className: "jsx-3097236308"
  }, icon), label, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "3097236308"
  }, ["span.jsx-3097236308{display:inline-block;margin-right:4px;}"]));
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(uiCore.Checkbox, {
    dense: true,
    checked: checked,
    name: name,
    value: value,
    label: checkboxLabel,
    indeterminate: indeterminate,
    onChange: onChange
  }));
};

IconizedCheckbox.propTypes = {
  checked: propTypes$1.bool.isRequired,
  dataTest: propTypes$1.string.isRequired,
  hasChildren: propTypes$1.bool.isRequired,
  indeterminate: propTypes$1.bool.isRequired,
  label: propTypes$1.string.isRequired,
  loading: propTypes$1.bool.isRequired,
  name: propTypes$1.string.isRequired,
  open: propTypes$1.bool.isRequired,
  value: propTypes$1.string.isRequired,
  onChange: propTypes$1.func.isRequired
};

const createNewSelected = ({
  selected,
  path,
  checked,
  singleSelection
}) => {
  const pathIndex = selected.indexOf(path);
  if (checked && pathIndex !== -1) return selected;
  if (singleSelection && checked) return [path];
  if (checked) return [...selected, path];
  if (pathIndex === -1) return selected;
  if (singleSelection) return [];
  if (selected.indexOf(path) === 0) return selected.slice(1);
  const prevSlice = selected.slice(0, pathIndex);
  const nextSlice = selected.slice(pathIndex + 1);
  return [...prevSlice, ...nextSlice];
};
/**
 * @module
 * @param {Label.PropTypes} props
 * @returns {React.Component}
 */


const Label = ({
  id,
  path,
  open,
  loading,
  checked,
  onChange,
  dataTest,
  selected,
  hasChildren,
  highlighted,
  displayName,
  onToggleOpen,
  disableSelection,
  singleSelection,
  hasSelectedDescendants
}) => {
  const onClick = ({
    checked
  }, event) => {
    const newSelected = createNewSelected({
      selected,
      path,
      checked,
      singleSelection
    });
    onChange({
      id,
      path,
      checked,
      displayName,
      selected: newSelected
    }, event);
  };

  if (disableSelection) {
    return /*#__PURE__*/React__default.createElement(LabelContainer, {
      highlighted: highlighted
    }, /*#__PURE__*/React__default.createElement(DisabledSelectionLabel, {
      label: displayName,
      loading: loading,
      onToggleOpen: onToggleOpen
    }));
  }

  if (singleSelection) {
    return /*#__PURE__*/React__default.createElement(LabelContainer, {
      highlighted: highlighted
    }, /*#__PURE__*/React__default.createElement(SingleSelectionLabel, {
      checked: checked,
      label: displayName,
      onChange: onClick,
      loading: loading
    }, displayName));
  }

  return /*#__PURE__*/React__default.createElement(LabelContainer, {
    highlighted: highlighted
  }, /*#__PURE__*/React__default.createElement(IconizedCheckbox, {
    dataTest: dataTest,
    checked: checked,
    name: "org-unit",
    value: id,
    label: displayName,
    loading: loading,
    indeterminate: !checked && hasSelectedDescendants,
    onChange: onClick,
    open: open,
    hasChildren: hasChildren
  }));
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} id
 * @prop {string} path
 * @prop {string} displayName
 * @prop {bool} open
 * @prop {bool} loading
 * @prop {bool} hasChildren
 * @prop {Function} [onChange]
 * @prop {Function} [onToggleOpen]
 * @prop {bool} [checked]
 * @prop {bool} [highlighted]
 * @prop {bool} [disableSelection]
 * @prop {bool} [singleSelection]
 * @prop {bool} [hasSelectedDescendants]
 */


Label.propTypes = {
  dataTest: propTypes$1.string.isRequired,
  displayName: propTypes$1.string.isRequired,
  hasChildren: propTypes$1.bool.isRequired,
  id: propTypes$1.string.isRequired,
  loading: propTypes$1.bool.isRequired,
  open: propTypes$1.bool.isRequired,
  path: propTypes$1.string.isRequired,
  onChange: propTypes$1.func.isRequired,
  onToggleOpen: propTypes$1.func.isRequired,
  checked: propTypes$1.bool,
  disableSelection: propTypes$1.bool,
  hasSelectedDescendants: propTypes$1.bool,
  highlighted: propTypes$1.bool,
  selected: propTypes$1.arrayOf(orgUnitPathPropType),
  singleSelection: propTypes$1.bool
};

/**
 * @param {string[]} includedPaths
 * @param {string} path
 * @returns {bool}
 */
const isPathIncluded = (includedPaths, path) => {
  const isIncluded = includedPaths.some(includedPath => {
    if (path === includedPath) return true;
    return includedPath.indexOf("".concat(path, "/")) === 0;
  });
  return isIncluded;
};
/**
 * Returns all the childrenIds that should be rendered.
 * An id will be included if it's parent's path + the id is inside
 * the "filter" or the parent's path + id is a substring
 * of the paths in "filter" (then it's a parent path of
 * the units that should be included itself)
 *
 * @param {Object} node
 * @param {Object[]} node.children
 * @param {string[]} includedPaths
 * @returns {string[]}
 */


const computeChildNodes = (node, filter) => {
  if (!filter.length) {
    return node.children;
  }

  return node.children.filter(child => {
    return isPathIncluded(filter, "".concat(node.path, "/").concat(child.id));
  });
};

/**
 * Checks wether there are descendants of a path in the
 * array of selected paths
 *
 * @param {string} path
 * @param {string[]} selected
 * @returns {bool}
 */
const hasDescendantSelectedPaths = (path, selected) => selected.some(selectedPath => selectedPath !== path && selectedPath.indexOf(path) === 0);

/**
 * @param {Object} args
 * @param {string} args.path
 * @param {string} [args.errorMessage]
 * @param {string} [args.autoExpandLoadingError]
 * @param {string[]} args.expanded
 * @param {Function} [args.onExpand]
 * @param {Function} [args.onCollapse]
 * @returns {Object}
 */

const useOpenState = ({
  path,
  expanded,
  onExpand,
  onCollapse,
  errorMessage,
  autoExpandLoadingError
}) => {
  const autoExpand = autoExpandLoadingError && !!errorMessage;
  const [openedOnceDueToError, setOpenedOnce] = React.useState(!!errorMessage);
  const [open, setOpen] = React.useState(autoExpand || expanded.includes(path));
  React.useEffect(() => {
    if (autoExpand && !openedOnceDueToError) {
      setOpen(true);
      setOpenedOnce(true);
    }
  }, [autoExpand, openedOnceDueToError]);

  const onToggleOpen = () => {
    const newOpen = !open;
    const payload = {
      path
    };
    setOpen(newOpen);

    if (onExpand && newOpen) {
      onExpand(payload);
    } else if (onCollapse && !newOpen) {
      onCollapse(payload);
    }
  };

  return {
    open,
    onToggleOpen
  };
};

const fromEntries = entries => entries.reduce((collection, [key, name]) => _objectSpread2({}, collection, {
  [key]: name
}), {});

const withChildrenFields = 'children[path,displayName,id],displayName,path,id';
const withoutChildrenFields = 'displayName,path,id';
const createOrgUnitQuery = id => ({
  resource: "organisationUnits/".concat(id),
  params: ({
    withChildren,
    isUserDataViewFallback
  }) => ({
    isUserDataViewFallback,
    fields: withChildren ? withChildrenFields : withoutChildrenFields,
    paging: false
  })
});
const createQuery = ids => ids.reduce((query, id) => _objectSpread2({}, query, {
  [id]: createOrgUnitQuery(id)
}), {});
/**
 * @param {Object[]} nodes
 * @returns {}
 */

const addMissingDisplayNameProps = nodes => {
  const nodeEntries = Object.entries(nodes);
  const nodesWithDisplayName = nodeEntries.map(([id, node]) => {
    const displayName = node.displayName || '';
    return [id, _objectSpread2({}, node, {
      displayName
    })];
  });
  return fromEntries(nodesWithDisplayName);
};

/**
 * @param {string[]} ids
 * @param {Object} [options]
 * @param {boolean} [options.withChildren]
 * @param {boolean} [options.isUserDataViewFallback]
 * @returns {Object}
 */

const useOrgData = (ids, {
  withChildren = true,
  isUserDataViewFallback
} = {}) => {
  const query = createQuery(ids);
  const variables = {
    withChildren,
    isUserDataViewFallback
  };
  const {
    loading,
    error,
    data,
    refetch
  } = appRuntime.useDataQuery(query, {
    variables
  });
  const nodes = data ? addMissingDisplayNameProps(data) : {};
  return {
    loading,
    error,
    data: nodes,
    refetch
  };
};

const loadingSpinnerStyles = {
  styles: /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "1427691812"
  }, [".small.jsx-1427691812{display:block;margin:3px 0;width:18px;height:18px;}"]),
  className: "jsx-1427691812"
};

const LoadingSpinner = () => /*#__PURE__*/React__default.createElement("div", {
  className: "jsx-2503342345"
}, /*#__PURE__*/React__default.createElement(uiCore.CircularLoader, {
  small: true,
  className: loadingSpinnerStyles.className
}), /*#__PURE__*/React__default.createElement("style", null, loadingSpinnerStyles.styles), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2503342345"
}, ["div.jsx-2503342345{width:24px;}"]));

const OrganisationUnitNode = ({
  autoExpandLoadingError,
  dataTest,
  disableSelection,
  displayName,
  expanded,
  highlighted,
  id,
  isUserDataViewFallback,
  path,
  selected,
  singleSelection,
  filter,
  onChange,
  onChildrenLoaded,
  onCollapse,
  onExpand
}) => {
  const {
    loading,
    error,
    data
  } = useOrgData([id], {
    isUserDataViewFallback
  });
  const childNodes = !loading && !error ? computeChildNodes(data[id], filter) : [];
  const hasChildren = !!childNodes.length;
  const hasSelectedDescendants = hasDescendantSelectedPaths(path, selected);
  const isHighlighted = highlighted.includes(path);
  const {
    open,
    onToggleOpen
  } = useOpenState({
    autoExpandLoadingError,
    errorMessage: error && error.toString(),
    path,
    expanded,
    onExpand,
    onCollapse
  });
  const isSelected = selected.includes(path);
  React.useEffect(() => {
    if (!loading && !error && onChildrenLoaded) {
      onChildrenLoaded(data);
    }
  }, [loading, error, onChildrenLoaded]);
  const label = /*#__PURE__*/React__default.createElement(Label, {
    checked: isSelected,
    dataTest: "".concat(dataTest, "-label"),
    disableSelection: disableSelection,
    displayName: displayName,
    hasChildren: hasChildren,
    hasSelectedDescendants: hasSelectedDescendants,
    highlighted: isHighlighted,
    id: id,
    loading: loading,
    onChange: onChange,
    selected: selected,
    onToggleOpen: onToggleOpen,
    open: open,
    path: path,
    singleSelection: singleSelection
  });
  /**
   * No children means no arrow, therefore we have to provide something.
   * While "loading" is true, "hasChildren" is false
   * There are some possible children variants as content of this node:
   *
   * 1. Nothing; There are no children
   * 2. Placeholder: There are children, but the Node is closed (show arrow)
   * 3. Error: There are children and loading information somehow failed
   * 4. Child nodes: There are children and the node is open
   */

  const showPlaceholder = hasChildren && !open && !error;
  const showChildNodes = hasChildren && open && !error;
  return /*#__PURE__*/React__default.createElement(uiCore.Node, {
    dataTest: "".concat(dataTest, "-node"),
    open: open,
    onOpen: onToggleOpen,
    onClose: onToggleOpen,
    component: label,
    icon: loading && /*#__PURE__*/React__default.createElement(LoadingSpinner, null)
  }, error && /*#__PURE__*/React__default.createElement(ErrorMessage, {
    dataTest: dataTest
  }, i18n.t('Could not load children')), showPlaceholder && /*#__PURE__*/React__default.createElement("span", {
    "data-test": "".concat(dataTest, "-placeholder")
  }), showChildNodes && childNodes.map(child => {
    const childPath = "".concat(path, "/").concat(child.id);
    const grandChildNodes = computeChildNodes(child, filter);
    return /*#__PURE__*/React__default.createElement(OrganisationUnitNode, {
      key: childPath,
      autoExpandLoadingError: autoExpandLoadingError,
      childNodes: grandChildNodes,
      dataTest: dataTest,
      disableSelection: disableSelection,
      displayName: child.displayName,
      expanded: expanded,
      filter: filter,
      highlighted: highlighted,
      id: child.id,
      isUserDataViewFallback: isUserDataViewFallback,
      path: childPath,
      selected: selected,
      singleSelection: singleSelection,
      onChange: onChange,
      onChildrenLoaded: onChildrenLoaded,
      onCollapse: onCollapse,
      onExpand: onExpand
    });
  }));
};
OrganisationUnitNode.propTypes = {
  dataTest: propTypes.string.isRequired,
  id: propTypes.string.isRequired,
  onChange: propTypes.func.isRequired,
  autoExpandLoadingError: propTypes.bool,
  disableSelection: propTypes.bool,
  displayName: propTypes.string,
  expanded: propTypes.arrayOf(orgUnitPathPropType),
  filter: propTypes.arrayOf(orgUnitPathPropType),
  highlighted: propTypes.arrayOf(orgUnitPathPropType),
  isUserDataViewFallback: propTypes.bool,
  path: orgUnitPathPropType,
  selected: propTypes.arrayOf(orgUnitPathPropType),
  singleSelection: propTypes.bool,
  onChildrenLoaded: propTypes.func,
  onCollapse: propTypes.func,
  onExpand: propTypes.func
};

const RootError = ({
  dataTest,
  error
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": "".concat(dataTest, "-loading")
}, i18n.t('Error: '), error);
RootError.propTypes = {
  dataTest: propTypes$1.string.isRequired,
  error: propTypes$1.string.isRequired
};

const RootLoading = ({
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": "".concat(dataTest, "-loading"),
  className: "jsx-814846266"
}, /*#__PURE__*/React__default.createElement(uiCore.CircularLoader, {
  small: true
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "814846266"
}, ["div.jsx-814846266{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}"]));
RootLoading.propTypes = {
  dataTest: propTypes$1.string.isRequired
};

/**
 * @param {string} path
 * @returns {string[]}
 */
const extractAllPathsFromPath = path => {
  // remove leading slash and split by path delimiter/slashes
  const segments = path.replace(/^\//, '').split('/');
  const withSubPaths = segments.map((segment, index) => {
    // take all segments from 0 to index and join them with the delimiter
    return "/".concat(segments.slice(0, index + 1).join('/'));
  });
  return withSubPaths;
};
/**
 * @param {string[]} initiallyExpanded
 * @returns {string[]}
 */

const getInitiallyExpandedPaths = initiallyExpanded => initiallyExpanded.reduce((all, curPath) => {
  const allPathsInCurPath = extractAllPathsFromPath(curPath);
  return [...all, ...allPathsInCurPath];
}, []);
/**
 * @param {Object} args
 * @param {string[]} args.expanded
 * @param {Function} args.setExpanded
 * @param {Function} [args.onExpand]
 * @param {Function} [args.onCollapse]
 * @returns {{ handleExpand: Function, handleCollapse: Function }}
 */

const createExpandHandlers = ({
  expanded,
  setExpanded,
  onExpand,
  onCollapse
}) => {
  const handleExpand = (_ref) => {
    let {
      path
    } = _ref,
        rest = _objectWithoutProperties(_ref, ["path"]);

    if (!expanded.includes(path)) {
      setExpanded([...expanded, path]);

      if (onExpand) {
        onExpand(_objectSpread2({
          path
        }, rest));
      }
    }
  };

  const handleCollapse = (_ref2) => {
    let {
      path
    } = _ref2,
        rest = _objectWithoutProperties(_ref2, ["path"]);

    const pathIndex = expanded.indexOf(path);

    if (pathIndex !== -1) {
      const updatedExpanded = pathIndex === 0 ? expanded.slice(1) : [...expanded.slice(0, pathIndex), ...expanded.slice(pathIndex + 1)];
      setExpanded(updatedExpanded);

      if (onCollapse) {
        onCollapse(_objectSpread2({
          path
        }, rest));
      }
    }
  };

  return {
    handleExpand,
    handleCollapse
  };
};

/**
 * @param {string[]} initiallyExpanded
 * @param {Function} [onExpand]
 * @param {Function} [onCollapse]
 * @returns {{ expanded: string[], handleExpand: Function, handleCollapse: Function }}
 */

const useExpanded = (initiallyExpanded, onExpand, onCollapse) => {
  const allInitiallyExpandedPaths = getInitiallyExpandedPaths(initiallyExpanded);
  const [expanded, setExpanded] = React.useState(allInitiallyExpandedPaths);
  const {
    handleExpand,
    handleCollapse
  } = createExpandHandlers({
    expanded,
    setExpanded,
    onExpand,
    onCollapse
  });
  return {
    expanded,
    handleExpand,
    handleCollapse
  };
};

/**
 * This will create a new reloadId everytime "forceReload" changes to true,
 * which can be used as the "key" prop on the org unit tree.
 * When that id changes, the whole tree rerenders
 * and therefore triggers all "useDataQuery"s to
 * run the query again
 *
 * @param {bool} forceReload
 * @returns {Int}
 */

const useForceReload = forceReload => {
  const [reloadId, setReloadId] = React.useState(0);
  React.useEffect(() => {
    forceReload === true && setReloadId(reloadId + 1);
  }, [forceReload]);
  return reloadId;
};

/**
 * @module
 * @param {OrganisationUnitTree.PropTypes} props
 * @returns {React.Component}
 *
 * @example
 * import { OrganisationUnitTree } from '@dhis2/ui-widgets'
 *
 * @example
 * <OrganisationUnitTree
 *     name="Root org unit"
 *     roots="A0000000000"
 *     onChange={onChange}
 *     onExpand={onExpand}
 *     onCollapse={onCollapse}
 *     onChildrenLoaded={onChildrenLoaded}
 *     initiallyExpanded={['/A0000000000/A0000000001']}
 *     filter={['/A0000000000/A0000000001/A0000000003']}
 * />
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/organisms/organisation-unit-tree/org-unit-tree.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/organisationunittree--collapsed|Storybook}
 */

const OrganisationUnitTree = ({
  onChange,
  roots,
  autoExpandLoadingError,
  dataTest,
  disableSelection,
  forceReload,
  highlighted,
  isUserDataViewFallback,
  initiallyExpanded,
  filter,
  selected,
  singleSelection,
  onExpand,
  onCollapse,
  onChildrenLoaded
}) => {
  const rootIds = Array.isArray(roots) ? roots : [roots];
  const reloadId = useForceReload(forceReload);
  const {
    loading,
    error,
    data,
    refetch
  } = useOrgData(rootIds, {
    withChildren: false,
    isUserDataViewFallback
  });
  const {
    expanded,
    handleExpand,
    handleCollapse
  } = useExpanded(initiallyExpanded, onExpand, onCollapse);
  React.useEffect(() => {
    // do not refetch on initial render
    if (refetch && reloadId > 0) {
      refetch();
    }
  }, [reloadId, refetch]);
  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest
  }, error && /*#__PURE__*/React__default.createElement(RootError, {
    error: error,
    dataTest: dataTest
  }), loading && /*#__PURE__*/React__default.createElement(RootLoading, {
    dataTest: dataTest
  }), !error && !loading && rootIds.map(rootId => {
    const rootNode = data[rootId];
    const rootPath = "/".concat(rootId);
    return /*#__PURE__*/React__default.createElement(OrganisationUnitNode, {
      key: rootPath,
      autoExpandLoadingError: autoExpandLoadingError,
      dataTest: dataTest,
      disableSelection: disableSelection,
      displayName: rootNode.displayName,
      expanded: expanded,
      highlighted: highlighted,
      id: rootId,
      isUserDataViewFallback: isUserDataViewFallback,
      filter: filter,
      path: rootPath,
      selected: selected,
      singleSelection: singleSelection,
      onChange: onChange,
      onChildrenLoaded: onChildrenLoaded,
      onCollapse: handleCollapse,
      onExpand: handleExpand
    });
  }));
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string|string[]} roots
 * Root org unit id(s)
 *
 * @prop {Function} onChange
 * Will be called with the following object
 * { id: string; path: string; checked: boolean; }
 *
 * @prop {bool} [autoExpandLoadingError]
 * When set, the error when loading children
 * fails will be shown automaticlly
 *
 * @prop {bool} [singleSelection]
 * When set, no checkboxes will be displayed and only the first selected path
 * in `selected` will be highlighted
 *
 * @prop {bool} [disableSelection]
 * When set to true, no unit can be selected
 *
 * @prop {string[]} [filter]
 * All organisation units with a path that inclused the provided
 * paths will be shown. All others will not be rendered.
 * When not provided, all org units will be shown.
 *
 * @prop {bool} [forceReload]
 * When set to "true", everything will be reloaded.
 * In order to load it again after reloading,
 * "forceReload" has to be set to false and then to true again
 *
 * @prop {string[]} [selected]
 * An array of paths of selected OUs.
 * The path of an OU is the UIDs of the OU and all its parent OUs separated
 * by slashes (/)
 *
 * @prop {string[]} [initiallyExpanded]
 * An array of OU paths that will be expanded automatically
 * as soon as they are encountered.
 * The path of an OU is the UIDs of the OU
 * and all its parent OUs separated by slashes (/)
 * Note: This replaces "openFirstLevel" as that's redundant
 *
 * @prop {bool} [isUserDataViewFallback]
 * When provided, the "isUserDataViewFallback" option will be send when
 * requesting the org units
 *
 * @prop {string[]} [highlighted]
 * All units provided to "highlighted" as path will be visually
 * highlighted.
 * Note:
 * The d2-ui component used two props for this:
 * * searchResults
 * * highlightSearchResults
 *
 * @prop {Function} [onExpand]
 * Called with { path: string }
 * with the path of the parent of the level opened
 *
 * @prop {Function} [onCollapse]
 * Called with { path: string }
 * with the path of the parent of the level closed
 *
 * @prop {Function} [onChildrenLoaded]
 * Called with the children's data that was loaded
 */


OrganisationUnitTree.propTypes = {
  roots: propTypes$1.oneOfType([propTypes$1.string, propTypes$1.arrayOf(propTypes$1.string)]).isRequired,
  onChange: propTypes$1.func.isRequired,
  autoExpandLoadingError: propTypes$1.bool,
  dataTest: propTypes$1.string,
  disableSelection: propTypes$1.bool,
  filter: propTypes$1.arrayOf(orgUnitPathPropType),
  forceReload: propTypes$1.bool,
  highlighted: propTypes$1.arrayOf(orgUnitPathPropType),
  initiallyExpanded: propTypes$1.arrayOf(orgUnitPathPropType),
  isUserDataViewFallback: propTypes$1.bool,
  selected: propTypes$1.arrayOf(orgUnitPathPropType),
  singleSelection: propTypes$1.bool,
  onChildrenLoaded: propTypes$1.func,
  onCollapse: propTypes$1.func,
  onExpand: propTypes$1.func
  /**
   * @prop {string[]} [idsThatShouldBeReloaded]
   * All units with ids (not paths!) provided
   * to "idsThatShouldBeReloaded" will be reloaded
   * In order to reload an id twice, the array must be changed
   * while keeping the id to reload in the array
   *
   * NOTE: This is currently not working due to a limitation
   * of the data engine (we can't force specific resource to reload,
   * we'd have to reload the sibling nodes currently as well)
   */
  //idsThatShouldBeReloaded: propTypes.arrayOf(orgUnitIdPropType),

};
OrganisationUnitTree.defaultProps = {
  dataTest: 'dhis2-uiwidgets-orgunittree',
  filter: [],
  highlighted: [],
  initiallyExpanded: [],
  selected: []
};

const AddRequired = ({
  label,
  required,
  dataTest
}) => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, label, required && /*#__PURE__*/React__default.createElement(uiCore.Required, {
  dataTest: "".concat(dataTest, "-required")
}));

AddRequired.propTypes = {
  dataTest: propTypes.string,
  label: propTypes.node,
  required: propTypes.bool
};
/**
 * @module
 * @param {CheckboxField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { CheckboxField } from '@dhis2/ui-widgets'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/checkbox.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/checkboxfield--default|Storybook}
 */

const CheckboxField = ({
  value,
  label,
  name,
  className,
  tabIndex,
  onChange,
  onFocus,
  onBlur,
  checked,
  disabled,
  valid,
  warning,
  error,
  dense,
  initialFocus,
  required,
  helpText,
  validationText,
  dataTest
}) => /*#__PURE__*/React__default.createElement(uiCore.Field, {
  className: className,
  dataTest: dataTest,
  helpText: helpText,
  validationText: validationText,
  error: error,
  warning: warning,
  valid: valid,
  disabled: disabled
}, /*#__PURE__*/React__default.createElement(uiCore.Checkbox, {
  value: value,
  label: /*#__PURE__*/React__default.createElement(AddRequired, {
    label: label,
    required: required,
    dataTest: dataTest
  }),
  name: name,
  tabIndex: tabIndex,
  onChange: onChange,
  onFocus: onFocus,
  onBlur: onBlur,
  checked: checked,
  disabled: disabled,
  valid: valid,
  warning: warning,
  error: error,
  dense: dense,
  initialFocus: initialFocus
}));

CheckboxField.defaultProps = {
  dataTest: 'dhis2-uiwidgets-checkboxfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [value]
 * @prop {Node} [label]
 *
 * @prop {string} [name]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 *
 * @prop {function} [onChange]
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 *
 * @prop {boolean} [checked]
 * @prop {boolean} [disabled]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 * @prop {boolean} [initialFocus]
 * @prop {boolean} [required]
 * @prop {string} [helpText]
 * @prop {string} [validationText]
 * @prop {string} [dataTest]
 */

CheckboxField.propTypes = {
  checked: propTypes.bool,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: uiConstants.sharedPropTypes.statusPropType,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  label: propTypes.node,
  name: propTypes.string,
  required: propTypes.bool,
  tabIndex: propTypes.string,
  valid: uiConstants.sharedPropTypes.statusPropType,
  validationText: propTypes.string,
  value: propTypes.string,
  warning: uiConstants.sharedPropTypes.statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 * @param {FieldGroup.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { FieldGroup } from '@dhis2/ui'
 *
 * @example import { FieldGroup } from '@dhis2/ui-widgets'
 */

const FieldGroup = ({
  children,
  className,
  disabled,
  helpText,
  validationText,
  label,
  name,
  required,
  dataTest,
  valid,
  error,
  warning
}) => /*#__PURE__*/React__default.createElement(uiCore.FieldSet, {
  classname: className,
  dataTest: dataTest
}, /*#__PURE__*/React__default.createElement(uiCore.Field, {
  label: label,
  disabled: disabled,
  required: required,
  helpText: helpText,
  validationText: validationText,
  error: error,
  warning: warning,
  valid: valid,
  name: name
}, children));

FieldGroup.defaultProps = {
  dataTest: 'dhis2-uiwidgets-fieldsetfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @private
 *
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {boolean} [disabled]
 * @prop {string} [helpText]
 * @prop {string} [label]
 * @prop {string} [name]
 * @prop {string} [validationText]
 * @prop {boolean} [required]
 * @prop {string} [dataTest]
 * @prop {boolean} [valid] - `valid`, `warning`, and `error`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 */

FieldGroup.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string,
  disabled: propTypes.bool,
  error: uiConstants.sharedPropTypes.statusPropType,
  helpText: propTypes.string,
  label: propTypes.string,
  name: propTypes.string,
  required: propTypes.bool,
  valid: uiConstants.sharedPropTypes.statusPropType,
  validationText: propTypes.string,
  warning: uiConstants.sharedPropTypes.statusPropType
};

/*
 * This allows us to delay calling i18n.t until after the
 * language has been set. Otherwise the translations could
 * potentially use the wrong language.
 *
 * It checks if the passed prop is a function. If so,
 * it'll execute it. Since this should only be called during
 * render, we can be certain that i18n will have initialized.
 */
const translate = prop => {
  if (typeof prop === 'function') {
    return prop();
  }

  return prop;
};

/**
 * @module
 * @param {FileInputField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { FileInputField } from '@dhis2/ui-widgets'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/fileinput.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/fileinputfield--default|Storybook}
 */

const FileInputField = ({
  accept,
  buttonLabel,
  children,
  className,
  dataTest,
  disabled,
  error,
  helpText,
  initialFocus,
  label,
  large,
  multiple,
  name,
  onBlur,
  onChange,
  onFocus,
  placeholder,
  required,
  small,
  tabIndex,
  valid,
  validationText,
  warning
}) => /*#__PURE__*/React__default.createElement(uiCore.Field, {
  className: className,
  dataTest: dataTest,
  helpText: helpText,
  validationText: validationText,
  error: error,
  warning: warning,
  valid: valid
}, label && /*#__PURE__*/React__default.createElement(uiCore.Label, {
  required: required,
  disabled: disabled,
  htmlFor: name
}, label), /*#__PURE__*/React__default.createElement(uiCore.FileInput, {
  accept: accept,
  buttonLabel: translate(buttonLabel),
  className: className,
  disabled: disabled,
  error: error,
  initialFocus: initialFocus,
  large: large,
  multiple: multiple,
  name: name,
  onBlur: onBlur,
  onChange: onChange,
  onFocus: onFocus,
  small: small,
  tabIndex: tabIndex,
  valid: valid,
  warning: warning
}), /*#__PURE__*/React__default.createElement(uiCore.FileList, null, children ? children : /*#__PURE__*/React__default.createElement(uiCore.FileListPlaceholder, null, translate(placeholder))));

FileInputField.defaultProps = {
  accept: '*',
  dataTest: 'dhis2-uiwidgets-fileinputfield',
  buttonLabel: () => i18n.t('Upload a file'),
  placeholder: () => i18n.t('No file uploaded yet')
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [name]
 * @prop {function} [onChange]
 * @prop {function} [onBlur]
 * @prop {function} [onFocus]
 * @prop {string} [label]
 * @prop {string|function} [buttonLabel]
 * @prop {string} [className]
 * @prop {string|function} [placeholder]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [required]
 * @prop {boolean} [disabled]
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning` and `error` are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [small] - `small` and `large` are mutually exclusive
 * @prop {boolean} [large]
 *
 * @prop {string} [validationText]
 * @prop {string} [helpText]
 *
 * @prop {FileListItem|Array.<FileListItem>} [children]
 * @prop {string} [accept=*] - the `accept` attribute of the [native file input]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept}
 * @prop {boolean} [multiple] - the `multiple` attribute of the [native file input]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#multiple}
 * @prop {string} [dataTest]
 */

FileInputField.propTypes = {
  accept: propTypes.string,
  buttonLabel: propTypes.oneOfType([propTypes.string, propTypes.func]),
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string,
  disabled: propTypes.bool,
  error: uiConstants.sharedPropTypes.statusPropType,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  label: propTypes.string,
  large: uiConstants.sharedPropTypes.sizePropType,
  multiple: propTypes.bool,
  name: propTypes.string,
  placeholder: propTypes.oneOfType([propTypes.string, propTypes.func]),
  required: propTypes.bool,
  small: uiConstants.sharedPropTypes.sizePropType,
  tabIndex: propTypes.string,
  valid: uiConstants.sharedPropTypes.statusPropType,
  validationText: propTypes.string,
  warning: uiConstants.sharedPropTypes.statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 *
 * @param {MultiSelectField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { MultiSelectField } from '@dhis2/ui-widgets'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/select.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/multiselectfield--default|Storybook}
 */

class MultiSelectField extends React__default.Component {
  render() {
    const {
      className,
      onChange,
      onFocus,
      onBlur,
      required,
      label,
      valid,
      error,
      disabled,
      warning,
      loading,
      selected,
      tabIndex,
      helpText,
      validationText,
      maxHeight,
      inputMaxHeight,
      inputWidth,
      children,
      clearable,
      clearText,
      filterable,
      filterPlaceholder,
      placeholder,
      prefix,
      empty,
      loadingText,
      noMatchText,
      initialFocus,
      dense,
      dataTest
    } = this.props;
    return /*#__PURE__*/React__default.createElement(uiCore.Field, {
      className: className,
      dataTest: dataTest,
      name: name,
      disabled: disabled,
      required: required,
      label: label,
      helpText: helpText,
      validationText: validationText,
      error: error,
      warning: warning,
      valid: valid
    }, /*#__PURE__*/React__default.createElement(uiCore.Box, {
      width: inputWidth,
      minWidth: "100px"
    }, /*#__PURE__*/React__default.createElement(uiCore.MultiSelect, {
      selected: selected,
      tabIndex: tabIndex,
      maxHeight: maxHeight,
      inputMaxHeight: inputMaxHeight,
      onChange: onChange,
      onFocus: onFocus,
      onBlur: onBlur,
      loading: loading,
      error: error,
      warning: warning,
      valid: valid,
      disabled: disabled,
      clearable: clearable,
      clearText: translate(clearText),
      filterable: filterable,
      filterPlaceholder: translate(filterPlaceholder),
      placeholder: placeholder,
      prefix: prefix,
      empty: translate(empty),
      loadingText: translate(loadingText),
      noMatchText: translate(noMatchText),
      initialFocus: initialFocus,
      dense: dense
    }, children)));
  }

}

MultiSelectField.defaultProps = {
  selected: [],
  dataTest: 'dhis2-uiwidgets-multiselectfield',
  clearText: () => i18n.t('Clear'),
  empty: () => i18n.t('No data found'),
  filterPlaceholder: () => i18n.t('Type to filter options'),
  loadingText: () => i18n.t('Loading options'),
  noMatchText: () => i18n.t('No options found')
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {function} [onChange]
 * @prop {string} [label]
 * @prop {Array.<string>} [selected]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 * @prop {Node} [children]
 * @prop {boolean} [required]
 * @prop {boolean} [disabled]
 * @prop {boolean} [dense]
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, `loading`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {boolean} [initialFocus]
 * @prop {string} [validationText]
 * @prop {string} [helpText]
 * @prop {string|function} [clearText]
 * @prop {boolean} [clearable]
 * @prop {Node|function} [empty]
 * @prop {string|function} [filterPlaceholder]
 * @prop {boolean} [filterable]
 * @prop {string|function} [loadingText]
 * @prop {string} [maxHeight]
 * @prop {string} [inputMaxHeight]
 * @prop {string} [inputWidth]
 * @prop {string|function} [noMatchText]
 * @prop {string} [placeholder]
 * @prop {string} [prefix]
 * @prop {string} [dataTest]
 */

MultiSelectField.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  clearText: propTypes.oneOfType([propTypes.string, propTypes.func]),
  clearable: propTypes.bool,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  empty: propTypes.oneOfType([propTypes.node, propTypes.func]),
  error: uiConstants.sharedPropTypes.statusPropType,
  filterPlaceholder: propTypes.oneOfType([propTypes.node, propTypes.func]),
  filterable: propTypes.bool,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  inputMaxHeight: propTypes.string,
  inputWidth: propTypes.string,
  label: propTypes.string,
  loading: propTypes.bool,
  loadingText: propTypes.oneOfType([propTypes.string, propTypes.func]),
  maxHeight: propTypes.string,
  noMatchText: propTypes.oneOfType([propTypes.string, propTypes.func]),
  placeholder: propTypes.string,
  prefix: propTypes.string,
  required: propTypes.bool,
  selected: propTypes.arrayOf(propTypes.string),
  tabIndex: propTypes.string,
  valid: uiConstants.sharedPropTypes.statusPropType,
  validationText: propTypes.string,
  warning: uiConstants.sharedPropTypes.statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 *
 * @param {SingleSelectField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { SingleSelectField } from '@dhis2/ui-widgets'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/select.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/singleselectfield--default|Storybook}
 */

class SingleSelectField extends React__default.Component {
  render() {
    const {
      className,
      onChange,
      onFocus,
      onBlur,
      required,
      label,
      valid,
      error,
      warning,
      disabled,
      loading,
      selected,
      tabIndex,
      helpText,
      validationText,
      maxHeight,
      inputMaxHeight,
      inputWidth,
      children,
      clearable,
      clearText,
      filterable,
      filterPlaceholder,
      placeholder,
      prefix,
      empty,
      loadingText,
      noMatchText,
      initialFocus,
      dense,
      dataTest
    } = this.props;
    return /*#__PURE__*/React__default.createElement(uiCore.Field, {
      className: className,
      dataTest: dataTest,
      name: name,
      disabled: disabled,
      required: required,
      label: label,
      helpText: helpText,
      validationText: validationText,
      error: error,
      warning: warning,
      valid: valid
    }, /*#__PURE__*/React__default.createElement(uiCore.Box, {
      width: inputWidth,
      minWidth: "100px"
    }, /*#__PURE__*/React__default.createElement(uiCore.SingleSelect, {
      selected: selected,
      tabIndex: tabIndex,
      maxHeight: maxHeight,
      inputMaxHeight: inputMaxHeight,
      onChange: onChange,
      onFocus: onFocus,
      onBlur: onBlur,
      loading: loading,
      error: error,
      warning: warning,
      valid: valid,
      disabled: disabled,
      clearable: clearable,
      clearText: translate(clearText),
      filterable: filterable,
      filterPlaceholder: translate(filterPlaceholder),
      placeholder: placeholder,
      prefix: prefix,
      empty: translate(empty),
      loadingText: translate(loadingText),
      noMatchText: translate(noMatchText),
      initialFocus: initialFocus,
      dense: dense
    }, children)));
  }

}

SingleSelectField.defaultProps = {
  dataTest: 'dhis2-uiwidgets-singleselectfield',
  selected: '',
  clearText: () => i18n.t('Clear'),
  empty: () => i18n.t('No data found'),
  filterPlaceholder: () => i18n.t('Type to filter options'),
  loadingText: () => i18n.t('Loading options'),
  noMatchText: () => i18n.t('No options found')
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {function} [onChange]
 * @prop {string} label
 * @prop {string} [selected]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 * @prop {Node} [children]
 * @prop {boolean} [required]
 * @prop {boolean} [disabled]
 * @prop {boolean} [dense]
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, `loading`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {boolean} [initialFocus]
 * @prop {string} [validationText]
 * @prop {string} [helpText]
 * @prop {string|function} [clearText]
 * @prop {boolean} [clearable]
 * @prop {Node|function} [empty]
 * @prop {string|function} [filterPlaceholder]
 * @prop {boolean} [filterable]
 * @prop {string|function} [loadingText]
 * @prop {string} [maxHeight]
 * @prop {string} [inputMaxHeight]
 * @prop {string} [inputWidth]
 * @prop {string|function} [noMatchText]
 * @prop {string} [placeholder]
 * @prop {string} [prefix]
 * @prop {string} [dataTest]
 */

SingleSelectField.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  clearText: propTypes.oneOfType([propTypes.string, propTypes.func]),
  clearable: propTypes.bool,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  empty: propTypes.oneOfType([propTypes.node, propTypes.func]),
  error: uiConstants.sharedPropTypes.statusPropType,
  filterPlaceholder: propTypes.oneOfType([propTypes.node, propTypes.func]),
  filterable: propTypes.bool,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  inputMaxHeight: propTypes.string,
  inputWidth: propTypes.string,
  label: propTypes.string,
  loading: propTypes.bool,
  loadingText: propTypes.oneOfType([propTypes.string, propTypes.func]),
  maxHeight: propTypes.string,
  noMatchText: propTypes.oneOfType([propTypes.string, propTypes.func]),
  placeholder: propTypes.string,
  prefix: propTypes.string,
  required: propTypes.bool,
  selected: propTypes.string,
  tabIndex: propTypes.string,
  valid: uiConstants.sharedPropTypes.statusPropType,
  validationText: propTypes.string,
  warning: uiConstants.sharedPropTypes.statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

const AddRequired$1 = ({
  label,
  required,
  dataTest
}) => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, label, required && /*#__PURE__*/React__default.createElement(uiCore.Required, {
  dataTest: "".concat(dataTest, "-required")
}));

AddRequired$1.propTypes = {
  dataTest: propTypes.string,
  label: propTypes.node,
  required: propTypes.bool
};
/**
 * @module
 * @param {SwitchField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { SwitchField } from '@dhis2/ui-widgets'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/switch.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/switchfield--default|Storybook}
 */

const SwitchField = ({
  value,
  label,
  name,
  className,
  tabIndex,
  onChange,
  onFocus,
  onBlur,
  checked,
  disabled,
  valid,
  warning,
  error,
  dense,
  initialFocus,
  required,
  helpText,
  validationText,
  dataTest
}) => /*#__PURE__*/React__default.createElement(uiCore.Field, {
  className: className,
  dataTest: dataTest,
  helpText: helpText,
  validationText: validationText,
  error: error,
  warning: warning,
  valid: valid,
  required: required,
  name: name,
  disabled: disabled
}, /*#__PURE__*/React__default.createElement(uiCore.Switch, {
  value: value,
  label: /*#__PURE__*/React__default.createElement(AddRequired$1, {
    label: label,
    required: required,
    dataTest: dataTest
  }),
  name: name,
  tabIndex: tabIndex,
  onChange: onChange,
  onFocus: onFocus,
  onBlur: onBlur,
  checked: checked,
  disabled: disabled,
  valid: valid,
  warning: warning,
  error: error,
  dense: dense,
  initialFocus: initialFocus
}));

SwitchField.defaultProps = {
  dataTest: 'dhis2-uiwidgets-switchfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} value
 * @prop {string} [label]
 *
 * @prop {string} [name]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 *
 * @prop {function} [onChange]
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 *
 * @prop {boolean} [checked]
 * @prop {boolean} [disabled]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 * @prop {boolean} [initialFocus]
 * @prop {boolean} [required]
 * @prop {string} [helpText]
 * @prop {string} [validationText]
 * @prop {string} [dataTest]
 */

SwitchField.propTypes = {
  checked: propTypes.bool,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: uiConstants.sharedPropTypes.statusPropType,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  label: propTypes.node,
  name: propTypes.string,
  required: propTypes.bool,
  tabIndex: propTypes.string,
  valid: uiConstants.sharedPropTypes.statusPropType,
  validationText: propTypes.string,
  value: propTypes.string,
  warning: uiConstants.sharedPropTypes.statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 * @param {TextAreaField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { TextAreaField } from '@dhis2/ui-widgets'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/update-input/atoms/inputfield.md#textarea|Design system}
 * @see Live demo: {@link /demo/?path=/story/textareafield--default|Storybook}
 */

const TextAreaField = ({
  className,
  onChange,
  onFocus,
  onBlur,
  initialFocus,
  dense,
  required,
  label,
  disabled,
  placeholder,
  name,
  valid,
  error,
  warning,
  loading,
  value,
  tabIndex,
  helpText,
  validationText,
  autoGrow,
  readOnly,
  resize,
  rows,
  inputWidth,
  dataTest
}) => /*#__PURE__*/React__default.createElement(uiCore.Field, {
  className: className,
  dataTest: dataTest,
  disabled: disabled,
  required: required,
  name: name,
  helpText: helpText,
  validationText: validationText,
  error: error,
  warning: warning,
  valid: valid,
  label: label
}, /*#__PURE__*/React__default.createElement(uiCore.Box, {
  width: inputWidth,
  minWidth: "220px"
}, /*#__PURE__*/React__default.createElement(uiCore.TextArea, {
  onFocus: onFocus,
  onBlur: onBlur,
  onChange: onChange,
  name: name,
  value: value || '',
  placeholder: placeholder,
  disabled: disabled,
  valid: valid,
  warning: warning,
  error: error,
  loading: loading,
  dense: dense,
  tabIndex: tabIndex,
  initialFocus: initialFocus,
  autoGrow: autoGrow,
  readOnly: readOnly,
  resize: resize,
  rows: rows
})));

TextAreaField.defaultProps = {
  rows: 4,
  width: '100%',
  resize: 'vertical',
  dataTest: 'dhis2-uiwidgets-textareafield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} name
 * @prop {function} [onChange]
 * @prop {function} [onBlur]
 * @prop {function} [onFocus]
 * @prop {string} [label]
 * @prop {string} [className]
 * @prop {string} [placeholder]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [required]
 * @prop {boolean} [disabled]
 * @prop {boolean} [dense] - Compact mode
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, and `loading`
 * are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 *
 * @prop {string} [validationText]
 * @prop {string} [helpText]
 *
 * @prop {boolean} [autoGrow]
 * @prop {boolean} [readOnly]
 * @prop {string} [resize=vertical] - resize attribute on the textarea,
 * one of `none`, `both`, `horizontal`, `vertical`
 * @prop {number} [rows=4]
 * @prop {string} [inputWidth]
 * @prop {string} [dataTest]
 */

TextAreaField.propTypes = {
  autoGrow: propTypes.bool,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: uiConstants.sharedPropTypes.statusPropType,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  inputWidth: propTypes.string,
  label: propTypes.string,
  loading: propTypes.bool,
  name: propTypes.string,
  placeholder: propTypes.string,
  readOnly: propTypes.bool,
  required: propTypes.bool,
  resize: propTypes.oneOf(['none', 'both', 'horizontal', 'vertical']),
  rows: propTypes.number,
  tabIndex: propTypes.string,
  valid: uiConstants.sharedPropTypes.statusPropType,
  validationText: propTypes.string,
  value: propTypes.string,
  warning: uiConstants.sharedPropTypes.statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

const Actions = ({
  children,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["1457814848", [uiConstants.spacers.dp8]]])
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1457814848",
  dynamic: [uiConstants.spacers.dp8]
}, ["div.__jsx-style-dynamic-selector{-webkit-align-content:center;-ms-flex-line-pack:center;align-content:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex-shrink:1;-ms-flex-negative:1;flex-shrink:1;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;margin:0 ".concat(uiConstants.spacers.dp8, ";}"), "div.__jsx-style-dynamic-selector>button{margin-top:8px;}", "div.__jsx-style-dynamic-selector>button:first-child{margin-top:0;}"]));
Actions.propTypes = {
  dataTest: propTypes.string.isRequired,
  children: propTypes.node
};

const centerButtonStyles = ["svg.jsx-114231192{min-width:20px;}"];
centerButtonStyles.__hash = "114231192";
const IconAddAll = ({
  dataTest,
  disabled
}) => /*#__PURE__*/React__default.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "16",
  height: "16",
  viewBox: "0 0 16 16",
  "data-test": dataTest,
  fill: disabled ? uiConstants.theme.disabled : '#404B5A',
  className: "jsx-".concat(centerButtonStyles.__hash)
}, /*#__PURE__*/React__default.createElement("g", {
  fillRule: "evenodd",
  className: "jsx-".concat(centerButtonStyles.__hash)
}, /*#__PURE__*/React__default.createElement("polygon", {
  fillRule: "nonzero",
  points: "6 2 4.94 3.06 9.13 7.25 0 7.25 0 8.75 9.13 8.75 4.94 12.94 6 14 12 8",
  className: "jsx-".concat(centerButtonStyles.__hash)
}), /*#__PURE__*/React__default.createElement("polygon", {
  fillRule: "nonzero",
  points: "10 2 8.94 3.06 13.13 7.25 13.9 8 13.13 8.75 8.94 12.94 10 14 16 8",
  className: "jsx-".concat(centerButtonStyles.__hash)
})), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: centerButtonStyles.__hash
}, centerButtonStyles));
IconAddAll.propTypes = {
  dataTest: propTypes.string.isRequired,
  disabled: propTypes.bool
};
const IconAddIndividual = ({
  dataTest,
  disabled
}) => /*#__PURE__*/React__default.createElement("svg", {
  fill: disabled ? uiConstants.theme.disabled : '#404B5A',
  xmlns: "http://www.w3.org/2000/svg",
  width: "16",
  height: "16",
  viewBox: "0 0 16 16",
  "data-test": dataTest,
  className: "jsx-".concat(centerButtonStyles.__hash)
}, /*#__PURE__*/React__default.createElement("polygon", {
  points: "8 2 6.94 3.06 11.13 7.25 2 7.25 2 8.75 11.13 8.75 6.94 12.94 8 14 14 8",
  className: "jsx-".concat(centerButtonStyles.__hash)
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: centerButtonStyles.__hash
}, centerButtonStyles));
IconAddIndividual.propTypes = {
  dataTest: propTypes.string.isRequired,
  disabled: propTypes.bool
};
const IconRemoveAll = ({
  dataTest,
  disabled
}) => /*#__PURE__*/React__default.createElement("svg", {
  fill: disabled ? uiConstants.theme.disabled : '#404B5A',
  width: "16px",
  height: "16px",
  viewBox: "0 0 16 16",
  "data-test": dataTest,
  xmlns: "http://www.w3.org/2000/svg",
  className: "jsx-".concat(centerButtonStyles.__hash)
}, /*#__PURE__*/React__default.createElement("g", {
  fillRule: "evenodd",
  className: "jsx-".concat(centerButtonStyles.__hash)
}, /*#__PURE__*/React__default.createElement("polygon", {
  fillRule: "nonzero",
  points: "10 2 8.94 3.06 13.13 7.25 4 7.25 4 8.75 13.13 8.75 8.94 12.94 10 14 16 8",
  transform: "matrix(-1 0 0 1 20 0)",
  className: "jsx-".concat(centerButtonStyles.__hash)
}), /*#__PURE__*/React__default.createElement("polygon", {
  fillRule: "nonzero",
  points: "1.06 2 0 3.06 4.19 7.25 4.96 8 4.19 8.75 0 12.94 1.06 14 7.06 8",
  transform: "matrix(-1 0 0 1 7.06 0)",
  className: "jsx-".concat(centerButtonStyles.__hash)
})), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: centerButtonStyles.__hash
}, centerButtonStyles));
IconRemoveAll.propTypes = {
  dataTest: propTypes.string.isRequired,
  disabled: propTypes.bool
};
const IconRemoveIndividual = ({
  dataTest,
  disabled
}) => /*#__PURE__*/React__default.createElement("svg", {
  fill: disabled ? uiConstants.theme.disabled : '#404B5A',
  xmlns: "http://www.w3.org/2000/svg",
  width: "16",
  height: "16",
  viewBox: "0 0 16 16",
  "data-test": dataTest,
  className: "jsx-".concat(centerButtonStyles.__hash)
}, /*#__PURE__*/React__default.createElement("polygon", {
  points: "8 2 6.94 3.06 11.13 7.25 2 7.25 2 8.75 11.13 8.75 6.94 12.94 8 14 14 8",
  transform: "matrix(-1 0 0 1 16 0)",
  className: "jsx-".concat(centerButtonStyles.__hash)
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: centerButtonStyles.__hash
}, centerButtonStyles));
IconRemoveIndividual.propTypes = {
  dataTest: propTypes.string.isRequired,
  disabled: propTypes.bool
};
const IconMoveDown = ({
  dataTest,
  disabled
}) => /*#__PURE__*/React__default.createElement("svg", {
  fill: disabled ? uiConstants.theme.disabled : '#404B5A',
  xmlns: "http://www.w3.org/2000/svg",
  width: "16",
  height: "16",
  viewBox: "0 0 16 16",
  "data-test": dataTest
}, /*#__PURE__*/React__default.createElement("polygon", {
  points: "8 2 6.94 3.06 11.13 7.25 2 7.25 2 8.75 11.13 8.75 6.94 12.94 8 14 14 8",
  transform: "matrix(0 1 1 0 0 0)"
}));
IconMoveDown.propTypes = {
  dataTest: propTypes.string.isRequired,
  disabled: propTypes.bool
};
const IconMoveUp = ({
  dataTest,
  disabled
}) => /*#__PURE__*/React__default.createElement("svg", {
  fill: disabled ? uiConstants.theme.disabled : '#404B5A',
  xmlns: "http://www.w3.org/2000/svg",
  width: "16",
  height: "16",
  viewBox: "0 0 16 16",
  "data-test": dataTest
}, /*#__PURE__*/React__default.createElement("polygon", {
  points: "8 2 6.94 3.06 11.13 7.25 2 7.25 2 8.75 11.13 8.75 6.94 12.94 8 14 14 8",
  transform: "rotate(-90 8 8)"
}));
IconMoveUp.propTypes = {
  dataTest: propTypes.string.isRequired,
  disabled: propTypes.bool
};

const AddAll = ({
  label,
  dataTest,
  disabled,
  onClick
}) => /*#__PURE__*/React__default.createElement(uiCore.Button, {
  dataTest: dataTest,
  disabled: disabled,
  onClick: onClick,
  icon: /*#__PURE__*/React__default.createElement(IconAddAll, {
    dataTest: "".concat(dataTest, "-iconaddall"),
    disabled: disabled
  })
}, label);
AddAll.propTypes = {
  dataTest: propTypes.string.isRequired,
  onClick: propTypes.func.isRequired,
  disabled: propTypes.bool,
  label: propTypes.string
};

const AddIndividual = ({
  label,
  dataTest,
  disabled,
  onClick
}) => /*#__PURE__*/React__default.createElement(uiCore.Button, {
  dataTest: dataTest,
  disabled: disabled,
  onClick: onClick,
  icon: /*#__PURE__*/React__default.createElement(IconAddIndividual, {
    disabled: disabled,
    dataTest: "".concat(dataTest, "-iconaddindividual")
  })
}, label);
AddIndividual.propTypes = {
  dataTest: propTypes.string.isRequired,
  onClick: propTypes.func.isRequired,
  disabled: propTypes.bool,
  label: propTypes.string
};

const Container = ({
  children,
  dataTest,
  className,
  height
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["3332822660", [height]]]) + " " + (className || "")
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3332822660",
  dynamic: [height]
}, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;height:".concat(height, ";}")]));
Container.propTypes = {
  height: propTypes.string.isRequired,
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string
};

const Filter = ({
  dataTest,
  filter,
  onChange,
  label,
  placeholder
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["3679907342", [uiConstants.spacers.dp8, uiConstants.spacers.dp8]]])
}, /*#__PURE__*/React__default.createElement(uiCore.Field, {
  label: label,
  name: dataTest,
  dataTest: "".concat(dataTest, "-field")
}, /*#__PURE__*/React__default.createElement(uiCore.Input, {
  dataTest: "".concat(dataTest, "-input"),
  type: "search",
  placeholder: placeholder,
  name: dataTest,
  value: filter,
  onChange: onChange
})), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3679907342",
  dynamic: [uiConstants.spacers.dp8, uiConstants.spacers.dp8]
}, ["div.__jsx-style-dynamic-selector{padding-bottom:".concat(uiConstants.spacers.dp8, ";}"), "div.__jsx-style-dynamic-selector:first-child{padding-top:".concat(uiConstants.spacers.dp8, ";}")]));
Filter.propTypes = {
  dataTest: propTypes.string.isRequired,
  filter: propTypes.string.isRequired,
  onChange: propTypes.func.isRequired,
  label: propTypes.string,
  placeholder: propTypes.string
};

/**
 * Click modes when clicking on an option with/without
 * a modifier key (ctrl, alt, cmd, shift)
 */
// no or multiple modifier keys
const REPLACE_MODE = 'REPLACE_MODE'; // add/remove options from selection

const ADD_MODE = 'ADD_MODE'; // create selection range

const RANGE_MODE = 'RANGE_MODE';

const borderColor = uiConstants.colors.grey400;
const borderRadius = '3px';

/**
 * @param {Object} left
 * @param {Object} left
 * @returns {bool}
 */
const isOption = (left, right) => left.label === right.label && left.value === right.value;

/**
 * @param {Object[]} options
 * @param {Object} option
 * @returns {Int}
 */

const findOptionIndex = (options, option) => options.findIndex(current => isOption(current, option));

/**
 * @param {Object} args
 * @param {bool} args.altKey
 * @param {bool} args.shiftKey
 * @param {bool} args.ctrlKey
 * @param {bool} args.metaKey
 * @return {string}
 */

const getModeByModifierKey = ({
  altKey,
  shiftKey,
  ctrlKey,
  metaKey
}) => {
  const keys = [altKey, shiftKey, ctrlKey, metaKey];
  const amountKeyPressed = keys.filter(v => v);
  const moreThanOneKeyPressed = amountKeyPressed.length;
  if (moreThanOneKeyPressed !== 1) return REPLACE_MODE;
  if (altKey || ctrlKey || metaKey) return ADD_MODE;
  if (shiftKey) return RANGE_MODE; // default to replace mode

  return REPLACE_MODE;
};

/**
 * @param {string[]} values
 * @param {string} value
 * @returns {string[]}
 */
const toggleValue = (values, value) => {
  const index = values.indexOf(value);

  if (index === -1) {
    return [...values, value];
  } else if (index === 0) {
    values.slice(1);
  }

  const prevSlice = values.slice(0, index);
  const nextSlice = values.slice(index + 1);
  return [...prevSlice, ...nextSlice];
};

const LeftFooter = ({
  children,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["3629116366", [borderColor, uiConstants.spacers.dp8]]])
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3629116366",
  dynamic: [borderColor, uiConstants.spacers.dp8]
}, ["div.__jsx-style-dynamic-selector{-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;border-top:1px solid ".concat(borderColor, ";padding:0 ").concat(uiConstants.spacers.dp8, ";}")]));
LeftFooter.propTypes = {
  children: propTypes.node,
  dataTest: propTypes.string
};

const LeftHeader = ({
  children,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["2175954399", [borderColor, uiConstants.spacers.dp8]]])
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2175954399",
  dynamic: [borderColor, uiConstants.spacers.dp8]
}, ["div.__jsx-style-dynamic-selector{border-bottom:1px solid ".concat(borderColor, ";-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;padding:0 ").concat(uiConstants.spacers.dp8, ";}")]));
LeftHeader.propTypes = {
  children: propTypes.node,
  dataTest: propTypes.string
};

const LeftSide = ({
  children,
  dataTest,
  width
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["3852828828", [borderRadius, borderColor, width]]])
}, children,
/**
 * Flex basis 0px to make sure right and left side
 * always have the same width
 */
'', /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3852828828",
  dynamic: [borderRadius, borderColor, width]
}, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;border-radius:".concat(borderRadius, ";border:1px solid ").concat(borderColor, ";min-height:240px;max-width:100%;width:").concat(width, ";}")]));
LeftSide.propTypes = {
  width: propTypes.string.isRequired,
  children: propTypes.node,
  dataTest: propTypes.string
};

const EndIntersectionDetector = ({
  rootRef,
  onEndReached,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: "jsx-4200578429"
}, /*#__PURE__*/React__default.createElement(uiCore.IntersectionDetector, {
  rootRef: rootRef,
  onChange: ({
    isIntersecting
  }) => isIntersecting && onEndReached()
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "4200578429"
}, ["div.jsx-4200578429{width:100%;height:50px;position:absolute;z-index:-1;bottom:0;left:0;}"]));
EndIntersectionDetector.propTypes = {
  rootRef: propTypes.shape({
    current: propTypes.instanceOf(HTMLElement)
  }).isRequired,
  onEndReached: propTypes.func.isRequired,
  dataTest: propTypes.string
};

const OptionsContainer = ({
  dataTest,
  emptyComponent,
  onEndReached,
  getOptionClickHandlers,
  highlightedOptions,
  loading,
  renderOption,
  options,
  selectionHandler,
  toggleHighlightedOption
}) => {
  const [remountCounter, setRemountCounter] = React.useState(0);
  const [resizeObserver, setResizeObserver] = React.useState(null);
  const optionsRef = React.useRef(null);
  const wrapperRef = React.useRef(null);
  React.useEffect(() => {
    if (onEndReached && wrapperRef.current) {
      // The initial call is irrelevant as there has been
      // no resize yet that we want to react to
      let firstCall = false;
      const observer = new ResizeObserver(() => {
        if (!firstCall) {
          const newCounter = remountCounter + 1;
          setRemountCounter(newCounter);
          firstCall = true;
        }
      });
      observer.observe(wrapperRef.current);
      setResizeObserver(observer);
      return () => observer.disconnect();
    }
  }, [onEndReached, wrapperRef.current, setRemountCounter]);
  return /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["889751462", [uiConstants.spacers.dp4]]]) + " " + "optionsContainer"
  }, loading && /*#__PURE__*/React__default.createElement("div", {
    className: _JSXStyle.dynamic([["889751462", [uiConstants.spacers.dp4]]]) + " " + "loading"
  }, /*#__PURE__*/React__default.createElement(uiCore.CircularLoader, null)), /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest,
    ref: optionsRef,
    className: _JSXStyle.dynamic([["889751462", [uiConstants.spacers.dp4]]]) + " " + "container"
  }, /*#__PURE__*/React__default.createElement("div", {
    ref: wrapperRef,
    className: _JSXStyle.dynamic([["889751462", [uiConstants.spacers.dp4]]]) + " " + "content-container"
  }, !options.length && emptyComponent, options.map(option => {
    const highlighted = !!highlightedOptions.find(highlightedSourceOption => highlightedSourceOption === option.value);
    return /*#__PURE__*/React__default.createElement(React.Fragment, {
      key: option.value
    }, renderOption(_objectSpread2({}, option, {}, getOptionClickHandlers(option, selectionHandler, toggleHighlightedOption), {
      highlighted,
      selected: false
    })));
  }), onEndReached && resizeObserver && /*#__PURE__*/React__default.createElement(EndIntersectionDetector, {
    dataTest: "".concat(dataTest, "-endintersectiondetector"),
    key: "key-".concat(remountCounter),
    rootRef: optionsRef,
    onEndReached: onEndReached
  }))), /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "889751462",
    dynamic: [uiConstants.spacers.dp4]
  }, [".optionsContainer.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;padding:".concat(uiConstants.spacers.dp4, " 0;position:relative;overflow:hidden;}"), ".container.__jsx-style-dynamic-selector{overflow-y:auto;height:100%;}", ".loading.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;height:100%;width:100%;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:absolute;z-index:2;top:0;left:0;}", ".content-container.__jsx-style-dynamic-selector{z-index:1;position:relative;}", ".loading.__jsx-style-dynamic-selector+.container.__jsx-style-dynamic-selector .content-container.__jsx-style-dynamic-selector{-webkit-filter:blur(2px);filter:blur(2px);}"]));
};
OptionsContainer.propTypes = {
  dataTest: propTypes.string.isRequired,
  getOptionClickHandlers: propTypes.func.isRequired,
  emptyComponent: propTypes.node,
  highlightedOptions: propTypes.arrayOf(propTypes.string),
  loading: propTypes.bool,
  options: propTypes.arrayOf(propTypes.shape({
    label: propTypes.string.isRequired,
    value: propTypes.string.isRequired
  })),
  renderOption: propTypes.func,
  selectionHandler: propTypes.func,
  toggleHighlightedOption: propTypes.func,
  onEndReached: propTypes.func
};

const RemoveAll = ({
  label,
  dataTest,
  disabled,
  onClick
}) => /*#__PURE__*/React__default.createElement(uiCore.Button, {
  dataTest: dataTest,
  disabled: disabled,
  onClick: onClick,
  icon: /*#__PURE__*/React__default.createElement(IconRemoveAll, {
    disabled: disabled,
    dataTest: "".concat(dataTest, "-iconremoveall")
  })
}, label);
RemoveAll.propTypes = {
  dataTest: propTypes.string.isRequired,
  onClick: propTypes.func.isRequired,
  disabled: propTypes.bool,
  label: propTypes.string
};

const RemoveIndividual = ({
  label,
  dataTest,
  disabled,
  onClick
}) => /*#__PURE__*/React__default.createElement(uiCore.Button, {
  dataTest: dataTest,
  disabled: disabled,
  onClick: onClick,
  icon: /*#__PURE__*/React__default.createElement(IconRemoveIndividual, {
    disabled: disabled,
    dataTest: "".concat(dataTest, "-iconremoveindividual")
  })
}, label);
RemoveIndividual.propTypes = {
  dataTest: propTypes.string.isRequired,
  onClick: propTypes.func.isRequired,
  disabled: propTypes.bool,
  label: propTypes.string
};

const ReorderingActions = ({
  dataTest,
  disabledDown,
  disabledUp,
  onChangeUp,
  onChangeDown
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["1295471940", [uiConstants.spacers.dp8, uiConstants.spacers.dp8, uiConstants.spacers.dp8]]])
}, /*#__PURE__*/React__default.createElement(uiCore.Button, {
  small: true,
  disabled: disabledDown,
  onClick: () => !disabledDown && onChangeDown(event),
  dataTest: "".concat(dataTest, "-buttonmovedown"),
  icon: /*#__PURE__*/React__default.createElement(IconMoveDown, {
    dataTest: "".concat(dataTest, "-iconmovedown"),
    disabled: disabledDown
  })
}), /*#__PURE__*/React__default.createElement(uiCore.Button, {
  small: true,
  disabled: disabledUp,
  onClick: () => !disabledUp && onChangeUp(event),
  dataTest: "".concat(dataTest, "-buttonmoveup"),
  icon: /*#__PURE__*/React__default.createElement(IconMoveUp, {
    dataTest: "".concat(dataTest, "-iconmoveup"),
    disabled: disabledUp
  })
}), /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "1295471940",
  dynamic: [uiConstants.spacers.dp8, uiConstants.spacers.dp8, uiConstants.spacers.dp8]
}, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row-reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse;padding-top:".concat(uiConstants.spacers.dp8, ";}"), "div.__jsx-style-dynamic-selector:last-child{padding-bottom:".concat(uiConstants.spacers.dp8, ";}"), "div.__jsx-style-dynamic-selector>button:first-child{margin-left:".concat(uiConstants.spacers.dp8, ";}")]));
ReorderingActions.propTypes = {
  dataTest: propTypes.string.isRequired,
  onChangeDown: propTypes.func.isRequired,
  onChangeUp: propTypes.func.isRequired,
  disabledDown: propTypes.bool,
  disabledUp: propTypes.bool
};

const RightHeader = ({
  children,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["2175954399", [borderColor, uiConstants.spacers.dp8]]])
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "2175954399",
  dynamic: [borderColor, uiConstants.spacers.dp8]
}, ["div.__jsx-style-dynamic-selector{border-bottom:1px solid ".concat(borderColor, ";-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;padding:0 ").concat(uiConstants.spacers.dp8, ";}")]));
RightHeader.propTypes = {
  children: propTypes.node,
  dataTest: propTypes.string
};

const RightFooter = ({
  children,
  dataTest
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["3629116366", [borderColor, uiConstants.spacers.dp8]]])
}, children, /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "3629116366",
  dynamic: [borderColor, uiConstants.spacers.dp8]
}, ["div.__jsx-style-dynamic-selector{-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;border-top:1px solid ".concat(borderColor, ";padding:0 ").concat(uiConstants.spacers.dp8, ";}")]));
RightFooter.propTypes = {
  children: propTypes.node,
  dataTest: propTypes.string
};

const RightSide = ({
  children,
  dataTest,
  width
}) => /*#__PURE__*/React__default.createElement("div", {
  "data-test": dataTest,
  className: _JSXStyle.dynamic([["429791440", [borderColor, borderRadius, width]]])
}, children,
/**
 * Flex basis 0px to make sure right and left side
 * always have the same width
 */
'', /*#__PURE__*/React__default.createElement(_JSXStyle, {
  id: "429791440",
  dynamic: [borderColor, borderRadius, width]
}, ["div.__jsx-style-dynamic-selector{border:1px solid ".concat(borderColor, ";border-radius:").concat(borderRadius, ";display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;max-width:100%;width:").concat(width, ";}")]));
RightSide.propTypes = {
  width: propTypes.string.isRequired,
  children: propTypes.node,
  dataTest: propTypes.string
};

const DOUBLE_CLICK_MAX_DELAY = 500;
/**
 * @module
 * @param {TransferOption.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { TransferOption } from '@dhis2/ui-core'
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/organisms/transfer.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/transfer--basic|Storybook}
 */

const TransferOption = ({
  className,
  disabled,
  dataTest,
  highlighted,
  onClick: _onClick,
  onDoubleClick,
  label,
  value
}) => {
  const doubleClickTimeout = React.useRef(null);
  return /*#__PURE__*/React__default.createElement("div", {
    "data-test": dataTest,
    onClick: event => {
      if (disabled) return;

      if (doubleClickTimeout.current) {
        clearTimeout(doubleClickTimeout.current);
        doubleClickTimeout.current = null;
        onDoubleClick({
          value
        }, event);
      } else {
        doubleClickTimeout.current = setTimeout(() => {
          clearTimeout(doubleClickTimeout.current);
          doubleClickTimeout.current = null;
        }, DOUBLE_CLICK_MAX_DELAY);

        _onClick({
          value
        }, event);
      }
    },
    "data-value": value,
    className: _JSXStyle.dynamic([["4216903932", [uiConstants.colors.grey900, uiConstants.colors.grey200, uiConstants.colors.teal700, uiConstants.colors.white, uiConstants.colors.grey600]]]) + " " + (cx(className, {
      highlighted,
      disabled
    }) || "")
  }, label, /*#__PURE__*/React__default.createElement(_JSXStyle, {
    id: "4216903932",
    dynamic: [uiConstants.colors.grey900, uiConstants.colors.grey200, uiConstants.colors.teal700, uiConstants.colors.white, uiConstants.colors.grey600]
  }, ["div.__jsx-style-dynamic-selector{font-size:14px;line-height:16px;padding:4px 8px;color:".concat(uiConstants.colors.grey900, ";-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}"), "div.__jsx-style-dynamic-selector:hover{background:".concat(uiConstants.colors.grey200, ";}"), "div.highlighted.__jsx-style-dynamic-selector{background:".concat(uiConstants.colors.teal700, ";color:").concat(uiConstants.colors.white, ";}"), "div.disabled.__jsx-style-dynamic-selector{color:".concat(uiConstants.colors.grey600, ";cursor:not-allowed;}")]));
};
TransferOption.defaultProps = {
  dataTest: 'dhis2-uicore-transferoption'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} label
 * @prop {string} value
 * @prop {Object} [additionalData]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 * @prop {bool} [disabled]
 * @prop {bool} [highlighted]
 * @prop {Function} [onClick]
 * @prop {Function} [onDoubleClick]
 */

TransferOption.propTypes = {
  label: propTypes.string.isRequired,
  value: propTypes.string.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  disabled: propTypes.bool,
  highlighted: propTypes.bool,
  onClick: propTypes.func,
  onDoubleClick: propTypes.func
};

/**
 * @param {Object} args
 * @param {Object[]} args.sourceOptions
 * @param {string[]} args.selected
 * @param {Function} args.onChange
 * @param {Function} arg.setHighlightedSourceOptions
 * @returns {void}
 */
const addAllSelectableSourceOptions = ({
  sourceOptions,
  onChange,
  selected,
  setHighlightedSourceOptions
}) => {
  const enabledSourceOptions = sourceOptions.filter(({
    disabled
  }) => !disabled);
  const newSelected = enabledSourceOptions.reduce((accumulatedSelected, enabledSourceOption) => [...accumulatedSelected, enabledSourceOption.value], selected);
  setHighlightedSourceOptions([]); // If we ever allow maxSelection to be any value
  // other than 1 and Infinity, we need to think
  // about how this should behave:
  //
  // Either we hide this button when it's not "Infinity",
  // or we have to decide whether we want to take the first
  // nth options or the last

  onChange({
    selected: newSelected
  });
};

/**
 * @param {Object} args
 * @param {bool} args.filterable
 * @param {Object[]} args.sourceOptions
 * @param {string[]} args.highlightedSourceOptions
 * @param {string[]} args.selected
 * @param {Function} args.onChange
 * @param {Function} args.setHighlightedSourceOptions
 * @returns void
 */
const addIndividualSourceOptions = ({
  filterable,
  sourceOptions,
  highlightedSourceOptions,
  maxSelections,
  onChange,
  selected,
  setHighlightedSourceOptions
}) => {
  /**
   * Creates a subset of the highlighted options to reflect a changed
   * filter value in case previously highlighted options are now
   * hidden.
   *
   * This enables us to keep items highlighted while searching for
   * a particular one.
   *
   * With this subset we only select the subset when the user
   * clicks the "add individuals" button
   */
  const filteredHighlightedSourceOptions = filterable ? highlightedSourceOptions.filter(value => sourceOptions.find(filteredOption => filteredOption.value === value)) : highlightedSourceOptions;
  const newSelected = filteredHighlightedSourceOptions.reduce((accumulatedSelected, value) => [...accumulatedSelected, filteredHighlightedSourceOptions.find(filteredHighlightedSourceOption => filteredHighlightedSourceOption === value)], selected);
  setHighlightedSourceOptions([]);
  /**
   * This will extract from the end, hence the "-1 *"
   * As the "newest" additions are always at the end of the array,
   * it's safe to just take the last nth (depending on maxSelection)
   * to always get the right ones
   */

  onChange({
    selected: newSelected.slice(-1 * maxSelections)
  });
};

/**
 * @param {Object} args
 * @param {number} args.maxSelections
 * @param {string[]} args.selected
 * @param {Function} args.onChange
 * @param {Function} args.setHighlightedSourceOptions
 * @param {Function} args.setHighlightedPickedOptions
 * @returns void
 */
const createDoubleClickHandlers = ({
  maxSelections,
  onChange,
  selected,
  setHighlightedPickedOptions,
  setHighlightedSourceOptions
}) => {
  const selectSingleOption = ({
    value
  }) => {
    const newSelected = selected.includes(value) ? selected : [...selected, value];
    setHighlightedSourceOptions([]);
    onChange({
      selected: newSelected.slice(-1 * maxSelections)
    });
  };

  const deselectSingleOption = ({
    value
  }) => {
    const newSelected = selected.filter(curSelected => curSelected !== value);
    setHighlightedPickedOptions([]);
    onChange({
      selected: newSelected
    });
  };

  return {
    selectSingleOption,
    deselectSingleOption
  };
};

/**
 * @param {Object[]} options
 * @param {string} filter
 * @returns {Object[]}
 */
const defaultFilterCallback = (options, filter) => filter === '' ? options : options.filter(({
  label
}) => label.match(new RegExp(filter, 'i')));

/**
 * @param {Object} option
 * @param {Function} selectionHandler
 * @param {Function} toggleHighlightedOption
 * @returns {Object}
 */

const getOptionClickHandlers = (option, selectionHandler, toggleHighlightedOption) => ({
  onClick: (_, event) => {
    const mode = getModeByModifierKey(event);
    toggleHighlightedOption({
      option,
      mode
    });
  },
  onDoubleClick: selectionHandler
});

/**
 * @param {Object} args
 * @param {string} args.highlightedPickedOptions
 * @param {string[]} args.selected
 * @returns {bool}
 */
const isReorderDownDisabled = ({
  highlightedPickedOptions,
  selected
}) => // only one item can be moved with the buttons
highlightedPickedOptions.length !== 1 || // can't move an item down if it's the last one
selected.indexOf(highlightedPickedOptions[0]) === selected.length - 1;

/**
 * @param {Object} args
 * @param {string} args.highlightedPickedOptions
 * @param {string[]} args.selected
 * @returns {bool}
 */
const isReorderUpDisabled = ({
  highlightedPickedOptions,
  selected
}) => // only one item can be moved with the buttons
highlightedPickedOptions.length !== 1 || // can't move an item up if it's the first one
selected.indexOf(highlightedPickedOptions[0]) === 0;

/**
 * @param {Object} args
 * @param {string[]} args.selected
 * @param {string[]} args.highlightedPickedOptions
 * @param {Function} args.onChange
 * @returns {void}
 */
const moveHighlightedPickedOptionDown = ({
  selected,
  highlightedPickedOptions,
  onChange
}) => {
  const optionIndex = selected.findIndex(selectedOption => selectedOption === highlightedPickedOptions[0]); // Can't move down last or non-existing option

  if (optionIndex === -1 || optionIndex > selected.length - 2) return; // swap with next item

  const reordered = [...selected.slice(0, optionIndex), selected[optionIndex + 1], selected[optionIndex], ...selected.slice(optionIndex + 2)];
  onChange({
    selected: reordered
  });
};

/**
 * @param {Object} args
 * @param {string[]} args.selected
 * @param {string[]} args.highlightedPickedOptions
 * @param {Function} args.onChange
 * @returns {void}
 */
const moveHighlightedPickedOptionUp = ({
  selected,
  highlightedPickedOptions,
  onChange
}) => {
  const optionIndex = selected.findIndex(selectedOption => selectedOption === highlightedPickedOptions[0]); // Can't move up option at index 0 or non-existing option

  if (optionIndex < 1) return; // swap with previous item

  const reordered = [...selected.slice(0, optionIndex - 1), selected[optionIndex], selected[optionIndex - 1], ...selected.slice(optionIndex + 1)];
  onChange({
    selected: reordered
  });
};

/**
 * @param {Object} args
 * @param {Function} args.setHighlightedPickedOptions
 * @param {Function} args.onChange
 * @returns {void}
 */
const removeAllPickedOptions = ({
  setHighlightedPickedOptions,
  onChange
}) => {
  setHighlightedPickedOptions([]);
  onChange({
    selected: []
  });
};

/**
 * @param {Object} args
 * @param {string[]} args.highlightedPickedOptions
 * @param {string[]} args.selected
 * @param {Function} args.setHighlightedPickedOptions
 * @param {Function} args.onChange
 * @returns {void}
 */
const removeIndividualPickedOptions = ({
  filterablePicked,
  pickedOptions,
  highlightedPickedOptions,
  onChange,
  selected,
  setHighlightedPickedOptions
}) => {
  /**
   * Creates a subset of the highlighted options to reflect a changed
   * filter value in case previously highlighted options are now
   * hidden.
   *
   * This enables us to keep items highlighted while searching for
   * a particular one.
   *
   * With this subset we only select the subset when the user
   * clicks the "add individuals" button
   */
  const filteredHighlightedPickedOptions = filterablePicked ? highlightedPickedOptions.filter(value => pickedOptions.find(filteredOption => filteredOption.value === value)) : highlightedPickedOptions;
  const newSelected = selected.filter(selectedOption => !filteredHighlightedPickedOptions.includes(selectedOption));
  setHighlightedPickedOptions([]);
  /**
   * as the maximum amount of selected items
   * is already restricted through the selection mechanism,
   * there's no need to handle `maxSelection` here
   */

  onChange({
    selected: newSelected
  });
};

const identity = value => value;

const useFilter = ({
  initialSearchTerm,
  onFilterChange,
  externalSearchTerm,
  filterable,
  filterCallback
}) => {
  const [internalFilter, setInternalFilter] = React.useState(initialSearchTerm);
  const filterValue = onFilterChange ? externalSearchTerm : internalFilter;
  const filter = filterable ? filterCallback : identity;
  return {
    filterValue,
    filter,
    setInternalFilter
  };
};

/**
 * @param {Object} args
 * @param {number} args.maxSelections
 * @param {string[]} args.highlightedOptions
 * @param {Object} args.option
 * @param {Function} args.setHighlightedOption
 * @returns {void}
 */

const toggleAdd = ({
  highlightedOptions,
  maxSelections,
  option,
  setHighlightedOptions
}) => {
  const afterToggled = toggleValue(highlightedOptions, option.value);
  const capped = afterToggled.slice(-1 * maxSelections);
  setHighlightedOptions(capped);
};

/**
 * @param {Object} args
 * @param {number} args.maxSelections
 * @param {string[]} args.highlightedOptions
 * @param {Object[]} args.options
 * @param {Object} args.option
 * @param {string} args.lastClicked
 * @param {Function} args.setHighlightedOption
 * @returns {void}
 */

const toggleRange = ({
  highlightedOptions,
  options,
  option,
  setHighlightedOptions,
  lastClicked,
  maxSelections
}) => {
  if (highlightedOptions.length === 0) {
    setHighlightedOptions([option.value]);
  } else {
    let from, to;
    const clickedOptionIndex = findOptionIndex(options, option);
    const lastClickedSourceOptionWithoutRangeModeIndex = lastClicked ? options.findIndex(curOption => curOption.value === lastClicked) : -1;

    if (lastClickedSourceOptionWithoutRangeModeIndex !== -1) {
      from = lastClickedSourceOptionWithoutRangeModeIndex;
      to = clickedOptionIndex;
    } else {
      /**
       * A filter-change has removed the most recently highlighted option
       */
      const firstHighlightedInList = options.findIndex(option => highlightedOptions.find(highlightedOption => highlightedOption === option.value));
      from = firstHighlightedInList;
      to = clickedOptionIndex;
    } // this is so we can also selected
    // a range of options above "from" option.
    // -> Just how slice works ;)


    const lower = Math.min(from, to);
    const higher = Math.max(from, to);
    const newHighlightedSourceOptions = options.slice(lower, higher + 1).filter(option => !option.disabled).slice(maxSelections * -1).map(({
      value
    }) => value);
    setHighlightedOptions(newHighlightedSourceOptions);
  }
};

/**
 * @param {Object} args
 * @param {string[]} args.highlightedOptions
 * @param {Object} args.option
 * @param {Function} args.setHighlightedOption
 * @returns {void}
 */
const toggleReplace = ({
  option,
  highlightedOptions,
  setHighlightedOptions
}) => {
  if (highlightedOptions.length > 1) {
    setHighlightedOptions([option.value]);
  } else {
    const optionIndex = highlightedOptions.findIndex(highlightedOption => highlightedOption === option.value);

    if (optionIndex === -1) {
      setHighlightedOptions([option.value]);
    } else {
      setHighlightedOptions([]);
    }
  }
};

/**
 * @param {Object} args
 * @param {bool} args.disabled
 * @param {string[]} args.highlightedOptions
 * @param {Function} args.setHighlightedOptions
 * @param {number} args.maxSelections
 * @param {Function} args.setLastClicked
 * @param {Object[]} args.options
 * @param {string} args.lastClicked
 * @returns {void}
 */

const createToggleHighlightedOption = ({
  disabled,
  highlightedOptions,
  setHighlightedOptions,
  maxSelections,
  setLastClicked,
  options,
  lastClicked
}) => ({
  option,
  mode
}) => {
  if (disabled) return;
  setHighlightedOptions([]);

  if (mode === ADD_MODE) {
    setLastClicked(option.value);
    return toggleAdd({
      highlightedOptions,
      maxSelections,
      option,
      setHighlightedOptions
    });
  }

  if (mode === RANGE_MODE) {
    return toggleRange({
      highlightedOptions,
      options,
      option,
      setHighlightedOptions,
      lastClicked,
      maxSelections
    });
  } // REPLACE_MODE


  setLastClicked(option.value);
  return toggleReplace({
    option,
    highlightedOptions,
    setHighlightedOptions
  });
};

/**
 * @param {Object} args
 * @param {bool} args.disabled
 * @param {number} args.maxSelection
 * @param {Object[]} args.options
 * @returns {Object} highlighted options & helpers
 */

const useHighlightedOptions = ({
  disabled,
  maxSelections,
  options
}) => {
  /**
   * These are important so the stored element can be used
   * as range-start when using shift multiple times consecutively
   */
  const [lastClicked, setLastClicked] = React.useState(null);
  const [highlightedOptions, setHighlightedOptions] = React.useState([]);
  const toggleHighlightedOption = createToggleHighlightedOption({
    disabled,
    highlightedOptions,
    setHighlightedOptions,
    maxSelections,
    setLastClicked,
    options,
    lastClicked
  });
  return {
    highlightedOptions,
    setHighlightedOptions,
    toggleHighlightedOption
  };
};

const identity$1 = value => value;
/**
 * @module
 * @param {Transfer.PropTypes} props
 *
 * @returns {React.Component}
 *
 * @example import { Transfer } from @dhis2/ui-core
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/organisms/transfer.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/transfer--basic|Storybook}
 *
 * This component has to differentiate between different types of options,
 * here's an explanation of their meaning:
 *
 * * source options -> These are options listed on the left and are available
 * for selection
 *
 * * picked options -> These options have been selected by the user and are on
 * the right side
 *
 * * highlighted option -> These are visually highlighted options than can be
 * on either side and are ready for transferral with the action buttons to the
 * other side
 *
 * * filtered options -> These are the displayed source options filtered
 * by a search term or a custom search algorithm.
 *
 * The api surface uses "selected" for "picked" to be consistent with the
 * rest of the library
 */


const Transfer = ({
  options,
  onChange,
  addAllText,
  addIndividualText,
  className,
  dataTest,
  disabled,
  enableOrderChange,
  filterCallback,
  filterCallbackPicked,
  filterLabel,
  filterLabelPicked,
  filterPlaceholder,
  filterPlaceholderPicked,
  filterable,
  filterablePicked,
  height,
  hideFilterInput,
  hideFilterInputPicked,
  initialSearchTerm,
  initialSearchTermPicked,
  leftFooter,
  leftHeader,
  loadingPicked,
  loading,
  maxSelections,
  optionsWidth,
  removeAllText,
  removeIndividualText,
  renderOption,
  rightFooter,
  rightHeader,
  searchTerm,
  searchTermPicked,
  selected,
  selectedEmptyComponent,
  selectedWidth,
  sourceEmptyPlaceholder,
  onFilterChange,
  onFilterChangePicked,
  onEndReached,
  onEndReachedPicked
}) => {
  /* Source options search value:
   * Depending on whether the onFilterChange callback has been provided
   * either the internal or external search value is used */
  const {
    filterValue: actualFilter,
    filter: actualFilterCallback,
    setInternalFilter
  } = useFilter({
    initialSearchTerm,
    onFilterChange,
    externalSearchTerm: searchTerm,
    filterable,
    filterCallback
  });
  /*
   * Actual source options:
   * Extract the not-selected options.
   * Filters options if filterable is true.
   */

  const sourceOptions = actualFilterCallback(options.filter(({
    value
  }) => !selected.includes(value)), actualFilter);
  /*
   * Picked options highlighting:
   * These are all the highlighted options on the options side.
   */

  const {
    highlightedOptions: highlightedSourceOptions,
    setHighlightedOptions: setHighlightedSourceOptions,
    toggleHighlightedOption: toggleHighlightedSourceOption
  } = useHighlightedOptions({
    options: sourceOptions,
    disabled,
    maxSelections
  });
  /* Picked options search value:
   * Depending on whether the onFilterChangePicked callback has been provided
   * either the internal or external search value is used */

  const {
    filterValue: actualFilterPicked,
    filter: actualFilterPickedCallback,
    setInternalFilter: setInternalFilterPicked
  } = useFilter({
    filterable: filterablePicked,
    initialSearchTerm: initialSearchTermPicked,
    onFilterChange: onFilterChangePicked,
    externalSearchTerm: searchTermPicked,
    filterCallback: filterCallbackPicked
  });
  /*
   * Actual picked options:
   * Extract the selected options. Can't use `options.filter`
   * because we need to keep the order of `selected`
   */

  const pickedOptions = actualFilterPickedCallback(selected.map(value => options.find(option => value === option.value)) // filter -> in case a selected value has been provided
  // that does not exist as option
  .filter(identity$1), actualFilterPicked);
  /*
   * Source options highlighting:
   * These are all the highlighted options on the selected side.
   */

  const {
    highlightedOptions: highlightedPickedOptions,
    setHighlightedOptions: setHighlightedPickedOptions,
    toggleHighlightedOption: toggleHighlightedPickedOption
  } = useHighlightedOptions({
    options: pickedOptions,
    disabled,
    maxSelections
  });
  /*
   * Source & Picked options:
   * These are the double click handlers for (de-)selection
   */

  const {
    selectSingleOption,
    deselectSingleOption
  } = createDoubleClickHandlers({
    selected,
    setHighlightedSourceOptions,
    setHighlightedPickedOptions,
    onChange,
    maxSelections
  });
  /**
   * Disabled button states
   */

  const isAddAllDisabled = disabled || sourceOptions.filter(({
    disabled
  }) => !disabled).length === 0;
  const isAddIndividualDisabled = disabled || !highlightedSourceOptions.length;
  const isRemoveAllDisabled = disabled || !selected.length;
  const isRemoveIndividualDisabled = disabled || !highlightedPickedOptions.length;
  return /*#__PURE__*/React__default.createElement(Container, {
    dataTest: dataTest,
    className: className,
    height: height
  }, /*#__PURE__*/React__default.createElement(LeftSide, {
    dataTest: "".concat(dataTest, "-leftside"),
    width: optionsWidth
  }, (leftHeader || filterable) && /*#__PURE__*/React__default.createElement(LeftHeader, {
    dataTest: "".concat(dataTest, "-leftheader")
  }, leftHeader, filterable && !hideFilterInput && /*#__PURE__*/React__default.createElement(Filter, {
    label: filterLabel,
    placeholder: filterPlaceholder,
    dataTest: "".concat(dataTest, "-filter"),
    filter: actualFilter,
    onChange: onFilterChange ? onFilterChange : ({
      value
    }) => setInternalFilter(value)
  })), /*#__PURE__*/React__default.createElement(OptionsContainer, {
    dataTest: "".concat(dataTest, "-sourceoptions"),
    emptyComponent: sourceEmptyPlaceholder,
    getOptionClickHandlers: getOptionClickHandlers,
    highlightedOptions: highlightedSourceOptions,
    loading: loading,
    options: sourceOptions,
    renderOption: renderOption,
    selectionHandler: selectSingleOption,
    toggleHighlightedOption: toggleHighlightedSourceOption,
    onEndReached: onEndReached
  }), leftFooter && /*#__PURE__*/React__default.createElement(LeftFooter, {
    dataTest: "".concat(dataTest, "-leftfooter")
  }, leftFooter)), /*#__PURE__*/React__default.createElement(Actions, {
    dataTest: "".concat(dataTest, "-actions")
  }, maxSelections === Infinity && /*#__PURE__*/React__default.createElement(AddAll, {
    label: addAllText,
    dataTest: "".concat(dataTest, "-actions-addall"),
    disabled: isAddAllDisabled,
    onClick: () => addAllSelectableSourceOptions({
      sourceOptions,
      selected,
      onChange,
      setHighlightedSourceOptions
    })
  }), /*#__PURE__*/React__default.createElement(AddIndividual, {
    label: addIndividualText,
    dataTest: "".concat(dataTest, "-actions-addindividual"),
    disabled: isAddIndividualDisabled,
    onClick: () => addIndividualSourceOptions({
      filterable,
      sourceOptions,
      highlightedSourceOptions,
      selected,
      maxSelections,
      onChange,
      setHighlightedSourceOptions
    })
  }), maxSelections === Infinity && /*#__PURE__*/React__default.createElement(RemoveAll, {
    label: removeAllText,
    dataTest: "".concat(dataTest, "-actions-removeall"),
    disabled: isRemoveAllDisabled,
    onClick: () => removeAllPickedOptions({
      setHighlightedPickedOptions,
      onChange
    })
  }), /*#__PURE__*/React__default.createElement(RemoveIndividual, {
    label: removeIndividualText,
    dataTest: "".concat(dataTest, "-actions-removeindividual"),
    disabled: isRemoveIndividualDisabled,
    onClick: () => removeIndividualPickedOptions({
      filterablePicked,
      pickedOptions,
      highlightedPickedOptions,
      onChange,
      selected,
      setHighlightedPickedOptions
    })
  })), /*#__PURE__*/React__default.createElement(RightSide, {
    dataTest: "".concat(dataTest, "-rightside"),
    width: selectedWidth
  }, (rightHeader || filterablePicked) && /*#__PURE__*/React__default.createElement(RightHeader, {
    dataTest: "".concat(dataTest, "-rightheader")
  }, rightHeader, filterablePicked && !hideFilterInputPicked && /*#__PURE__*/React__default.createElement(Filter, {
    label: filterLabelPicked,
    placeholder: filterPlaceholderPicked,
    dataTest: "".concat(dataTest, "-filter"),
    filter: actualFilterPicked,
    onChange: onFilterChangePicked ? onFilterChangePicked : ({
      value
    }) => setInternalFilterPicked(value)
  })), /*#__PURE__*/React__default.createElement(OptionsContainer, {
    dataTest: "".concat(dataTest, "-pickedoptions"),
    emptyComponent: selectedEmptyComponent,
    getOptionClickHandlers: getOptionClickHandlers,
    highlightedOptions: highlightedPickedOptions,
    loading: loadingPicked,
    options: pickedOptions,
    renderOption: renderOption,
    selectionHandler: deselectSingleOption,
    toggleHighlightedOption: toggleHighlightedPickedOption,
    onEndReached: onEndReachedPicked
  }), (rightFooter || enableOrderChange) && /*#__PURE__*/React__default.createElement(RightFooter, {
    dataTest: "".concat(dataTest, "-rightfooter")
  }, enableOrderChange && /*#__PURE__*/React__default.createElement(ReorderingActions, {
    dataTest: "".concat(dataTest, "-reorderingactions"),
    disabledDown: isReorderDownDisabled({
      highlightedPickedOptions,
      selected
    }),
    disabledUp: isReorderUpDisabled({
      highlightedPickedOptions,
      selected
    }),
    onChangeUp: () => moveHighlightedPickedOptionUp({
      selected,
      highlightedPickedOptions,
      onChange
    }),
    onChangeDown: () => {
      moveHighlightedPickedOptionDown({
        selected,
        highlightedPickedOptions,
        onChange
      });
    }
  }), rightFooter)));
};

const defaultRenderOption = option => /*#__PURE__*/React__default.createElement(TransferOption, option);

Transfer.defaultProps = {
  dataTest: 'dhis2-uicore-transfer',
  height: '240px',
  initialSearchTerm: '',
  initialSearchTermPicked: '',
  maxSelections: Infinity,
  optionsWidth: '320px',
  renderOption: defaultRenderOption,
  selected: [],
  selectedWidth: '320px',
  filterCallback: defaultFilterCallback,
  filterCallbackPicked: defaultFilterCallback
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {Function} onChange
 * @prop {string} [addAllText]
 * @prop {string} [addIndividualText]
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 * @prop {Node} [sourceEmptyPlaceholder]
 * @prop {Node} [selectedEmptyComponent]
 * @prop {bool} [hideFilterInput] Automatically true when "hideFilterInput" is true
 * @prop {bool} [enableOrderChange]
 * @prop {string} [filterLabel]
 * @prop {string} [filterPlaceholder]
 * @prop {Function} [filterCallback]
 * @prop {string} [height]
 * @prop {bool} [hideFilterInput]
 * @prop {string} [initialSearchTerm]
 * @prop {Node} [leftFooter]
 * @prop {Node} [leftHeader]
 * @prop {1|Infinity} maxSelections
 * @prop {string} [optionsWidth]
 * @prop {string} [removeAllText]
 * @prop {string} [removeIndividualText]
 * @prop {Node} [rightHeader]
 * @prop {Node} [rightFooter]
 * @prop {string} [searchTerm]
 * @prop {string[]} selected
 * @prop {string} [selectedWidth]
 * @prop {Function} [onFilterChange]
 */

Transfer.propTypes = {
  options: propTypes.arrayOf(propTypes.shape({
    label: propTypes.string.isRequired,
    value: propTypes.string.isRequired,
    disabled: propTypes.bool
  })).isRequired,
  onChange: propTypes.func.isRequired,
  addAllText: propTypes.string,
  addIndividualText: propTypes.string,
  className: propTypes.string,
  dataTest: propTypes.string,
  disabled: propTypes.bool,
  enableOrderChange: propTypes.bool,
  filterCallback: propTypes.func,
  filterCallbackPicked: propTypes.func,
  filterLabel: propTypes.string,
  filterLabelPicked: propTypes.string,
  filterPlaceholder: propTypes.string,
  filterPlaceholderPicked: propTypes.string,
  filterable: propTypes.bool,
  filterablePicked: propTypes.bool,
  height: propTypes.string,
  hideFilterInput: propTypes.bool,
  hideFilterInputPicked: propTypes.bool,
  initialSearchTerm: propTypes.string,
  initialSearchTermPicked: propTypes.string,
  leftFooter: propTypes.node,
  leftHeader: propTypes.node,
  loading: propTypes.bool,
  loadingPicked: propTypes.bool,
  maxSelections: propTypes.oneOf([1, Infinity]),
  optionsWidth: propTypes.string,
  removeAllText: propTypes.string,
  removeIndividualText: propTypes.string,
  renderOption: propTypes.func,
  rightFooter: propTypes.node,
  rightHeader: propTypes.node,
  searchTerm: propTypes.string,
  searchTermPicked: propTypes.string,
  selected: propTypes.arrayOf(propTypes.string),
  selectedEmptyComponent: propTypes.node,
  selectedWidth: propTypes.string,
  sourceEmptyPlaceholder: propTypes.node,
  onEndReached: propTypes.func,
  onEndReachedPicked: propTypes.func,
  onFilterChange: propTypes.func,
  onFilterChangePicked: propTypes.func
};

exports.CheckboxField = CheckboxField;
exports.FieldGroup = FieldGroup;
exports.FileInputField = FileInputField;
exports.HeaderBar = HeaderBar;
exports.InputField = InputField;
exports.MultiSelectField = MultiSelectField;
exports.OrganisationUnitTree = OrganisationUnitTree;
exports.SingleSelectField = SingleSelectField;
exports.SwitchField = SwitchField;
exports.TextAreaField = TextAreaField;
exports.Transfer = Transfer;
exports.TransferOption = TransferOption;
//# sourceMappingURL=lib.js.map
